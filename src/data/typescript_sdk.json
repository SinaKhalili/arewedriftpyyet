{
  "classes": [
    {
      "file": "protocol-v2/sdk/src/accounts/basicUserAccountSubscriber.ts",
      "name": "BasicUserAccountSubscriber",
      "abstract": false,
      "implements": [
        "UserAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "data",
              "type": "UserAccount"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "startLine": 21,
          "endLine": 30
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "_userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 32,
          "endLine": 34
        },
        {
          "name": "addToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 36,
          "endLine": 36
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 38,
          "endLine": 38
        },
        {
          "name": "doesAccountExist",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 40,
          "endLine": 42
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 44,
          "endLine": 44
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 46,
          "endLine": 46
        },
        {
          "name": "getUserAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<UserAccount>",
          "startLine": 48,
          "endLine": 50
        },
        {
          "name": "updateData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 52,
          "endLine": 58
        }
      ],
      "startLine": 11,
      "endLine": 59
    },
    {
      "file": "protocol-v2/sdk/src/accounts/basicUserStatsAccountSubscriber.ts",
      "name": "BasicUserStatsAccountSubscriber",
      "abstract": false,
      "implements": [
        "UserStatsAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userStatsAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "data",
              "type": "UserStatsAccount"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "startLine": 27,
          "endLine": 36
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "_userStatsAccount",
              "type": "UserStatsAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 38,
          "endLine": 40
        },
        {
          "name": "addToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 42,
          "endLine": 42
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 44,
          "endLine": 44
        },
        {
          "name": "doesAccountExist",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 46,
          "endLine": 48
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 50,
          "endLine": 50
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 52,
          "endLine": 52
        },
        {
          "name": "getUserStatsAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<UserStatsAccount>",
          "startLine": 54,
          "endLine": 56
        },
        {
          "name": "updateData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userStatsAccount",
              "type": "UserStatsAccount"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 58,
          "endLine": 64
        }
      ],
      "startLine": 15,
      "endLine": 65
    },
    {
      "file": "protocol-v2/sdk/src/accounts/bulkAccountLoader.ts",
      "name": "BulkAccountLoader",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            },
            {
              "name": "pollingFrequency",
              "type": "number"
            }
          ],
          "startLine": 29,
          "endLine": 37
        },
        {
          "name": "addAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "callback",
              "type": "(buffer: Buffer<ArrayBufferLike>, slot: number) => void"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 39,
          "endLine": 74
        },
        {
          "name": "removeAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "callbackId",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 76,
          "endLine": 89
        },
        {
          "name": "addErrorCallbacks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "callback",
              "type": "(error: Error) => void"
            }
          ],
          "returns": "string",
          "startLine": 91,
          "endLine": 95
        },
        {
          "name": "removeErrorCallbacks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "callbackId",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 97,
          "endLine": 99
        },
        {
          "name": "chunks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "array",
              "type": "readonly T[]"
            },
            {
              "name": "size",
              "type": "number"
            }
          ],
          "returns": "T[][]",
          "startLine": 101,
          "endLine": 106
        },
        {
          "name": "load",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 108,
          "endLine": 147
        },
        {
          "name": "loadChunk",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "accountsToLoadChunks",
              "type": "AccountToLoad[][]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 149,
          "endLine": 233
        },
        {
          "name": "handleAccountCallbacks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountToLoad",
              "type": "AccountToLoad"
            },
            {
              "name": "buffer",
              "type": "Buffer<ArrayBufferLike>"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 235,
          "endLine": 253
        },
        {
          "name": "getBufferAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "BufferAndSlot",
          "startLine": 255,
          "endLine": 257
        },
        {
          "name": "getSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 259,
          "endLine": 261
        },
        {
          "name": "startPolling",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 263,
          "endLine": 273
        },
        {
          "name": "stopPolling",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 275,
          "endLine": 280
        },
        {
          "name": "log",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "msg",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 282,
          "endLine": 284
        },
        {
          "name": "updatePollingFrequency",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "pollingFrequency",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 286,
          "endLine": 292
        }
      ],
      "startLine": 15,
      "endLine": 293
    },
    {
      "file": "protocol-v2/sdk/src/accounts/customizedCadenceBulkAccountLoader.ts",
      "name": "CustomizedCadenceBulkAccountLoader",
      "abstract": false,
      "extends": "BulkAccountLoader",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            },
            {
              "name": "defaultPollingFrequency",
              "type": "number"
            }
          ],
          "startLine": 13,
          "endLine": 24
        },
        {
          "name": "getAccountsToLoad",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "{ publicKey: PublicKey; callbacks: Map<string, (buffer: Buffer<ArrayBufferLike>, slot: number) => void>; }[]",
          "startLine": 26,
          "endLine": 48
        },
        {
          "name": "load",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 50,
          "endLine": 52
        },
        {
          "name": "handleAccountLoading",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 54,
          "endLine": 69
        },
        {
          "name": "setCustomPollingFrequency",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "newFrequency",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 77,
          "endLine": 85
        },
        {
          "name": "restartPollingIfNeeded",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "newFrequency",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 87,
          "endLine": 96
        },
        {
          "name": "addAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "callback",
              "type": "(buffer: Buffer<ArrayBufferLike>, slot: number) => void"
            },
            {
              "name": "customPollingFrequency",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 113,
          "endLine": 150
        },
        {
          "name": "removeAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "callbackId",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 152,
          "endLine": 173
        },
        {
          "name": "getAccountCadence",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "number",
          "startLine": 175,
          "endLine": 178
        },
        {
          "name": "startPolling",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 180,
          "endLine": 197
        },
        {
          "name": "stopPolling",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 199,
          "endLine": 208
        },
        {
          "name": "clearAccountFrequencies",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 210,
          "endLine": 212
        }
      ],
      "startLine": 6,
      "endLine": 213
    },
    {
      "file": "protocol-v2/sdk/src/accounts/grpcAccountSubscriber.ts",
      "name": "grpcAccountSubscriber",
      "abstract": false,
      "extends": "WebSocketAccountSubscriber",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "client",
              "type": "Client"
            },
            {
              "name": "commitmentLevel",
              "type": "CommitmentLevel"
            },
            {
              "name": "accountName",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "accountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "decodeBuffer",
              "type": "(buffer: Buffer<ArrayBufferLike>) => T"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "startLine": 22,
          "endLine": 34
        },
        {
          "name": "create",
          "kind": "method",
          "isStatic": true,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "grpcConfigs",
              "type": "GrpcConfigs"
            },
            {
              "name": "accountName",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "accountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "decodeBuffer",
              "type": "(buffer: Buffer<ArrayBufferLike>) => U"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "clientProp",
              "type": "Client"
            }
          ],
          "returns": "Promise<grpcAccountSubscriber<U>>",
          "startLine": 36,
          "endLine": 65
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onChange",
              "type": "(data: T) => void"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 67,
          "endLine": 147
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 149,
          "endLine": 186
        }
      ],
      "startLine": 16,
      "endLine": 187
    },
    {
      "file": "protocol-v2/sdk/src/accounts/grpcDriftClientAccountSubscriber.ts",
      "name": "grpcDriftClientAccountSubscriber",
      "abstract": false,
      "extends": "WebSocketDriftClientAccountSubscriber",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "grpcConfigs",
              "type": "GrpcConfigs"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "perpMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "spotMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "oracleInfos",
              "type": "OracleInfo[]"
            },
            {
              "name": "shouldFindAllMarketsAndOracles",
              "type": "boolean"
            },
            {
              "name": "delistedMarketSetting",
              "type": "DelistedMarketSetting"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "startLine": 18,
          "endLine": 38
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 40,
          "endLine": 121
        },
        {
          "name": "subscribeToSpotMarketAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 123,
          "endLine": 148
        },
        {
          "name": "subscribeToPerpMarketAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 150,
          "endLine": 173
        },
        {
          "name": "subscribeToOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleInfo",
              "type": "OracleInfo"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 175,
          "endLine": 206
        }
      ],
      "startLine": 15,
      "endLine": 207
    },
    {
      "file": "protocol-v2/sdk/src/accounts/grpcDriftClientAccountSubscriberV2.ts",
      "name": "grpcDriftClientAccountSubscriberV2",
      "abstract": false,
      "implements": [
        "DriftClientAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "grpcConfigs",
              "type": "GrpcConfigs"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "perpMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "spotMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "oracleInfos",
              "type": "OracleInfo[]"
            },
            {
              "name": "shouldFindAllMarketsAndOracles",
              "type": "boolean"
            },
            {
              "name": "delistedMarketSetting",
              "type": "DelistedMarketSetting"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "startLine": 77,
          "endLine": 105
        },
        {
          "name": "setInitialData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 114,
          "endLine": 204
        },
        {
          "name": "addPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "_marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 206,
          "endLine": 211
        },
        {
          "name": "addSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "_marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 213,
          "endLine": 215
        },
        {
          "name": "addOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleInfo",
              "type": "OracleInfo"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 217,
          "endLine": 238
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 240,
          "endLine": 319
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 321,
          "endLine": 326
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 328,
          "endLine": 334
        },
        {
          "name": "getStateAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<StateAccount>",
          "startLine": 336,
          "endLine": 339
        },
        {
          "name": "getMarketAccountsAndSlots",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<PerpMarketAccount>[]",
          "startLine": 341,
          "endLine": 344
        },
        {
          "name": "getSpotMarketAccountsAndSlots",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<SpotMarketAccount>[]",
          "startLine": 346,
          "endLine": 349
        },
        {
          "name": "getMarketAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<PerpMarketAccount>",
          "startLine": 351,
          "endLine": 357
        },
        {
          "name": "getSpotMarketAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<SpotMarketAccount>",
          "startLine": 359,
          "endLine": 365
        },
        {
          "name": "getOraclePriceDataAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "oracleId",
              "type": "string"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 367,
          "endLine": 374
        },
        {
          "name": "getOraclePriceDataAndSlotForPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 376,
          "endLine": 392
        },
        {
          "name": "getOraclePriceDataAndSlotForSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 394,
          "endLine": 410
        },
        {
          "name": "setPerpOracleMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 412,
          "endLine": 436
        },
        {
          "name": "setSpotOracleMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 438,
          "endLine": 462
        },
        {
          "name": "subscribeToPerpMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 464,
          "endLine": 529
        },
        {
          "name": "subscribeToSpotMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 531,
          "endLine": 596
        },
        {
          "name": "subscribeToOracles",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 598,
          "endLine": 681
        },
        {
          "name": "handleDelistedMarkets",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 683,
          "endLine": 744
        },
        {
          "name": "removeInitialData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 746,
          "endLine": 750
        },
        {
          "name": "unsubscribeFromOracles",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 752,
          "endLine": 758
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 760,
          "endLine": 781
        }
      ],
      "startLine": 34,
      "endLine": 782
    },
    {
      "file": "protocol-v2/sdk/src/accounts/grpcInsuranceFundStakeAccountSubscriber.ts",
      "name": "grpcInsuranceFundStakeAccountSubscriber",
      "abstract": false,
      "extends": "WebSocketInsuranceFundStakeAccountSubscriber",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "grpcConfigs",
              "type": "GrpcConfigs"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "insuranceFundStakeAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "resubTimeoutMs",
              "type": "number"
            }
          ],
          "startLine": 11,
          "endLine": 19
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "insuranceFundStakeAccount",
              "type": "InsuranceFundStake"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 21,
          "endLine": 56
        }
      ],
      "startLine": 8,
      "endLine": 57
    },
    {
      "file": "protocol-v2/sdk/src/accounts/grpcMultiAccountSubscriber.ts",
      "name": "grpcMultiAccountSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "client",
              "type": "Client"
            },
            {
              "name": "commitmentLevel",
              "type": "CommitmentLevel"
            },
            {
              "name": "accountName",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "decodeBuffer",
              "type": "(buffer: Buffer<ArrayBufferLike>, pubkey?: string) => T"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "onUnsubscribe",
              "type": "() => Promise<void>"
            },
            {
              "name": "accountPropsMap",
              "type": "Map<string, U | U[]>"
            }
          ],
          "startLine": 68,
          "endLine": 86
        },
        {
          "name": "create",
          "kind": "method",
          "isStatic": true,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "grpcConfigs",
              "type": "GrpcConfigs"
            },
            {
              "name": "accountName",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "decodeBuffer",
              "type": "(buffer: Buffer<ArrayBufferLike>, pubkey?: string, accountProps?: U) => T"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "clientProp",
              "type": "Client"
            },
            {
              "name": "onUnsubscribe",
              "type": "() => Promise<void>"
            },
            {
              "name": "accountPropsMap",
              "type": "Map<string, U | U[]>"
            }
          ],
          "returns": "Promise<grpcMultiAccountSubscriber<T, U>>",
          "startLine": 88,
          "endLine": 119
        },
        {
          "name": "setAccountData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountPubkey",
              "type": "string"
            },
            {
              "name": "data",
              "type": "T"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 121,
          "endLine": 123
        },
        {
          "name": "getAccountData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountPubkey",
              "type": "string"
            }
          ],
          "returns": "DataAndSlot<T>",
          "startLine": 125,
          "endLine": 127
        },
        {
          "name": "getAccountDataMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Map<string, DataAndSlot<T>>",
          "startLine": 129,
          "endLine": 131
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 133,
          "endLine": 199
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "accounts",
              "type": "PublicKey[]"
            },
            {
              "name": "onChange",
              "type": "(accountId: PublicKey, data: T, context: Context, buffer: Buffer<ArrayBufferLike>, accountProps: U) => void"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 201,
          "endLine": 342
        },
        {
          "name": "addAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "accounts",
              "type": "PublicKey[]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 344,
          "endLine": 375
        },
        {
          "name": "removeAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "accounts",
              "type": "PublicKey[]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 377,
          "endLine": 410
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 412,
          "endLine": 454
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 456,
          "endLine": 469
        },
        {
          "name": "capitalize",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "returns": "string",
          "startLine": 471,
          "endLine": 474
        }
      ],
      "startLine": 39,
      "endLine": 475
    },
    {
      "file": "protocol-v2/sdk/src/accounts/grpcProgramAccountSubscriber.ts",
      "name": "grpcProgramAccountSubscriber",
      "abstract": false,
      "extends": "WebSocketProgramAccountSubscriber",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "client",
              "type": "Client"
            },
            {
              "name": "commitmentLevel",
              "type": "CommitmentLevel"
            },
            {
              "name": "subscriptionName",
              "type": "string"
            },
            {
              "name": "accountDiscriminator",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "decodeBufferFn",
              "type": "(accountName: string, ix: Buffer<ArrayBufferLike>) => T"
            },
            {
              "name": "options",
              "type": "{ filters: MemcmpFilter[]; }"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "startLine": 24,
          "endLine": 46
        },
        {
          "name": "create",
          "kind": "method",
          "isStatic": true,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "grpcConfigs",
              "type": "GrpcConfigs"
            },
            {
              "name": "subscriptionName",
              "type": "string"
            },
            {
              "name": "accountDiscriminator",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "decodeBufferFn",
              "type": "(accountName: string, ix: Buffer<ArrayBufferLike>) => U"
            },
            {
              "name": "options",
              "type": "{ filters: MemcmpFilter[]; }"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "returns": "Promise<grpcProgramAccountSubscriber<U>>",
          "startLine": 48,
          "endLine": 78
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onChange",
              "type": "(accountId: PublicKey, data: T, context: Context, buffer: Buffer<ArrayBufferLike>) => void"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 80,
          "endLine": 178
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 180,
          "endLine": 217
        }
      ],
      "startLine": 16,
      "endLine": 218
    },
    {
      "file": "protocol-v2/sdk/src/accounts/grpcUserAccountSubscriber.ts",
      "name": "grpcUserAccountSubscriber",
      "abstract": false,
      "extends": "WebSocketUserAccountSubscriber",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "grpcConfigs",
              "type": "GrpcConfigs"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "startLine": 11,
          "endLine": 19
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 21,
          "endLine": 47
        }
      ],
      "startLine": 8,
      "endLine": 48
    },
    {
      "file": "protocol-v2/sdk/src/accounts/grpcUserStatsAccountSubscriber.ts",
      "name": "grpcUserStatsAccountSubscriber",
      "abstract": false,
      "extends": "WebSocketUserStatsAccountSubscriber",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "grpcConfigs",
              "type": "GrpcConfigs"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "userStatsAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "startLine": 11,
          "endLine": 19
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userStatsAccount",
              "type": "UserStatsAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 21,
          "endLine": 49
        }
      ],
      "startLine": 8,
      "endLine": 50
    },
    {
      "file": "protocol-v2/sdk/src/accounts/laserProgramAccountSubscriber.ts",
      "name": "LaserstreamProgramAccountSubscriber",
      "abstract": false,
      "extends": "WebSocketProgramAccountSubscriber",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "laserConfig",
              "type": "LaserstreamConfig"
            },
            {
              "name": "commitmentLevel",
              "type": "CommitmentLevel"
            },
            {
              "name": "subscriptionName",
              "type": "string"
            },
            {
              "name": "accountDiscriminator",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "decodeBufferFn",
              "type": "(accountName: string, ix: Buffer<ArrayBufferLike>) => T"
            },
            {
              "name": "options",
              "type": "{ filters: MemcmpFilter[]; }"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "startLine": 36,
          "endLine": 56
        },
        {
          "name": "create",
          "kind": "method",
          "isStatic": true,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "grpcConfigs",
              "type": "GrpcConfigs"
            },
            {
              "name": "subscriptionName",
              "type": "string"
            },
            {
              "name": "accountDiscriminator",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "decodeBufferFn",
              "type": "(accountName: string, ix: Buffer<ArrayBufferLike>) => U"
            },
            {
              "name": "options",
              "type": "{ filters: MemcmpFilter[]; }"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "returns": "Promise<LaserstreamProgramAccountSubscriber<U>>",
          "startLine": 58,
          "endLine": 92
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onChange",
              "type": "(accountId: PublicKey, data: T, context: Context, buffer: Buffer<ArrayBufferLike>) => void"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 94,
          "endLine": 182
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 184,
          "endLine": 202
        },
        {
          "name": "toLaserCommitment",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "level",
              "type": "string | number"
            }
          ],
          "returns": "any",
          "startLine": 204,
          "endLine": 214
        }
      ],
      "startLine": 20,
      "endLine": 215
    },
    {
      "file": "protocol-v2/sdk/src/accounts/oneShotUserAccountSubscriber.ts",
      "name": "OneShotUserAccountSubscriber",
      "abstract": false,
      "extends": "BasicUserAccountSubscriber",
      "implements": [
        "UserAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "data",
              "type": "UserAccount"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "startLine": 19,
          "endLine": 29
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 31,
          "endLine": 42
        },
        {
          "name": "fetchIfUnloaded",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 44,
          "endLine": 48
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 50,
          "endLine": 67
        }
      ],
      "startLine": 12,
      "endLine": 68
    },
    {
      "file": "protocol-v2/sdk/src/accounts/oneShotUserStatsAccountSubscriber.ts",
      "name": "OneShotUserStatsAccountSubscriber",
      "abstract": false,
      "extends": "BasicUserStatsAccountSubscriber",
      "implements": [
        "UserStatsAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "userStatsAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "data",
              "type": "UserStatsAccount"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "startLine": 19,
          "endLine": 29
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userStatsAccount",
              "type": "UserStatsAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 31,
          "endLine": 42
        },
        {
          "name": "fetchIfUnloaded",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 44,
          "endLine": 48
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 50,
          "endLine": 68
        }
      ],
      "startLine": 12,
      "endLine": 69
    },
    {
      "file": "protocol-v2/sdk/src/accounts/pollingDriftClientAccountSubscriber.ts",
      "name": "PollingDriftClientAccountSubscriber",
      "abstract": false,
      "implements": [
        "DriftClientAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "accountLoader",
              "type": "BulkAccountLoader"
            },
            {
              "name": "perpMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "spotMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "oracleInfos",
              "type": "OracleInfo[]"
            },
            {
              "name": "shouldFindAllMarketsAndOracles",
              "type": "boolean"
            },
            {
              "name": "delistedMarketSetting",
              "type": "DelistedMarketSetting"
            }
          ],
          "startLine": 73,
          "endLine": 91
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 93,
          "endLine": 141
        },
        {
          "name": "updateAccountsToPoll",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 143,
          "endLine": 162
        },
        {
          "name": "updatePerpMarketAccountsToPoll",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 164,
          "endLine": 171
        },
        {
          "name": "addPerpMarketAccountToPoll",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 173,
          "endLine": 187
        },
        {
          "name": "updateSpotMarketAccountsToPoll",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 189,
          "endLine": 197
        },
        {
          "name": "addSpotMarketAccountToPoll",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 199,
          "endLine": 212
        },
        {
          "name": "updateOraclesToPoll",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 214,
          "endLine": 222
        },
        {
          "name": "addOracleToPoll",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "oracleInfo",
              "type": "OracleInfo"
            }
          ],
          "returns": "boolean",
          "startLine": 224,
          "endLine": 234
        },
        {
          "name": "addToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 235,
          "endLine": 251
        },
        {
          "name": "addAccountToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "accountToPoll",
              "type": "AccountToPoll"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 253,
          "endLine": 281
        },
        {
          "name": "addOracleToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleToPoll",
              "type": "OraclesToPoll"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 283,
          "endLine": 315
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 317,
          "endLine": 376
        },
        {
          "name": "didSubscriptionSucceed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 378,
          "endLine": 382
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 384,
          "endLine": 405
        },
        {
          "name": "addSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 407,
          "endLine": 424
        },
        {
          "name": "addPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 426,
          "endLine": 441
        },
        {
          "name": "addOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleInfo",
              "type": "OracleInfo"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 443,
          "endLine": 463
        },
        {
          "name": "pauseForOracleToBeAdded",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "tries",
              "type": "number"
            },
            {
              "name": "oracle",
              "type": "string"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 465,
          "endLine": 480
        },
        {
          "name": "setPerpOracleMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 482,
          "endLine": 502
        },
        {
          "name": "setSpotOracleMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 504,
          "endLine": 524
        },
        {
          "name": "handleDelistedMarkets",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 526,
          "endLine": 555
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 557,
          "endLine": 563
        },
        {
          "name": "getStateAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<StateAccount>",
          "startLine": 565,
          "endLine": 568
        },
        {
          "name": "getMarketAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<PerpMarketAccount>",
          "startLine": 570,
          "endLine": 574
        },
        {
          "name": "getMarketAccountsAndSlots",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<PerpMarketAccount>[]",
          "startLine": 576,
          "endLine": 578
        },
        {
          "name": "getSpotMarketAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<SpotMarketAccount>",
          "startLine": 580,
          "endLine": 584
        },
        {
          "name": "getSpotMarketAccountsAndSlots",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<SpotMarketAccount>[]",
          "startLine": 586,
          "endLine": 588
        },
        {
          "name": "getOraclePriceDataAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "oracleId",
              "type": "string"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 590,
          "endLine": 602
        },
        {
          "name": "getOraclePriceDataAndSlotForPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 604,
          "endLine": 621
        },
        {
          "name": "getOraclePriceDataAndSlotForSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 623,
          "endLine": 639
        },
        {
          "name": "updateAccountLoaderPollingFrequency",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "pollingFrequency",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 641,
          "endLine": 643
        }
      ],
      "startLine": 39,
      "endLine": 644
    },
    {
      "file": "protocol-v2/sdk/src/accounts/pollingHighLeverageModeConfigAccountSubscriber.ts",
      "name": "PollingHighLeverageModeConfigAccountSubscriber",
      "abstract": false,
      "implements": [
        "HighLeverageModeConfigAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "accountLoader",
              "type": "BulkAccountLoader"
            }
          ],
          "startLine": 31,
          "endLine": 41
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "highLeverageModeConfig",
              "type": "HighLeverageModeConfig"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 43,
          "endLine": 67
        },
        {
          "name": "addToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 69,
          "endLine": 101
        },
        {
          "name": "fetchIfUnloaded",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 103,
          "endLine": 107
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 109,
          "endLine": 130
        },
        {
          "name": "doesAccountExist",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 132,
          "endLine": 134
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 136,
          "endLine": 151
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 153,
          "endLine": 159
        },
        {
          "name": "getHighLeverageModeConfigAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<HighLeverageModeConfig>",
          "startLine": 161,
          "endLine": 164
        },
        {
          "name": "didSubscriptionSucceed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 166,
          "endLine": 168
        },
        {
          "name": "updateData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "highLeverageModeConfig",
              "type": "HighLeverageModeConfig"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 170,
          "endLine": 188
        }
      ],
      "startLine": 14,
      "endLine": 189
    },
    {
      "file": "protocol-v2/sdk/src/accounts/pollingInsuranceFundStakeAccountSubscriber.ts",
      "name": "PollingInsuranceFundStakeAccountSubscriber",
      "abstract": false,
      "implements": [
        "InsuranceFundStakeAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "accountLoader",
              "type": "BulkAccountLoader"
            }
          ],
          "startLine": 31,
          "endLine": 41
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "insuranceFundStake",
              "type": "InsuranceFundStake"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 43,
          "endLine": 63
        },
        {
          "name": "addToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 65,
          "endLine": 97
        },
        {
          "name": "fetchIfUnloaded",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 99,
          "endLine": 103
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 105,
          "endLine": 126
        },
        {
          "name": "doesAccountExist",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 128,
          "endLine": 130
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 132,
          "endLine": 147
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 149,
          "endLine": 155
        },
        {
          "name": "getInsuranceFundStakeAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<InsuranceFundStake>",
          "startLine": 157,
          "endLine": 160
        },
        {
          "name": "didSubscriptionSucceed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 162,
          "endLine": 164
        },
        {
          "name": "updateData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "insuranceFundStake",
              "type": "InsuranceFundStake"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 166,
          "endLine": 184
        }
      ],
      "startLine": 14,
      "endLine": 185
    },
    {
      "file": "protocol-v2/sdk/src/accounts/pollingOracleAccountSubscriber.ts",
      "name": "PollingOracleAccountSubscriber",
      "abstract": false,
      "implements": [
        "OracleAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "oracleClient",
              "type": "OracleClient"
            },
            {
              "name": "accountLoader",
              "type": "BulkAccountLoader"
            }
          ],
          "startLine": 27,
          "endLine": 37
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 39,
          "endLine": 60
        },
        {
          "name": "addToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 62,
          "endLine": 82
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 84,
          "endLine": 93
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 95,
          "endLine": 107
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 109,
          "endLine": 115
        },
        {
          "name": "getOraclePriceData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 117,
          "endLine": 120
        },
        {
          "name": "didSubscriptionSucceed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 122,
          "endLine": 124
        }
      ],
      "startLine": 14,
      "endLine": 125
    },
    {
      "file": "protocol-v2/sdk/src/accounts/pollingTokenAccountSubscriber.ts",
      "name": "PollingTokenAccountSubscriber",
      "abstract": false,
      "implements": [
        "TokenAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "accountLoader",
              "type": "BulkAccountLoader"
            }
          ],
          "startLine": 27,
          "endLine": 32
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 34,
          "endLine": 54
        },
        {
          "name": "addToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 56,
          "endLine": 75
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 77,
          "endLine": 86
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 88,
          "endLine": 100
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 102,
          "endLine": 108
        },
        {
          "name": "getTokenAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<Account>",
          "startLine": 110,
          "endLine": 113
        },
        {
          "name": "didSubscriptionSucceed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 115,
          "endLine": 117
        }
      ],
      "startLine": 15,
      "endLine": 118
    },
    {
      "file": "protocol-v2/sdk/src/accounts/pollingUserAccountSubscriber.ts",
      "name": "PollingUserAccountSubscriber",
      "abstract": false,
      "implements": [
        "UserAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "accountLoader",
              "type": "BulkAccountLoader"
            },
            {
              "name": "decode",
              "type": "(name: any, buffer: any) => UserAccount"
            }
          ],
          "startLine": 28,
          "endLine": 40
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 42,
          "endLine": 60
        },
        {
          "name": "addToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 62,
          "endLine": 88
        },
        {
          "name": "fetchIfUnloaded",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 90,
          "endLine": 94
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 96,
          "endLine": 113
        },
        {
          "name": "doesAccountExist",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 115,
          "endLine": 117
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 119,
          "endLine": 134
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 136,
          "endLine": 142
        },
        {
          "name": "getUserAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<UserAccount>",
          "startLine": 144,
          "endLine": 151
        },
        {
          "name": "updateData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 153,
          "endLine": 159
        }
      ],
      "startLine": 14,
      "endLine": 160
    },
    {
      "file": "protocol-v2/sdk/src/accounts/pollingUserStatsAccountSubscriber.ts",
      "name": "PollingUserStatsAccountSubscriber",
      "abstract": false,
      "implements": [
        "UserStatsAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "userStatsAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "accountLoader",
              "type": "BulkAccountLoader"
            }
          ],
          "startLine": 28,
          "endLine": 38
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userStatsAccount",
              "type": "UserStatsAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 40,
          "endLine": 59
        },
        {
          "name": "addToAccountLoader",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 61,
          "endLine": 91
        },
        {
          "name": "fetchIfUnloaded",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 93,
          "endLine": 97
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 99,
          "endLine": 117
        },
        {
          "name": "doesAccountExist",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 119,
          "endLine": 121
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 123,
          "endLine": 138
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 140,
          "endLine": 146
        },
        {
          "name": "getUserStatsAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<UserStatsAccount>",
          "startLine": 148,
          "endLine": 155
        }
      ],
      "startLine": 14,
      "endLine": 156
    },
    {
      "file": "protocol-v2/sdk/src/accounts/testBulkAccountLoader.ts",
      "name": "TestBulkAccountLoader",
      "abstract": false,
      "extends": "BulkAccountLoader",
      "methods": [
        {
          "name": "loadChunk",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "accountsToLoadChunks",
              "type": "AccountToLoad[][]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 4,
          "endLine": 52
        }
      ],
      "startLine": 3,
      "endLine": 53
    },
    {
      "file": "protocol-v2/sdk/src/accounts/types.ts",
      "name": "NotSubscribedError",
      "abstract": false,
      "extends": "Error",
      "methods": [],
      "startLine": 40,
      "endLine": 42
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketAccountSubscriber.ts",
      "name": "WebSocketAccountSubscriber",
      "abstract": false,
      "implements": [
        "AccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountName",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "accountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "decodeBuffer",
              "type": "(buffer: Buffer<ArrayBufferLike>) => T"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "startLine": 32,
          "endLine": 54
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onChange",
              "type": "(data: T) => void"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 56,
          "endLine": 90
        },
        {
          "name": "setData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "data",
              "type": "T"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 92,
          "endLine": 102
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "protected",
          "parameters": [],
          "returns": "void",
          "startLine": 104,
          "endLine": 144
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 146,
          "endLine": 153
        },
        {
          "name": "handleRpcResponse",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "context",
              "type": "Context"
            },
            {
              "name": "accountInfo",
              "type": "AccountInfo<Buffer<ArrayBufferLike>>"
            }
          ],
          "returns": "void",
          "startLine": 155,
          "endLine": 195
        },
        {
          "name": "decodeBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "buffer",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "T",
          "startLine": 197,
          "endLine": 206
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 208,
          "endLine": 249
        }
      ],
      "startLine": 12,
      "endLine": 250
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketAccountSubscriberV2.ts",
      "name": "WebSocketAccountSubscriberV2",
      "abstract": false,
      "implements": [
        "AccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountName",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "accountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "decodeBuffer",
              "type": "(buffer: Buffer<ArrayBufferLike>) => T"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            },
            {
              "name": "rpcSubscriptions",
              "type": "any"
            },
            {
              "name": "rpc",
              "type": "Rpc<any>"
            }
          ],
          "startLine": 113,
          "endLine": 176
        },
        {
          "name": "handleNotificationLoop",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "subscriptionPromise",
              "type": "Promise<AsyncIterable<any>>"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 178,
          "endLine": 198
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onChange",
              "type": "(data: T) => void"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 200,
          "endLine": 256
        },
        {
          "name": "setData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "data",
              "type": "T"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 258,
          "endLine": 268
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "protected",
          "parameters": [],
          "returns": "void",
          "startLine": 270,
          "endLine": 323
        },
        {
          "name": "startPolling",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 330,
          "endLine": 383
        },
        {
          "name": "stopPolling",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 385,
          "endLine": 390
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 396,
          "endLine": 414
        },
        {
          "name": "handleRpcResponse",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "context",
              "type": "{ slot: bigint; }"
            },
            {
              "name": "accountInfo",
              "type": "any"
            }
          ],
          "returns": "void",
          "startLine": 416,
          "endLine": 476
        },
        {
          "name": "decodeBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "buffer",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "T",
          "startLine": 478,
          "endLine": 487
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 489,
          "endLine": 515
        }
      ],
      "startLine": 72,
      "endLine": 516
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketDriftClientAccountSubscriber.ts",
      "name": "WebSocketDriftClientAccountSubscriber",
      "abstract": false,
      "implements": [
        "DriftClientAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "perpMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "spotMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "oracleInfos",
              "type": "OracleInfo[]"
            },
            {
              "name": "shouldFindAllMarketsAndOracles",
              "type": "boolean"
            },
            {
              "name": "delistedMarketSetting",
              "type": "DelistedMarketSetting"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            },
            {
              "name": "customPerpMarketAccountSubscriber",
              "type": "new (accountName: string, program: Program<Idl>, accountPublicKey: PublicKey, decodeBuffer?: (buffer: Buffer<ArrayBufferLike>) => any, resubOpts?: ResubOpts, commitment?: Commitment) => WebSocketAccountSubscriberV2<...> | WebSocketAccountSubscriber<...>"
            },
            {
              "name": "customOracleAccountSubscriber",
              "type": "new (accountName: string, program: Program<Idl>, accountPublicKey: PublicKey, decodeBuffer?: (buffer: Buffer<ArrayBufferLike>) => any, resubOpts?: ResubOpts, commitment?: Commitment) => WebSocketAccountSubscriberV2<...> | WebSocketAccountSubscriber<...>"
            }
          ],
          "startLine": 93,
          "endLine": 131
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 133,
          "endLine": 212
        },
        {
          "name": "setInitialData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 221,
          "endLine": 308
        },
        {
          "name": "removeInitialData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 310,
          "endLine": 314
        },
        {
          "name": "subscribeToPerpMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 316,
          "endLine": 323
        },
        {
          "name": "subscribeToPerpMarketAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 325,
          "endLine": 349
        },
        {
          "name": "subscribeToSpotMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 351,
          "endLine": 358
        },
        {
          "name": "subscribeToSpotMarketAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 360,
          "endLine": 382
        },
        {
          "name": "subscribeToOracles",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 384,
          "endLine": 392
        },
        {
          "name": "subscribeToOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleInfo",
              "type": "OracleInfo"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 394,
          "endLine": 429
        },
        {
          "name": "unsubscribeFromMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 431,
          "endLine": 437
        },
        {
          "name": "unsubscribeFromSpotMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 439,
          "endLine": 445
        },
        {
          "name": "unsubscribeFromOracles",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 447,
          "endLine": 453
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 455,
          "endLine": 473
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 475,
          "endLine": 487
        },
        {
          "name": "addSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 489,
          "endLine": 496
        },
        {
          "name": "addPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 498,
          "endLine": 505
        },
        {
          "name": "addOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleInfo",
              "type": "OracleInfo"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 507,
          "endLine": 518
        },
        {
          "name": "setPerpOracleMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 520,
          "endLine": 543
        },
        {
          "name": "setSpotOracleMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 545,
          "endLine": 568
        },
        {
          "name": "handleDelistedMarkets",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 570,
          "endLine": 596
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 598,
          "endLine": 604
        },
        {
          "name": "getStateAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<StateAccount>",
          "startLine": 606,
          "endLine": 609
        },
        {
          "name": "getMarketAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<PerpMarketAccount>",
          "startLine": 611,
          "endLine": 616
        },
        {
          "name": "getMarketAccountsAndSlots",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<PerpMarketAccount>[]",
          "startLine": 618,
          "endLine": 622
        },
        {
          "name": "getSpotMarketAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<SpotMarketAccount>",
          "startLine": 624,
          "endLine": 629
        },
        {
          "name": "getSpotMarketAccountsAndSlots",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<SpotMarketAccount>[]",
          "startLine": 631,
          "endLine": 635
        },
        {
          "name": "getOraclePriceDataAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "oracleId",
              "type": "string"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 637,
          "endLine": 648
        },
        {
          "name": "getOraclePriceDataAndSlotForPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 650,
          "endLine": 666
        },
        {
          "name": "getOraclePriceDataAndSlotForSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 668,
          "endLine": 684
        }
      ],
      "startLine": 38,
      "endLine": 685
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketDriftClientAccountSubscriberV2.ts",
      "name": "WebSocketDriftClientAccountSubscriberV2",
      "abstract": false,
      "implements": [
        "DriftClientAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "perpMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "spotMarketIndexes",
              "type": "number[]"
            },
            {
              "name": "oracleInfos",
              "type": "OracleInfo[]"
            },
            {
              "name": "shouldFindAllMarketsAndOracles",
              "type": "boolean"
            },
            {
              "name": "delistedMarketSetting",
              "type": "DelistedMarketSetting"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            },
            {
              "name": "skipInitialData",
              "type": "boolean"
            }
          ],
          "startLine": 99,
          "endLine": 127
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 129,
          "endLine": 360
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 370,
          "endLine": 372
        },
        {
          "name": "addPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "_marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 382,
          "endLine": 384
        },
        {
          "name": "addSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "_marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 394,
          "endLine": 396
        },
        {
          "name": "setInitialData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 399,
          "endLine": 461
        },
        {
          "name": "removeInitialData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 463,
          "endLine": 467
        },
        {
          "name": "subscribeToOracles",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 469,
          "endLine": 492
        },
        {
          "name": "subscribeToOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleInfo",
              "type": "OracleInfo"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 494,
          "endLine": 540
        },
        {
          "name": "unsubscribeFromMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 542,
          "endLine": 544
        },
        {
          "name": "unsubscribeFromSpotMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 546,
          "endLine": 548
        },
        {
          "name": "unsubscribeFromOracles",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 550,
          "endLine": 556
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 558,
          "endLine": 576
        },
        {
          "name": "addOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleInfo",
              "type": "OracleInfo"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 578,
          "endLine": 589
        },
        {
          "name": "setPerpOracleMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 591,
          "endLine": 614
        },
        {
          "name": "setSpotOracleMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 616,
          "endLine": 639
        },
        {
          "name": "handleDelistedMarketOracles",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 641,
          "endLine": 660
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 662,
          "endLine": 668
        },
        {
          "name": "getStateAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<StateAccount>",
          "startLine": 670,
          "endLine": 673
        },
        {
          "name": "getMarketAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<PerpMarketAccount>",
          "startLine": 675,
          "endLine": 680
        },
        {
          "name": "getMarketAccountsAndSlots",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<PerpMarketAccount>[]",
          "startLine": 682,
          "endLine": 684
        },
        {
          "name": "getSpotMarketAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<SpotMarketAccount>",
          "startLine": 686,
          "endLine": 691
        },
        {
          "name": "getSpotMarketAccountsAndSlots",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<SpotMarketAccount>[]",
          "startLine": 693,
          "endLine": 695
        },
        {
          "name": "getOraclePriceDataAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "oracleId",
              "type": "string"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 697,
          "endLine": 708
        },
        {
          "name": "getOraclePriceDataAndSlotForPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 710,
          "endLine": 726
        },
        {
          "name": "getOraclePriceDataAndSlotForSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 728,
          "endLine": 744
        }
      ],
      "startLine": 53,
      "endLine": 745
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketHighLeverageModeConfigAccountSubscriber.ts",
      "name": "WebSocketHighLeverageModeConfigAccountSubscriber",
      "abstract": false,
      "implements": [
        "HighLeverageModeConfigAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "highLeverageModeConfigAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "resubTimeoutMs",
              "type": "number"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "startLine": 30,
          "endLine": 43
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "highLeverageModeConfigAccount",
              "type": "HighLeverageModeConfig"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 45,
          "endLine": 80
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 82,
          "endLine": 86
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 88,
          "endLine": 98
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 100,
          "endLine": 106
        },
        {
          "name": "getHighLeverageModeConfigAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<HighLeverageModeConfig>",
          "startLine": 108,
          "endLine": 111
        },
        {
          "name": "updateData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "highLeverageModeConfig",
              "type": "HighLeverageModeConfig"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 113,
          "endLine": 130
        }
      ],
      "startLine": 15,
      "endLine": 131
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketInsuranceFundStakeAccountSubscriber.ts",
      "name": "WebSocketInsuranceFundStakeAccountSubscriber",
      "abstract": false,
      "implements": [
        "InsuranceFundStakeAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "insuranceFundStakeAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "resubTimeoutMs",
              "type": "number"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "startLine": 30,
          "endLine": 43
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "insuranceFundStakeAccount",
              "type": "InsuranceFundStake"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 45,
          "endLine": 80
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 82,
          "endLine": 84
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 86,
          "endLine": 96
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 98,
          "endLine": 104
        },
        {
          "name": "getInsuranceFundStakeAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<InsuranceFundStake>",
          "startLine": 106,
          "endLine": 109
        },
        {
          "name": "updateData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "insuranceFundStake",
              "type": "InsuranceFundStake"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 111,
          "endLine": 128
        }
      ],
      "startLine": 15,
      "endLine": 129
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketProgramAccountsSubscriberV2.ts",
      "name": "WebSocketProgramAccountsSubscriberV2",
      "abstract": false,
      "implements": [
        "ProgramAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "subscriptionName",
              "type": "string"
            },
            {
              "name": "accountDiscriminator",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "decodeBufferFn",
              "type": "(accountName: string, ix: Buffer<ArrayBufferLike>) => T"
            },
            {
              "name": "options",
              "type": "{ filters: MemcmpFilter[]; commitment?: Commitment; }"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "accountsToMonitor",
              "type": "PublicKey[]"
            }
          ],
          "startLine": 142,
          "endLine": 185
        },
        {
          "name": "handleNotificationLoop",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "notificationPromise",
              "type": "Promise<ProgramAccountSubscriptionAsyncIterable>"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 187,
          "endLine": 223
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onChange",
              "type": "(accountId: PublicKey, data: T, context: Context, buffer: Buffer<ArrayBufferLike>) => void"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 225,
          "endLine": 318
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "protected",
          "parameters": [],
          "returns": "void",
          "startLine": 320,
          "endLine": 353
        },
        {
          "name": "handleRpcResponse",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "context",
              "type": "{ slot: bigint; }"
            },
            {
              "name": "accountId",
              "type": "Address"
            },
            {
              "name": "accountInfo",
              "type": "any"
            }
          ],
          "returns": "void",
          "startLine": 355,
          "endLine": 420
        },
        {
          "name": "startMonitoringForAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 422,
          "endLine": 430
        },
        {
          "name": "startMonitoringForAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "accountIdString",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 432,
          "endLine": 465
        },
        {
          "name": "scheduleDebouncedImmediatePoll",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 467,
          "endLine": 490
        },
        {
          "name": "startBatchPolling",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 492,
          "endLine": 507
        },
        {
          "name": "pollAllAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 509,
          "endLine": 535
        },
        {
          "name": "fetchAndPopulateAllMonitoredAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 541,
          "endLine": 626
        },
        {
          "name": "fetchAllMonitoredAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 632,
          "endLine": 727
        },
        {
          "name": "fetchAccountsBatch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "accountIds",
              "type": "string[]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 729,
          "endLine": 826
        },
        {
          "name": "clearPollingTimeouts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 828,
          "endLine": 861
        },
        {
          "name": "handleResubscription",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 866,
          "endLine": 883
        },
        {
          "name": "signalMissedChange",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "accountIdString",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 888,
          "endLine": 906
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 908,
          "endLine": 929
        },
        {
          "name": "addAccountToMonitor",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountId",
              "type": "PublicKey"
            }
          ],
          "returns": "void",
          "startLine": 937,
          "endLine": 945
        },
        {
          "name": "removeAccountFromMonitor",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountId",
              "type": "PublicKey"
            }
          ],
          "returns": "void",
          "startLine": 948,
          "endLine": 967
        },
        {
          "name": "setPollingInterval",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "intervalMs",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 974,
          "endLine": 980
        },
        {
          "name": "updateBufferAndHandleChange",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "newBuffer",
              "type": "Buffer<ArrayBufferLike>"
            },
            {
              "name": "newSlot",
              "type": "number"
            },
            {
              "name": "accountIdString",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 982,
          "endLine": 994
        }
      ],
      "startLine": 95,
      "endLine": 995
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketProgramAccountSubscriber.ts",
      "name": "WebSocketProgramAccountSubscriber",
      "abstract": false,
      "implements": [
        "ProgramAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "subscriptionName",
              "type": "string"
            },
            {
              "name": "accountDiscriminator",
              "type": "string"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "decodeBufferFn",
              "type": "(accountName: string, ix: Buffer<ArrayBufferLike>) => T"
            },
            {
              "name": "options",
              "type": "{ filters: MemcmpFilter[]; commitment?: Commitment; }"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            }
          ],
          "startLine": 35,
          "endLine": 57
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onChange",
              "type": "(accountId: PublicKey, data: T, context: Context, buffer: Buffer<ArrayBufferLike>) => void"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 59,
          "endLine": 94
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "protected",
          "parameters": [],
          "returns": "void",
          "startLine": 96,
          "endLine": 120
        },
        {
          "name": "handleRpcResponse",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "context",
              "type": "Context"
            },
            {
              "name": "keyedAccountInfo",
              "type": "KeyedAccountInfo"
            }
          ],
          "returns": "void",
          "startLine": 122,
          "endLine": 160
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 162,
          "endLine": 181
        }
      ],
      "startLine": 12,
      "endLine": 182
    },
    {
      "file": "protocol-v2/sdk/src/accounts/websocketProgramUserAccountSubscriber.ts",
      "name": "WebSocketProgramUserAccountSubscriber",
      "abstract": false,
      "implements": [
        "UserAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "programSubscriber",
              "type": "WebSocketProgramAccountSubscriber<UserAccount>"
            }
          ],
          "startLine": 25,
          "endLine": 35
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 37,
          "endLine": 60
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 62,
          "endLine": 73
        },
        {
          "name": "updateData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 75,
          "endLine": 80
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 82,
          "endLine": 84
        },
        {
          "name": "getUserAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<UserAccount>",
          "startLine": 86,
          "endLine": 93
        }
      ],
      "startLine": 14,
      "endLine": 94
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketUserAccountSubscriber.ts",
      "name": "WebSocketUserAccountSubscriber",
      "abstract": false,
      "implements": [
        "UserAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "startLine": 26,
          "endLine": 38
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 40,
          "endLine": 66
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 68,
          "endLine": 70
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 72,
          "endLine": 80
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 82,
          "endLine": 88
        },
        {
          "name": "getUserAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<UserAccount>",
          "startLine": 90,
          "endLine": 93
        },
        {
          "name": "updateData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 95,
          "endLine": 103
        }
      ],
      "startLine": 16,
      "endLine": 104
    },
    {
      "file": "protocol-v2/sdk/src/accounts/webSocketUserStatsAccountSubsriber.ts",
      "name": "WebSocketUserStatsAccountSubscriber",
      "abstract": false,
      "implements": [
        "UserStatsAccountSubscriber"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "userStatsAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "resubOpts",
              "type": "ResubOpts"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "startLine": 28,
          "endLine": 40
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userStatsAccount",
              "type": "UserStatsAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 42,
          "endLine": 70
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 72,
          "endLine": 74
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 76,
          "endLine": 84
        },
        {
          "name": "assertIsSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 86,
          "endLine": 92
        },
        {
          "name": "getUserStatsAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<UserStatsAccount>",
          "startLine": 94,
          "endLine": 97
        }
      ],
      "startLine": 16,
      "endLine": 98
    },
    {
      "file": "protocol-v2/sdk/src/adminClient.ts",
      "name": "AdminClient",
      "abstract": false,
      "extends": "DriftClient",
      "methods": [
        {
          "name": "initialize",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "usdcMint",
              "type": "PublicKey"
            },
            {
              "name": "_adminControlsPrices",
              "type": "boolean"
            }
          ],
          "returns": "Promise<[string]>",
          "startLine": 69,
          "endLine": 103
        },
        {
          "name": "initializeSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "mint",
              "type": "PublicKey"
            },
            {
              "name": "optimalUtilization",
              "type": "number"
            },
            {
              "name": "optimalRate",
              "type": "number"
            },
            {
              "name": "maxRate",
              "type": "number"
            },
            {
              "name": "oracle",
              "type": "PublicKey"
            },
            {
              "name": "oracleSource",
              "type": "OracleSource"
            },
            {
              "name": "initialAssetWeight",
              "type": "number"
            },
            {
              "name": "maintenanceAssetWeight",
              "type": "number"
            },
            {
              "name": "initialLiabilityWeight",
              "type": "number"
            },
            {
              "name": "maintenanceLiabilityWeight",
              "type": "number"
            },
            {
              "name": "imfFactor",
              "type": "number"
            },
            {
              "name": "liquidatorFee",
              "type": "number"
            },
            {
              "name": "ifLiquidationFee",
              "type": "number"
            },
            {
              "name": "activeStatus",
              "type": "boolean"
            },
            {
              "name": "assetTier",
              "type": "{ collateral: {}; }"
            },
            {
              "name": "scaleInitialAssetWeightStart",
              "type": "any"
            },
            {
              "name": "withdrawGuardThreshold",
              "type": "any"
            },
            {
              "name": "orderTickSize",
              "type": "any"
            },
            {
              "name": "orderStepSize",
              "type": "any"
            },
            {
              "name": "ifTotalFactor",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 105,
          "endLine": 169
        },
        {
          "name": "getInitializeSpotMarketIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "mint",
              "type": "PublicKey"
            },
            {
              "name": "optimalUtilization",
              "type": "number"
            },
            {
              "name": "optimalRate",
              "type": "number"
            },
            {
              "name": "maxRate",
              "type": "number"
            },
            {
              "name": "oracle",
              "type": "PublicKey"
            },
            {
              "name": "oracleSource",
              "type": "OracleSource"
            },
            {
              "name": "initialAssetWeight",
              "type": "number"
            },
            {
              "name": "maintenanceAssetWeight",
              "type": "number"
            },
            {
              "name": "initialLiabilityWeight",
              "type": "number"
            },
            {
              "name": "maintenanceLiabilityWeight",
              "type": "number"
            },
            {
              "name": "imfFactor",
              "type": "number"
            },
            {
              "name": "liquidatorFee",
              "type": "number"
            },
            {
              "name": "ifLiquidationFee",
              "type": "number"
            },
            {
              "name": "activeStatus",
              "type": "boolean"
            },
            {
              "name": "assetTier",
              "type": "{ collateral: {}; }"
            },
            {
              "name": "scaleInitialAssetWeightStart",
              "type": "any"
            },
            {
              "name": "withdrawGuardThreshold",
              "type": "any"
            },
            {
              "name": "orderTickSize",
              "type": "any"
            },
            {
              "name": "orderStepSize",
              "type": "any"
            },
            {
              "name": "ifTotalFactor",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 171,
          "endLine": 255
        },
        {
          "name": "deleteInitializedSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 257,
          "endLine": 268
        },
        {
          "name": "getDeleteInitializedSpotMarketIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 270,
          "endLine": 304
        },
        {
          "name": "initializeSerumFulfillmentConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "serumMarket",
              "type": "PublicKey"
            },
            {
              "name": "serumProgram",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 306,
          "endLine": 322
        },
        {
          "name": "getInitializeSerumFulfillmentConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "serumMarket",
              "type": "PublicKey"
            },
            {
              "name": "serumProgram",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 324,
          "endLine": 359
        },
        {
          "name": "initializePhoenixFulfillmentConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "phoenixMarket",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 361,
          "endLine": 375
        },
        {
          "name": "getInitializePhoenixFulfillmentConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "phoenixMarket",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 377,
          "endLine": 405
        },
        {
          "name": "initializeOpenbookV2FulfillmentConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "openbookMarket",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 407,
          "endLine": 421
        },
        {
          "name": "getInitializeOpenbookV2FulfillmentConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "openbookMarket",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 423,
          "endLine": 451
        },
        {
          "name": "initializePerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "priceOracle",
              "type": "PublicKey"
            },
            {
              "name": "baseAssetReserve",
              "type": "BN"
            },
            {
              "name": "quoteAssetReserve",
              "type": "BN"
            },
            {
              "name": "periodicity",
              "type": "BN"
            },
            {
              "name": "pegMultiplier",
              "type": "BN"
            },
            {
              "name": "oracleSource",
              "type": "OracleSource"
            },
            {
              "name": "contractTier",
              "type": "ContractTier"
            },
            {
              "name": "marginRatioInitial",
              "type": "number"
            },
            {
              "name": "marginRatioMaintenance",
              "type": "number"
            },
            {
              "name": "liquidatorFee",
              "type": "number"
            },
            {
              "name": "ifLiquidatorFee",
              "type": "number"
            },
            {
              "name": "imfFactor",
              "type": "number"
            },
            {
              "name": "activeStatus",
              "type": "boolean"
            },
            {
              "name": "baseSpread",
              "type": "number"
            },
            {
              "name": "maxSpread",
              "type": "number"
            },
            {
              "name": "maxOpenInterest",
              "type": "any"
            },
            {
              "name": "maxRevenueWithdrawPerPeriod",
              "type": "any"
            },
            {
              "name": "quoteMaxInsurance",
              "type": "any"
            },
            {
              "name": "orderStepSize",
              "type": "any"
            },
            {
              "name": "orderTickSize",
              "type": "any"
            },
            {
              "name": "minOrderSize",
              "type": "any"
            },
            {
              "name": "concentrationCoefScale",
              "type": "any"
            },
            {
              "name": "curveUpdateIntensity",
              "type": "number"
            },
            {
              "name": "ammJitIntensity",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 453,
          "endLine": 527
        },
        {
          "name": "getInitializePerpMarketIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "priceOracle",
              "type": "PublicKey"
            },
            {
              "name": "baseAssetReserve",
              "type": "BN"
            },
            {
              "name": "quoteAssetReserve",
              "type": "BN"
            },
            {
              "name": "periodicity",
              "type": "BN"
            },
            {
              "name": "pegMultiplier",
              "type": "BN"
            },
            {
              "name": "oracleSource",
              "type": "OracleSource"
            },
            {
              "name": "contractTier",
              "type": "ContractTier"
            },
            {
              "name": "marginRatioInitial",
              "type": "number"
            },
            {
              "name": "marginRatioMaintenance",
              "type": "number"
            },
            {
              "name": "liquidatorFee",
              "type": "number"
            },
            {
              "name": "ifLiquidatorFee",
              "type": "number"
            },
            {
              "name": "imfFactor",
              "type": "number"
            },
            {
              "name": "activeStatus",
              "type": "boolean"
            },
            {
              "name": "baseSpread",
              "type": "number"
            },
            {
              "name": "maxSpread",
              "type": "number"
            },
            {
              "name": "maxOpenInterest",
              "type": "any"
            },
            {
              "name": "maxRevenueWithdrawPerPeriod",
              "type": "any"
            },
            {
              "name": "quoteMaxInsurance",
              "type": "any"
            },
            {
              "name": "orderStepSize",
              "type": "any"
            },
            {
              "name": "orderTickSize",
              "type": "any"
            },
            {
              "name": "minOrderSize",
              "type": "any"
            },
            {
              "name": "concentrationCoefScale",
              "type": "any"
            },
            {
              "name": "curveUpdateIntensity",
              "type": "number"
            },
            {
              "name": "ammJitIntensity",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 529,
          "endLine": 602
        },
        {
          "name": "initializePredictionMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 604,
          "endLine": 615
        },
        {
          "name": "getInitializePredictionMarketIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 617,
          "endLine": 632
        },
        {
          "name": "deleteInitializedPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 634,
          "endLine": 645
        },
        {
          "name": "getDeleteInitializedPerpMarketIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 647,
          "endLine": 667
        },
        {
          "name": "moveAmmPrice",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "baseAssetReserve",
              "type": "BN"
            },
            {
              "name": "quoteAssetReserve",
              "type": "BN"
            },
            {
              "name": "sqrtK",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 669,
          "endLine": 687
        },
        {
          "name": "getMoveAmmPriceIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "baseAssetReserve",
              "type": "BN"
            },
            {
              "name": "quoteAssetReserve",
              "type": "BN"
            },
            {
              "name": "sqrtK",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 689,
          "endLine": 718
        },
        {
          "name": "updateK",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "sqrtK",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 720,
          "endLine": 731
        },
        {
          "name": "getUpdateKIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "sqrtK",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 733,
          "endLine": 750
        },
        {
          "name": "recenterPerpMarketAmm",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "pegMultiplier",
              "type": "BN"
            },
            {
              "name": "sqrtK",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 752,
          "endLine": 768
        },
        {
          "name": "getRecenterPerpMarketAmmIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "pegMultiplier",
              "type": "BN"
            },
            {
              "name": "sqrtK",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 770,
          "endLine": 793
        },
        {
          "name": "recenterPerpMarketAmmCrank",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "depth",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 795,
          "endLine": 809
        },
        {
          "name": "getRecenterPerpMarketAmmCrankIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "depth",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 811,
          "endLine": 835
        },
        {
          "name": "updatePerpMarketConcentrationScale",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "concentrationScale",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 837,
          "endLine": 852
        },
        {
          "name": "getUpdatePerpMarketConcentrationScaleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "concentrationScale",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 854,
          "endLine": 873
        },
        {
          "name": "moveAmmToPrice",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "targetPrice",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 875,
          "endLine": 889
        },
        {
          "name": "getMoveAmmToPriceIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "targetPrice",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 891,
          "endLine": 932
        },
        {
          "name": "repegAmmCurve",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "newPeg",
              "type": "BN"
            },
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 934,
          "endLine": 948
        },
        {
          "name": "getRepegAmmCurveIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "newPeg",
              "type": "BN"
            },
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 950,
          "endLine": 970
        },
        {
          "name": "updatePerpMarketAmmOracleTwap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 972,
          "endLine": 983
        },
        {
          "name": "getUpdatePerpMarketAmmOracleTwapIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 985,
          "endLine": 1004
        },
        {
          "name": "resetPerpMarketAmmOracleTwap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1006,
          "endLine": 1017
        },
        {
          "name": "getResetPerpMarketAmmOracleTwapIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1019,
          "endLine": 1038
        },
        {
          "name": "depositIntoPerpMarketFeePool",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "sourceVault",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1040,
          "endLine": 1057
        },
        {
          "name": "getDepositIntoPerpMarketFeePoolIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "sourceVault",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1059,
          "endLine": 1083
        },
        {
          "name": "updatePerpMarketPnlPool",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1085,
          "endLine": 1099
        },
        {
          "name": "getUpdatePerpMarketPnlPoolIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1101,
          "endLine": 1119
        },
        {
          "name": "depositIntoSpotMarketVault",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "sourceVault",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1121,
          "endLine": 1138
        },
        {
          "name": "getDepositIntoSpotMarketVaultIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "sourceVault",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1140,
          "endLine": 1170
        },
        {
          "name": "updateAdmin",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "admin",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1172,
          "endLine": 1180
        },
        {
          "name": "getUpdateAdminIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "admin",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1182,
          "endLine": 1193
        },
        {
          "name": "updatePerpMarketCurveUpdateIntensity",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "curveUpdateIntensity",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1195,
          "endLine": 1212
        },
        {
          "name": "getUpdatePerpMarketCurveUpdateIntensityIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "curveUpdateIntensity",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1214,
          "endLine": 1233
        },
        {
          "name": "updatePerpMarketReferencePriceOffsetDeadbandPct",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "referencePriceOffsetDeadbandPct",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1235,
          "endLine": 1252
        },
        {
          "name": "getUpdatePerpMarketReferencePriceOffsetDeadbandPctIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "referencePriceOffsetDeadbandPct",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1254,
          "endLine": 1273
        },
        {
          "name": "updatePerpMarketTargetBaseAssetAmountPerLp",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "targetBaseAssetAmountPerLP",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1275,
          "endLine": 1292
        },
        {
          "name": "updatePerpMarketAmmSummaryStats",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "updateAmmSummaryStats",
              "type": "boolean"
            },
            {
              "name": "quoteAssetAmountWithUnsettledLp",
              "type": "BN"
            },
            {
              "name": "netUnsettledFundingPnl",
              "type": "BN"
            },
            {
              "name": "excludeTotalLiqFee",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1294,
          "endLine": 1315
        },
        {
          "name": "getUpdatePerpMarketAmmSummaryStatsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "updateAmmSummaryStats",
              "type": "boolean"
            },
            {
              "name": "quoteAssetAmountWithUnsettledLp",
              "type": "BN"
            },
            {
              "name": "netUnsettledFundingPnl",
              "type": "BN"
            },
            {
              "name": "excludeTotalLiqFee",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1317,
          "endLine": 1350
        },
        {
          "name": "getUpdatePerpMarketTargetBaseAssetAmountPerLpIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "targetBaseAssetAmountPerLP",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1352,
          "endLine": 1371
        },
        {
          "name": "updatePerpMarketMarginRatio",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "marginRatioInitial",
              "type": "number"
            },
            {
              "name": "marginRatioMaintenance",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1373,
          "endLine": 1390
        },
        {
          "name": "getUpdatePerpMarketMarginRatioIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "marginRatioInitial",
              "type": "number"
            },
            {
              "name": "marginRatioMaintenance",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1392,
          "endLine": 1413
        },
        {
          "name": "updatePerpMarketHighLeverageMarginRatio",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "marginRatioInitial",
              "type": "number"
            },
            {
              "name": "marginRatioMaintenance",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1415,
          "endLine": 1434
        },
        {
          "name": "getUpdatePerpMarketHighLeverageMarginRatioIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "marginRatioInitial",
              "type": "number"
            },
            {
              "name": "marginRatioMaintenance",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1436,
          "endLine": 1457
        },
        {
          "name": "updatePerpMarketImfFactor",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "imfFactor",
              "type": "number"
            },
            {
              "name": "unrealizedPnlImfFactor",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1459,
          "endLine": 1476
        },
        {
          "name": "getUpdatePerpMarketImfFactorIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "imfFactor",
              "type": "number"
            },
            {
              "name": "unrealizedPnlImfFactor",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1478,
          "endLine": 1499
        },
        {
          "name": "updatePerpMarketBaseSpread",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "baseSpread",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1501,
          "endLine": 1513
        },
        {
          "name": "getUpdatePerpMarketBaseSpreadIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "baseSpread",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1515,
          "endLine": 1534
        },
        {
          "name": "updateAmmJitIntensity",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "ammJitIntensity",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1536,
          "endLine": 1550
        },
        {
          "name": "getUpdateAmmJitIntensityIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "ammJitIntensity",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1552,
          "endLine": 1571
        },
        {
          "name": "updatePerpMarketName",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1573,
          "endLine": 1587
        },
        {
          "name": "getUpdatePerpMarketNameIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1589,
          "endLine": 1606
        },
        {
          "name": "updateSpotMarketName",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1608,
          "endLine": 1622
        },
        {
          "name": "getUpdateSpotMarketNameIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1624,
          "endLine": 1641
        },
        {
          "name": "updateSpotMarketPoolId",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "poolId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1643,
          "endLine": 1657
        },
        {
          "name": "getUpdateSpotMarketPoolIdIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "poolId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1659,
          "endLine": 1675
        },
        {
          "name": "updatePerpMarketPerLpBase",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "perLpBase",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1677,
          "endLine": 1689
        },
        {
          "name": "getUpdatePerpMarketPerLpBaseIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "perLpBase",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1691,
          "endLine": 1709
        },
        {
          "name": "updatePerpMarketMaxSpread",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "maxSpread",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1711,
          "endLine": 1723
        },
        {
          "name": "getUpdatePerpMarketMaxSpreadIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "maxSpread",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1725,
          "endLine": 1743
        },
        {
          "name": "updatePerpFeeStructure",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feeStructure",
              "type": "FeeStructure"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1745,
          "endLine": 1757
        },
        {
          "name": "getUpdatePerpFeeStructureIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feeStructure",
              "type": "FeeStructure"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1759,
          "endLine": 1770
        },
        {
          "name": "updateSpotFeeStructure",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feeStructure",
              "type": "FeeStructure"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1772,
          "endLine": 1784
        },
        {
          "name": "getUpdateSpotFeeStructureIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feeStructure",
              "type": "FeeStructure"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1786,
          "endLine": 1797
        },
        {
          "name": "updateInitialPctToLiquidate",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "initialPctToLiquidate",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1799,
          "endLine": 1810
        },
        {
          "name": "getUpdateInitialPctToLiquidateIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "initialPctToLiquidate",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1812,
          "endLine": 1826
        },
        {
          "name": "updateLiquidationDuration",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "liquidationDuration",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1828,
          "endLine": 1839
        },
        {
          "name": "getUpdateLiquidationDurationIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "liquidationDuration",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1841,
          "endLine": 1855
        },
        {
          "name": "updateLiquidationMarginBufferRatio",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "updateLiquidationMarginBufferRatio",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1857,
          "endLine": 1872
        },
        {
          "name": "getUpdateLiquidationMarginBufferRatioIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "updateLiquidationMarginBufferRatio",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1874,
          "endLine": 1888
        },
        {
          "name": "updateOracleGuardRails",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleGuardRails",
              "type": "OracleGuardRails"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1890,
          "endLine": 1902
        },
        {
          "name": "getUpdateOracleGuardRailsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "oracleGuardRails",
              "type": "OracleGuardRails"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1904,
          "endLine": 1918
        },
        {
          "name": "updateStateSettlementDuration",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "settlementDuration",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1920,
          "endLine": 1931
        },
        {
          "name": "getUpdateStateSettlementDurationIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "settlementDuration",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1933,
          "endLine": 1947
        },
        {
          "name": "updateStateMaxNumberOfSubAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxNumberOfSubAccounts",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1949,
          "endLine": 1960
        },
        {
          "name": "getUpdateStateMaxNumberOfSubAccountsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxNumberOfSubAccounts",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1962,
          "endLine": 1976
        },
        {
          "name": "updateStateMaxInitializeUserFee",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxInitializeUserFee",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1978,
          "endLine": 1989
        },
        {
          "name": "getUpdateStateMaxInitializeUserFeeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxInitializeUserFee",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1991,
          "endLine": 2005
        },
        {
          "name": "updateWithdrawGuardThreshold",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "withdrawGuardThreshold",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2007,
          "endLine": 2022
        },
        {
          "name": "getUpdateWithdrawGuardThresholdIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "withdrawGuardThreshold",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2024,
          "endLine": 2043
        },
        {
          "name": "updateSpotMarketIfFactor",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "userIfFactor",
              "type": "BN"
            },
            {
              "name": "totalIfFactor",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2045,
          "endLine": 2061
        },
        {
          "name": "getUpdateSpotMarketIfFactorIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "userIfFactor",
              "type": "BN"
            },
            {
              "name": "totalIfFactor",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2063,
          "endLine": 2085
        },
        {
          "name": "updateSpotMarketRevenueSettlePeriod",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "revenueSettlePeriod",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2087,
          "endLine": 2104
        },
        {
          "name": "getUpdateSpotMarketRevenueSettlePeriodIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "revenueSettlePeriod",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2106,
          "endLine": 2125
        },
        {
          "name": "updateSpotMarketMaxTokenDeposits",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "maxTokenDeposits",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2127,
          "endLine": 2142
        },
        {
          "name": "getUpdateSpotMarketMaxTokenDepositsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "maxTokenDeposits",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2144,
          "endLine": 2163
        },
        {
          "name": "updateSpotMarketMaxTokenBorrows",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "maxTokenBorrowsFraction",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2165,
          "endLine": 2180
        },
        {
          "name": "getUpdateSpotMarketMaxTokenBorrowsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "maxTokenBorrowsFraction",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2182,
          "endLine": 2201
        },
        {
          "name": "updateSpotMarketScaleInitialAssetWeightStart",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "scaleInitialAssetWeightStart",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2203,
          "endLine": 2220
        },
        {
          "name": "getUpdateSpotMarketScaleInitialAssetWeightStartIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "scaleInitialAssetWeightStart",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2222,
          "endLine": 2241
        },
        {
          "name": "updateInsuranceFundUnstakingPeriod",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "insuranceWithdrawEscrowPeriod",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2243,
          "endLine": 2260
        },
        {
          "name": "getUpdateInsuranceFundUnstakingPeriodIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "insuranceWithdrawEscrowPeriod",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2262,
          "endLine": 2281
        },
        {
          "name": "updateLpCooldownTime",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "cooldownTime",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2283,
          "endLine": 2295
        },
        {
          "name": "getUpdateLpCooldownTimeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "cooldownTime",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2297,
          "endLine": 2308
        },
        {
          "name": "updatePerpMarketOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "oracle",
              "type": "PublicKey"
            },
            {
              "name": "oracleSource",
              "type": "OracleSource"
            },
            {
              "name": "skipInvaraintCheck",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2310,
          "endLine": 2328
        },
        {
          "name": "getUpdatePerpMarketOracleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "oracle",
              "type": "PublicKey"
            },
            {
              "name": "oracleSource",
              "type": "OracleSource"
            },
            {
              "name": "skipInvaraintCheck",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2330,
          "endLine": 2355
        },
        {
          "name": "updatePerpMarketStepSizeAndTickSize",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "stepSize",
              "type": "BN"
            },
            {
              "name": "tickSize",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2357,
          "endLine": 2376
        },
        {
          "name": "getUpdatePerpMarketStepSizeAndTickSizeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "stepSize",
              "type": "BN"
            },
            {
              "name": "tickSize",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2378,
          "endLine": 2399
        },
        {
          "name": "updatePerpMarketMinOrderSize",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "orderSize",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2401,
          "endLine": 2413
        },
        {
          "name": "getUpdatePerpMarketMinOrderSizeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "orderSize",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2415,
          "endLine": 2434
        },
        {
          "name": "updateSpotMarketStepSizeAndTickSize",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "stepSize",
              "type": "BN"
            },
            {
              "name": "tickSize",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2436,
          "endLine": 2455
        },
        {
          "name": "getUpdateSpotMarketStepSizeAndTickSizeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "stepSize",
              "type": "BN"
            },
            {
              "name": "tickSize",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2457,
          "endLine": 2478
        },
        {
          "name": "updateSpotMarketMinOrderSize",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "orderSize",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2480,
          "endLine": 2503
        },
        {
          "name": "getUpdateSpotMarketMinOrderSizeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "orderSize",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2505,
          "endLine": 2524
        },
        {
          "name": "updatePerpMarketExpiry",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "expiryTs",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2526,
          "endLine": 2539
        },
        {
          "name": "getUpdatePerpMarketExpiryIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "expiryTs",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2541,
          "endLine": 2557
        },
        {
          "name": "updateSpotMarketOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "oracle",
              "type": "PublicKey"
            },
            {
              "name": "oracleSource",
              "type": "OracleSource"
            },
            {
              "name": "skipInvaraintCheck",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2559,
          "endLine": 2577
        },
        {
          "name": "getUpdateSpotMarketOracleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "oracle",
              "type": "PublicKey"
            },
            {
              "name": "oracleSource",
              "type": "OracleSource"
            },
            {
              "name": "skipInvaraintCheck",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2579,
          "endLine": 2604
        },
        {
          "name": "updateSpotMarketOrdersEnabled",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "ordersEnabled",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2606,
          "endLine": 2621
        },
        {
          "name": "getUpdateSpotMarketOrdersEnabledIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "ordersEnabled",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2623,
          "endLine": 2642
        },
        {
          "name": "updateSpotMarketIfPausedOperations",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "pausedOperations",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2644,
          "endLine": 2659
        },
        {
          "name": "getUpdateSpotMarketIfPausedOperationsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "pausedOperations",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2661,
          "endLine": 2680
        },
        {
          "name": "updateSerumFulfillmentConfigStatus",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "serumFulfillmentConfig",
              "type": "PublicKey"
            },
            {
              "name": "status",
              "type": "SpotFulfillmentConfigStatus"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2682,
          "endLine": 2699
        },
        {
          "name": "getUpdateSerumFulfillmentConfigStatusIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "serumFulfillmentConfig",
              "type": "PublicKey"
            },
            {
              "name": "status",
              "type": "SpotFulfillmentConfigStatus"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2701,
          "endLine": 2717
        },
        {
          "name": "updatePhoenixFulfillmentConfigStatus",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "phoenixFulfillmentConfig",
              "type": "PublicKey"
            },
            {
              "name": "status",
              "type": "SpotFulfillmentConfigStatus"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2719,
          "endLine": 2741
        },
        {
          "name": "getUpdatePhoenixFulfillmentConfigStatusIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "phoenixFulfillmentConfig",
              "type": "PublicKey"
            },
            {
              "name": "status",
              "type": "SpotFulfillmentConfigStatus"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2743,
          "endLine": 2759
        },
        {
          "name": "updateSpotMarketExpiry",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "expiryTs",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2761,
          "endLine": 2775
        },
        {
          "name": "getUpdateSpotMarketExpiryIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "expiryTs",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2777,
          "endLine": 2793
        },
        {
          "name": "updateWhitelistMint",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "whitelistMint",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2795,
          "endLine": 2807
        },
        {
          "name": "getUpdateWhitelistMintIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "whitelistMint",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2809,
          "endLine": 2820
        },
        {
          "name": "updateDiscountMint",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "discountMint",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2822,
          "endLine": 2834
        },
        {
          "name": "getUpdateDiscountMintIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "discountMint",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2836,
          "endLine": 2847
        },
        {
          "name": "updateSpotMarketMarginWeights",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "initialAssetWeight",
              "type": "number"
            },
            {
              "name": "maintenanceAssetWeight",
              "type": "number"
            },
            {
              "name": "initialLiabilityWeight",
              "type": "number"
            },
            {
              "name": "maintenanceLiabilityWeight",
              "type": "number"
            },
            {
              "name": "imfFactor",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2849,
          "endLine": 2872
        },
        {
          "name": "getUpdateSpotMarketMarginWeightsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "initialAssetWeight",
              "type": "number"
            },
            {
              "name": "maintenanceAssetWeight",
              "type": "number"
            },
            {
              "name": "initialLiabilityWeight",
              "type": "number"
            },
            {
              "name": "maintenanceLiabilityWeight",
              "type": "number"
            },
            {
              "name": "imfFactor",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2874,
          "endLine": 2901
        },
        {
          "name": "updateSpotMarketBorrowRate",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "optimalUtilization",
              "type": "number"
            },
            {
              "name": "optimalBorrowRate",
              "type": "number"
            },
            {
              "name": "optimalMaxRate",
              "type": "number"
            },
            {
              "name": "minBorrowRate",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2903,
          "endLine": 2924
        },
        {
          "name": "getUpdateSpotMarketBorrowRateIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "optimalUtilization",
              "type": "number"
            },
            {
              "name": "optimalBorrowRate",
              "type": "number"
            },
            {
              "name": "optimalMaxRate",
              "type": "number"
            },
            {
              "name": "minBorrowRate",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2926,
          "endLine": 2951
        },
        {
          "name": "updateSpotMarketAssetTier",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "assetTier",
              "type": "AssetTier"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2953,
          "endLine": 2965
        },
        {
          "name": "getUpdateSpotMarketAssetTierIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "assetTier",
              "type": "AssetTier"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2967,
          "endLine": 2983
        },
        {
          "name": "updateSpotMarketStatus",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "marketStatus",
              "type": "MarketStatus"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2985,
          "endLine": 2999
        },
        {
          "name": "getUpdateSpotMarketStatusIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "marketStatus",
              "type": "MarketStatus"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3001,
          "endLine": 3017
        },
        {
          "name": "updateSpotMarketPausedOperations",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "pausedOperations",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3019,
          "endLine": 3034
        },
        {
          "name": "getUpdateSpotMarketPausedOperationsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "pausedOperations",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3036,
          "endLine": 3055
        },
        {
          "name": "updatePerpMarketStatus",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "marketStatus",
              "type": "MarketStatus"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3057,
          "endLine": 3071
        },
        {
          "name": "getUpdatePerpMarketStatusIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "marketStatus",
              "type": "MarketStatus"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3073,
          "endLine": 3089
        },
        {
          "name": "updatePerpMarketPausedOperations",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "pausedOperations",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3091,
          "endLine": 3106
        },
        {
          "name": "getUpdatePerpMarketPausedOperationsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "pausedOperations",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3108,
          "endLine": 3127
        },
        {
          "name": "updatePerpMarketContractTier",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "contractTier",
              "type": "ContractTier"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3129,
          "endLine": 3144
        },
        {
          "name": "getUpdatePerpMarketContractTierIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "contractTier",
              "type": "ContractTier"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3146,
          "endLine": 3165
        },
        {
          "name": "updateExchangeStatus",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "exchangeStatus",
              "type": "ExchangeStatus"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3167,
          "endLine": 3179
        },
        {
          "name": "getUpdateExchangeStatusIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "exchangeStatus",
              "type": "ExchangeStatus"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3181,
          "endLine": 3192
        },
        {
          "name": "updatePerpAuctionDuration",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "minDuration",
              "type": "any"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3194,
          "endLine": 3205
        },
        {
          "name": "getUpdatePerpAuctionDurationIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "minDuration",
              "type": "any"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3207,
          "endLine": 3221
        },
        {
          "name": "updateSpotAuctionDuration",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "defaultAuctionDuration",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3223,
          "endLine": 3234
        },
        {
          "name": "getUpdateSpotAuctionDurationIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "defaultAuctionDuration",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3236,
          "endLine": 3250
        },
        {
          "name": "updatePerpMarketMaxFillReserveFraction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "maxBaseAssetAmountRatio",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3252,
          "endLine": 3269
        },
        {
          "name": "getUpdatePerpMarketMaxFillReserveFractionIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "maxBaseAssetAmountRatio",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3271,
          "endLine": 3290
        },
        {
          "name": "updateMaxSlippageRatio",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "maxSlippageRatio",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3292,
          "endLine": 3306
        },
        {
          "name": "getUpdateMaxSlippageRatioIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "maxSlippageRatio",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3308,
          "endLine": 3324
        },
        {
          "name": "updatePerpMarketUnrealizedAssetWeight",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "unrealizedInitialAssetWeight",
              "type": "number"
            },
            {
              "name": "unrealizedMaintenanceAssetWeight",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3326,
          "endLine": 3345
        },
        {
          "name": "getUpdatePerpMarketUnrealizedAssetWeightIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "unrealizedInitialAssetWeight",
              "type": "number"
            },
            {
              "name": "unrealizedMaintenanceAssetWeight",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3347,
          "endLine": 3368
        },
        {
          "name": "updatePerpMarketMaxImbalances",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "unrealizedMaxImbalance",
              "type": "BN"
            },
            {
              "name": "maxRevenueWithdrawPerPeriod",
              "type": "BN"
            },
            {
              "name": "quoteMaxInsurance",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3370,
          "endLine": 3389
        },
        {
          "name": "getUpdatePerpMarketMaxImbalancesIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "unrealizedMaxImbalance",
              "type": "BN"
            },
            {
              "name": "maxRevenueWithdrawPerPeriod",
              "type": "BN"
            },
            {
              "name": "quoteMaxInsurance",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3391,
          "endLine": 3414
        },
        {
          "name": "updatePerpMarketMaxOpenInterest",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "maxOpenInterest",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3416,
          "endLine": 3431
        },
        {
          "name": "getUpdatePerpMarketMaxOpenInterestIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "maxOpenInterest",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3433,
          "endLine": 3452
        },
        {
          "name": "updatePerpMarketNumberOfUser",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "numberOfUsers",
              "type": "number"
            },
            {
              "name": "numberOfUsersWithBase",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3454,
          "endLine": 3471
        },
        {
          "name": "getUpdatePerpMarketNumberOfUsersIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "numberOfUsers",
              "type": "number"
            },
            {
              "name": "numberOfUsersWithBase",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3473,
          "endLine": 3494
        },
        {
          "name": "updatePerpMarketFeeAdjustment",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "feeAdjustment",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3496,
          "endLine": 3511
        },
        {
          "name": "getUpdatePerpMarketFeeAdjustmentIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "feeAdjustment",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3513,
          "endLine": 3532
        },
        {
          "name": "updateSpotMarketFeeAdjustment",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "feeAdjustment",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3534,
          "endLine": 3549
        },
        {
          "name": "getUpdateSpotMarketFeeAdjustmentIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "feeAdjustment",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3551,
          "endLine": 3570
        },
        {
          "name": "updateSerumVault",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "srmVault",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3572,
          "endLine": 3582
        },
        {
          "name": "getUpdateSerumVaultIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "srmVault",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3584,
          "endLine": 3596
        },
        {
          "name": "updatePerpMarketLiquidationFee",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "liquidatorFee",
              "type": "number"
            },
            {
              "name": "ifLiquidationFee",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3598,
          "endLine": 3615
        },
        {
          "name": "getUpdatePerpMarketLiquidationFeeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "liquidatorFee",
              "type": "number"
            },
            {
              "name": "ifLiquidationFee",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3617,
          "endLine": 3638
        },
        {
          "name": "updateSpotMarketLiquidationFee",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "liquidatorFee",
              "type": "number"
            },
            {
              "name": "ifLiquidationFee",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3640,
          "endLine": 3657
        },
        {
          "name": "getUpdateSpotMarketLiquidationFeeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "liquidatorFee",
              "type": "number"
            },
            {
              "name": "ifLiquidationFee",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3659,
          "endLine": 3680
        },
        {
          "name": "initializeProtocolIfSharesTransferConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<string>",
          "startLine": 3682,
          "endLine": 3693
        },
        {
          "name": "getInitializeProtocolIfSharesTransferConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3695,
          "endLine": 3710
        },
        {
          "name": "updateProtocolIfSharesTransferConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "whitelistedSigners",
              "type": "PublicKey[]"
            },
            {
              "name": "maxTransferPerEpoch",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3712,
          "endLine": 3729
        },
        {
          "name": "getUpdateProtocolIfSharesTransferConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "whitelistedSigners",
              "type": "PublicKey[]"
            },
            {
              "name": "maxTransferPerEpoch",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3731,
          "endLine": 3749
        },
        {
          "name": "transferProtocolIfSharesToRevenuePool",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "outMarketIndex",
              "type": "number"
            },
            {
              "name": "inMarketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3751,
          "endLine": 3770
        },
        {
          "name": "getTransferProtocolIfSharesToRevenuePoolIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "outMarketIndex",
              "type": "number"
            },
            {
              "name": "inMarketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3772,
          "endLine": 3808
        },
        {
          "name": "initializePrelaunchOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "price",
              "type": "BN"
            },
            {
              "name": "maxPrice",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3810,
          "endLine": 3827
        },
        {
          "name": "getInitializePrelaunchOracleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "price",
              "type": "BN"
            },
            {
              "name": "maxPrice",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3829,
          "endLine": 3854
        },
        {
          "name": "updatePrelaunchOracleParams",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "price",
              "type": "BN"
            },
            {
              "name": "maxPrice",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3856,
          "endLine": 3873
        },
        {
          "name": "getUpdatePrelaunchOracleParamsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "price",
              "type": "BN"
            },
            {
              "name": "maxPrice",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3875,
          "endLine": 3904
        },
        {
          "name": "deletePrelaunchOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3906,
          "endLine": 3918
        },
        {
          "name": "getDeletePrelaunchOracleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "price",
              "type": "BN"
            },
            {
              "name": "maxPrice",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3920,
          "endLine": 3949
        },
        {
          "name": "updateSpotMarketFuel",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "fuelBoostDeposits",
              "type": "number"
            },
            {
              "name": "fuelBoostBorrows",
              "type": "number"
            },
            {
              "name": "fuelBoostTaker",
              "type": "number"
            },
            {
              "name": "fuelBoostMaker",
              "type": "number"
            },
            {
              "name": "fuelBoostInsurance",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3951,
          "endLine": 3972
        },
        {
          "name": "getUpdateSpotMarketFuelIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "fuelBoostDeposits",
              "type": "number"
            },
            {
              "name": "fuelBoostBorrows",
              "type": "number"
            },
            {
              "name": "fuelBoostTaker",
              "type": "number"
            },
            {
              "name": "fuelBoostMaker",
              "type": "number"
            },
            {
              "name": "fuelBoostInsurance",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3974,
          "endLine": 4003
        },
        {
          "name": "updatePerpMarketFuel",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "fuelBoostTaker",
              "type": "number"
            },
            {
              "name": "fuelBoostMaker",
              "type": "number"
            },
            {
              "name": "fuelBoostPosition",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4005,
          "endLine": 4022
        },
        {
          "name": "getUpdatePerpMarketFuelIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "fuelBoostTaker",
              "type": "number"
            },
            {
              "name": "fuelBoostMaker",
              "type": "number"
            },
            {
              "name": "fuelBoostPosition",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4024,
          "endLine": 4049
        },
        {
          "name": "updatePerpMarketTakerSpeedBumpOverride",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "takerSpeedBumpOverride",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4051,
          "endLine": 4066
        },
        {
          "name": "getUpdatePerpMarketTakerSpeedBumpOverrideIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "takerSpeedBumpOverride",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4068,
          "endLine": 4089
        },
        {
          "name": "updatePerpMarketOracleSlotDelayOverride",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "oracleSlotDelay",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4091,
          "endLine": 4106
        },
        {
          "name": "getUpdatePerpMarketOracleSlotDelayOverrideIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "oracleSlotDelay",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4108,
          "endLine": 4129
        },
        {
          "name": "updatePerpMarketAmmSpreadAdjustment",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "ammSpreadAdjustment",
              "type": "number"
            },
            {
              "name": "ammInventorySpreadAdjustment",
              "type": "number"
            },
            {
              "name": "referencePriceOffset",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4131,
          "endLine": 4150
        },
        {
          "name": "getUpdatePerpMarketAmmSpreadAdjustmentIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "ammSpreadAdjustment",
              "type": "number"
            },
            {
              "name": "ammInventorySpreadAdjustment",
              "type": "number"
            },
            {
              "name": "referencePriceOffset",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4152,
          "endLine": 4177
        },
        {
          "name": "updatePerpMarketProtectedMakerParams",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "protectedMakerLimitPriceDivisor",
              "type": "number"
            },
            {
              "name": "protectedMakerDynamicDivisor",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4179,
          "endLine": 4197
        },
        {
          "name": "getUpdatePerpMarketProtectedMakerParamsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "protectedMakerLimitPriceDivisor",
              "type": "number"
            },
            {
              "name": "protectedMakerDynamicDivisor",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4199,
          "endLine": 4222
        },
        {
          "name": "initializeIfRebalanceConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "params",
              "type": "IfRebalanceConfigParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4224,
          "endLine": 4234
        },
        {
          "name": "getInitializeIfRebalanceConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "params",
              "type": "IfRebalanceConfigParams"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4236,
          "endLine": 4254
        },
        {
          "name": "initUserFuel",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "user",
              "type": "PublicKey"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "fuelBonusDeposits",
              "type": "number"
            },
            {
              "name": "fuelBonusBorrows",
              "type": "number"
            },
            {
              "name": "fuelBonusTaker",
              "type": "number"
            },
            {
              "name": "fuelBonusMaker",
              "type": "number"
            },
            {
              "name": "fuelBonusInsurance",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4256,
          "endLine": 4279
        },
        {
          "name": "getInitUserFuelIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "user",
              "type": "PublicKey"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "fuelBonusDeposits",
              "type": "number"
            },
            {
              "name": "fuelBonusBorrows",
              "type": "number"
            },
            {
              "name": "fuelBonusTaker",
              "type": "number"
            },
            {
              "name": "fuelBonusMaker",
              "type": "number"
            },
            {
              "name": "fuelBonusInsurance",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4281,
          "endLine": 4312
        },
        {
          "name": "resetFuelSeason",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "fuelSweepExists",
              "type": "boolean"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4319,
          "endLine": 4330
        },
        {
          "name": "getResetFuelSeasonIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "fuelSweepExists",
              "type": "boolean"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4332,
          "endLine": 4362
        },
        {
          "name": "initializePythPullOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feedId",
              "type": "string"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4364,
          "endLine": 4374
        },
        {
          "name": "getInitializePythPullOracleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feedId",
              "type": "string"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4376,
          "endLine": 4397
        },
        {
          "name": "initializePythLazerOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feedId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4399,
          "endLine": 4408
        },
        {
          "name": "getInitializePythLazerOracleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feedId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4410,
          "endLine": 4427
        },
        {
          "name": "initializeHighLeverageModeConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxUsers",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4429,
          "endLine": 4440
        },
        {
          "name": "getInitializeHighLeverageModeConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxUsers",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4442,
          "endLine": 4461
        },
        {
          "name": "updateUpdateHighLeverageModeConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxUsers",
              "type": "number"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "currentUsers",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4463,
          "endLine": 4480
        },
        {
          "name": "getUpdateHighLeverageModeConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxUsers",
              "type": "number"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "currentUsers",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4482,
          "endLine": 4503
        },
        {
          "name": "initializeProtectedMakerModeConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxUsers",
              "type": "number"
            },
            {
              "name": "stateAdmin",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4505,
          "endLine": 4519
        },
        {
          "name": "getInitializeProtectedMakerModeConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxUsers",
              "type": "number"
            },
            {
              "name": "stateAdmin",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4521,
          "endLine": 4541
        },
        {
          "name": "updateProtectedMakerModeConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxUsers",
              "type": "number"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "currentUsers",
              "type": "undefined"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4543,
          "endLine": 4560
        },
        {
          "name": "getUpdateProtectedMakerModeConfigIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "maxUsers",
              "type": "number"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "currentUsers",
              "type": "undefined"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4562,
          "endLine": 4583
        },
        {
          "name": "adminDeposit",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "depositUserAccount",
              "type": "PublicKey"
            },
            {
              "name": "adminTokenAccount",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4585,
          "endLine": 4600
        },
        {
          "name": "getAdminDepositIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "depositUserAccount",
              "type": "PublicKey"
            },
            {
              "name": "adminTokenAccount",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4602,
          "endLine": 4636
        },
        {
          "name": "zeroMMOracleFields",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4638,
          "endLine": 4649
        },
        {
          "name": "getZeroMMOracleFieldsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4651,
          "endLine": 4666
        },
        {
          "name": "updateFeatureBitFlagsMMOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "enable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4668,
          "endLine": 4678
        },
        {
          "name": "getUpdateFeatureBitFlagsMMOracleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "enable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4680,
          "endLine": 4694
        },
        {
          "name": "updateFeatureBitFlagsMedianTriggerPrice",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "enable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4696,
          "endLine": 4707
        },
        {
          "name": "getUpdateFeatureBitFlagsMedianTriggerPriceIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "enable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4709,
          "endLine": 4723
        },
        {
          "name": "updateDelegateUserGovTokenInsuranceStake",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "delegate",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4725,
          "endLine": 4741
        },
        {
          "name": "getUpdateDelegateUserGovTokenInsuranceStakeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "delegate",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4743,
          "endLine": 4772
        },
        {
          "name": "depositIntoInsuranceFundStake",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "userStatsPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "insuranceFundStakePublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userTokenAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4774,
          "endLine": 4794
        },
        {
          "name": "getDepositIntoInsuranceFundStakeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "userStatsPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "insuranceFundStakePublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userTokenAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4796,
          "endLine": 4822
        },
        {
          "name": "updateFeatureBitFlagsBuilderCodes",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "enable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4824,
          "endLine": 4834
        },
        {
          "name": "getUpdateFeatureBitFlagsBuilderCodesIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "enable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4836,
          "endLine": 4847
        },
        {
          "name": "updateFeatureBitFlagsBuilderReferral",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "enable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4849,
          "endLine": 4861
        },
        {
          "name": "getUpdateFeatureBitFlagsBuilderReferralIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "enable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4863,
          "endLine": 4877
        },
        {
          "name": "adminDisableUpdatePerpBidAskTwap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "disable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4879,
          "endLine": 4890
        },
        {
          "name": "getAdminDisableUpdatePerpBidAskTwapIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "disable",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4892,
          "endLine": 4911
        }
      ],
      "startLine": 68,
      "endLine": 4912
    },
    {
      "file": "protocol-v2/sdk/src/auctionSubscriber/auctionSubscriber.ts",
      "name": "AuctionSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tdriftClient,\n\t\topts,\n\t\tresubTimeoutMs,\n\t\tlogResubMessages,\n\t}",
              "type": "AuctionSubscriberConfig"
            }
          ],
          "startLine": 19,
          "endLine": 29
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 31,
          "endLine": 58
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 60,
          "endLine": 65
        }
      ],
      "startLine": 11,
      "endLine": 66
    },
    {
      "file": "protocol-v2/sdk/src/auctionSubscriber/auctionSubscriberGrpc.ts",
      "name": "AuctionSubscriberGrpc",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tdriftClient,\n\t\topts,\n\t\tgrpcConfigs,\n\t\tresubTimeoutMs,\n\t\tlogResubMessages,\n\t}",
              "type": "AuctionSubscriberConfig"
            }
          ],
          "startLine": 21,
          "endLine": 33
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 35,
          "endLine": 62
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 64,
          "endLine": 69
        }
      ],
      "startLine": 12,
      "endLine": 70
    },
    {
      "file": "protocol-v2/sdk/src/bankrun/bankrunConnection.ts",
      "name": "BankrunConnection",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "banksClient",
              "type": "BanksClient"
            },
            {
              "name": "context",
              "type": "ProgramTestContext"
            },
            {
              "name": "verifySignatures",
              "type": "boolean"
            }
          ],
          "startLine": 173,
          "endLine": 181
        },
        {
          "name": "getSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Promise<bigint>",
          "startLine": 183,
          "endLine": 185
        },
        {
          "name": "toConnection",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Connection",
          "startLine": 187,
          "endLine": 189
        },
        {
          "name": "getTokenAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<Account>",
          "startLine": 191,
          "endLine": 194
        },
        {
          "name": "getMultipleAccountsInfo",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "publicKeys",
              "type": "PublicKey[]"
            },
            {
              "name": "_commitmentOrConfig",
              "type": "Commitment"
            }
          ],
          "returns": "Promise<AccountInfo<Buffer<ArrayBufferLike>>[]>",
          "startLine": 196,
          "endLine": 208
        },
        {
          "name": "getAccountInfo",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<AccountInfo<Buffer<ArrayBufferLike>>>",
          "startLine": 210,
          "endLine": 215
        },
        {
          "name": "getAccountInfoAndContext",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "_commitment",
              "type": "Commitment"
            }
          ],
          "returns": "Promise<RpcResponseAndContext<AccountInfo<Buffer<ArrayBufferLike>>>>",
          "startLine": 217,
          "endLine": 222
        },
        {
          "name": "sendRawTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "rawTransaction",
              "type": "number[] | Uint8Array<ArrayBufferLike> | Buffer<ArrayBufferLike>"
            },
            {
              "name": "_options",
              "type": "any"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 223,
          "endLine": 231
        },
        {
          "name": "sendTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction | VersionedTransaction"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 233,
          "endLine": 314
        },
        {
          "name": "updateSlotAndClock",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 316,
          "endLine": 330
        },
        {
          "name": "getTime",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 332,
          "endLine": 334
        },
        {
          "name": "getParsedAccountInfo",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<RpcResponseAndContext<AccountInfo<Buffer<ArrayBufferLike>>>>",
          "startLine": 336,
          "endLine": 352
        },
        {
          "name": "getLatestBlockhash",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "returns": "Promise<Readonly<{ blockhash: string; lastValidBlockHeight: number; }>>",
          "startLine": 354,
          "endLine": 367
        },
        {
          "name": "getAddressLookupTable",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "accountKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<RpcResponseAndContext<AddressLookupTableAccount>>",
          "startLine": 369,
          "endLine": 387
        },
        {
          "name": "getSignatureStatus",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signature",
              "type": "string"
            },
            {
              "name": "_config",
              "type": "SignatureStatusConfig"
            }
          ],
          "returns": "Promise<RpcResponseAndContext<SignatureStatus>>",
          "startLine": 389,
          "endLine": 412
        },
        {
          "name": "getTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signature",
              "type": "string"
            },
            {
              "name": "_rawConfig",
              "type": "GetTransactionConfig | GetVersionedTransactionConfig"
            }
          ],
          "returns": "Promise<BankrunTransactionRespose>",
          "startLine": 417,
          "endLine": 441
        },
        {
          "name": "findComputeUnitConsumption",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "signature",
              "type": "string"
            }
          ],
          "returns": "bigint",
          "startLine": 443,
          "endLine": 451
        },
        {
          "name": "printTxLogs",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "signature",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 453,
          "endLine": 461
        },
        {
          "name": "simulateTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "transaction",
              "type": "Transaction | VersionedTransaction"
            },
            {
              "name": "_config",
              "type": "SimulateTransactionConfig"
            }
          ],
          "returns": "Promise<RpcResponseAndContext<SimulatedTransactionResponse>>",
          "startLine": 463,
          "endLine": 489
        },
        {
          "name": "onSignature",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "signature",
              "type": "string"
            },
            {
              "name": "callback",
              "type": "SignatureResultCallback"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "returns": "number",
          "startLine": 491,
          "endLine": 505
        },
        {
          "name": "removeSignatureListener",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "_clientSubscriptionId",
              "type": "number"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 507,
          "endLine": 510
        },
        {
          "name": "onLogs",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "filter",
              "type": "LogsFilter"
            },
            {
              "name": "callback",
              "type": "LogsCallback"
            },
            {
              "name": "_commitment",
              "type": "Commitment"
            }
          ],
          "returns": "number",
          "startLine": 512,
          "endLine": 524
        },
        {
          "name": "removeOnLogsListener",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "clientSubscriptionId",
              "type": "number"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 526,
          "endLine": 530
        },
        {
          "name": "onAccountChange",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "publicKey",
              "type": "PublicKey"
            },
            {
              "name": "callback",
              "type": "AccountChangeCallback"
            },
            {
              "name": "_commitment",
              "type": "Commitment"
            }
          ],
          "returns": "number",
          "startLine": 532,
          "endLine": 545
        },
        {
          "name": "removeAccountChangeListener",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "clientSubscriptionId",
              "type": "number"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 547,
          "endLine": 551
        },
        {
          "name": "getMinimumBalanceForRentExemption",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "_",
              "type": "number"
            }
          ],
          "returns": "Promise<number>",
          "startLine": 553,
          "endLine": 555
        }
      ],
      "startLine": 155,
      "endLine": 556
    },
    {
      "file": "protocol-v2/sdk/src/bankrun/bankrunConnection.ts",
      "name": "BankrunContextWrapper",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "context",
              "type": "ProgramTestContext"
            },
            {
              "name": "verifySignatures",
              "type": "boolean"
            }
          ],
          "startLine": 60,
          "endLine": 68
        },
        {
          "name": "sendTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction | VersionedTransaction"
            },
            {
              "name": "additionalSigners",
              "type": "Keypair[]"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 70,
          "endLine": 92
        },
        {
          "name": "getMinimumBalanceForRentExemption",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "_",
              "type": "number"
            }
          ],
          "returns": "Promise<number>",
          "startLine": 94,
          "endLine": 96
        },
        {
          "name": "fundKeypair",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "keypair",
              "type": "Keypair | Wallet"
            },
            {
              "name": "lamports",
              "type": "number | bigint"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 98,
          "endLine": 111
        },
        {
          "name": "getLatestBlockhash",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<string>",
          "startLine": 113,
          "endLine": 117
        },
        {
          "name": "printTxLogs",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "signature",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 119,
          "endLine": 121
        },
        {
          "name": "moveTimeForward",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "increment",
              "type": "number"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 123,
          "endLine": 139
        },
        {
          "name": "setTimestamp",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "unix_timestamp",
              "type": "number"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 141,
          "endLine": 152
        }
      ],
      "startLine": 54,
      "endLine": 153
    },
    {
      "file": "protocol-v2/sdk/src/blockhashSubscriber/BlockhashSubscriber.ts",
      "name": "BlockhashSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "BlockhashSubscriberConfig"
            }
          ],
          "startLine": 19,
          "endLine": 28
        },
        {
          "name": "getBlockhashCacheSize",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 30,
          "endLine": 32
        },
        {
          "name": "getLatestBlockHeight",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 34,
          "endLine": 36
        },
        {
          "name": "getLatestBlockHeightContext",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Context",
          "startLine": 38,
          "endLine": 40
        },
        {
          "name": "getLatestBlockhash",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "offset",
              "type": "number"
            },
            {
              "name": "offsetType",
              "type": "\"index\" | \"seconds\""
            }
          ],
          "returns": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>",
          "startLine": 48,
          "endLine": 67
        },
        {
          "name": "pruneBlockhashes",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 69,
          "endLine": 75
        },
        {
          "name": "updateBlockhash",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 77,
          "endLine": 104
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 106,
          "endLine": 117
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 119,
          "endLine": 125
        }
      ],
      "startLine": 9,
      "endLine": 126
    },
    {
      "file": "protocol-v2/sdk/src/clock/clockSubscriber.ts",
      "name": "ClockSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "latestSlot",
          "kind": "get",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 23,
          "endLine": 25
        },
        {
          "name": "currentTs",
          "kind": "get",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 27,
          "endLine": 29
        },
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "config",
              "type": "ClockSubscriberConfig"
            }
          ],
          "startLine": 37,
          "endLine": 49
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 51,
          "endLine": 81
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 83,
          "endLine": 99
        },
        {
          "name": "getUnixTs",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 101,
          "endLine": 103
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 105,
          "endLine": 120
        }
      ],
      "startLine": 16,
      "endLine": 121
    },
    {
      "file": "protocol-v2/sdk/src/decode/customCoder.ts",
      "name": "CustomBorshAccountsCoder",
      "abstract": false,
      "implements": [
        "AccountsCoder"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "idl",
              "type": "Idl"
            }
          ],
          "startLine": 59,
          "endLine": 62
        },
        {
          "name": "encode",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "accountName",
              "type": "A"
            },
            {
              "name": "account",
              "type": "T"
            }
          ],
          "returns": "Promise<Buffer<ArrayBufferLike>>",
          "startLine": 64,
          "endLine": 79
        },
        {
          "name": "decode",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountName",
              "type": "A"
            },
            {
              "name": "data",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "T",
          "startLine": 82,
          "endLine": 84
        },
        {
          "name": "decodeAny",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "data",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "T",
          "startLine": 86,
          "endLine": 88
        },
        {
          "name": "decodeUnchecked",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountName",
              "type": "A"
            },
            {
              "name": "ix",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "T",
          "startLine": 90,
          "endLine": 92
        },
        {
          "name": "memcmp",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "accountName",
              "type": "A"
            },
            {
              "name": "appendData",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "any",
          "startLine": 94,
          "endLine": 96
        },
        {
          "name": "size",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "idlAccount",
              "type": "IdlTypeDef"
            }
          ],
          "returns": "number",
          "startLine": 98,
          "endLine": 100
        },
        {
          "name": "accountDiscriminator",
          "kind": "method",
          "isStatic": true,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "Buffer<ArrayBufferLike>",
          "startLine": 107,
          "endLine": 113
        }
      ],
      "startLine": 53,
      "endLine": 114
    },
    {
      "file": "protocol-v2/sdk/src/decode/customCoder.ts",
      "name": "CustomBorshCoder",
      "abstract": false,
      "implements": [
        "Coder"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "idl",
              "type": "Idl"
            }
          ],
          "startLine": 41,
          "endLine": 47
        }
      ],
      "startLine": 14,
      "endLine": 48
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOB.ts",
      "name": "DLOB",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "protectedMakerParamsMap",
              "type": "ProtectMakerParamsMap"
            }
          ],
          "startLine": 123,
          "endLine": 129
        },
        {
          "name": "init",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 131,
          "endLine": 136
        },
        {
          "name": "clear",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 138,
          "endLine": 161
        },
        {
          "name": "initFromUserMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userMap",
              "type": "UserMap"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 168,
          "endLine": 209
        },
        {
          "name": "insertOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "userAccount",
              "type": "string"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "isUserProtectedMaker",
              "type": "boolean"
            },
            {
              "name": "baseAssetAmount",
              "type": "BN"
            },
            {
              "name": "onInsert",
              "type": "OrderBookCallback"
            }
          ],
          "returns": "void",
          "startLine": 211,
          "endLine": 251
        },
        {
          "name": "insertSignedMsgOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "userAccount",
              "type": "string"
            },
            {
              "name": "isUserProtectedMaker",
              "type": "boolean"
            },
            {
              "name": "baseAssetAmount",
              "type": "BN"
            },
            {
              "name": "onInsert",
              "type": "OrderBookCallback"
            }
          ],
          "returns": "void",
          "startLine": 253,
          "endLine": 283
        },
        {
          "name": "addOrderList",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketType",
              "type": "MarketTypeStr"
            },
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 285,
          "endLine": 316
        },
        {
          "name": "delete",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "userAccount",
              "type": "PublicKey"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "isUserProtectedMaker",
              "type": "boolean"
            },
            {
              "name": "onDelete",
              "type": "OrderBookCallback"
            }
          ],
          "returns": "void",
          "startLine": 318,
          "endLine": 339
        },
        {
          "name": "getListForOnChainOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "isProtectedMaker",
              "type": "boolean"
            }
          ],
          "returns": "NodeList<any>",
          "startLine": 341,
          "endLine": 379
        },
        {
          "name": "updateRestingLimitOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 381,
          "endLine": 391
        },
        {
          "name": "updateRestingLimitOrdersForMarketType",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketTypeStr",
              "type": "MarketTypeStr"
            }
          ],
          "returns": "void",
          "startLine": 393,
          "endLine": 435
        },
        {
          "name": "getOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "orderId",
              "type": "number"
            },
            {
              "name": "userAccount",
              "type": "PublicKey"
            }
          ],
          "returns": "Order",
          "startLine": 437,
          "endLine": 447
        },
        {
          "name": "findNodesToFill",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "fallbackBid",
              "type": "any"
            },
            {
              "name": "fallbackAsk",
              "type": "any"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "ts",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "stateAccount",
              "type": "StateAccount"
            },
            {
              "name": "marketAccount",
              "type": "T extends { spot: unknown; } ? SpotMarketAccount : PerpMarketAccount"
            }
          ],
          "returns": "NodeToFill[]",
          "startLine": 449,
          "endLine": 528
        },
        {
          "name": "getMakerRebate",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "stateAccount",
              "type": "StateAccount"
            },
            {
              "name": "marketAccount",
              "type": "SpotMarketAccount | PerpMarketAccount"
            }
          ],
          "returns": "{ makerRebateNumerator: number; makerRebateDenominator: number; }",
          "startLine": 530,
          "endLine": 556
        },
        {
          "name": "mergeNodesToFill",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "restingLimitOrderNodesToFill",
              "type": "NodeToFill[]"
            },
            {
              "name": "takingOrderNodesToFill",
              "type": "NodeToFill[]"
            }
          ],
          "returns": "NodeToFill[]",
          "startLine": 558,
          "endLine": 590
        },
        {
          "name": "findRestingLimitOrderNodesToFill",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "isAmmPaused",
              "type": "boolean"
            },
            {
              "name": "minAuctionDuration",
              "type": "number"
            },
            {
              "name": "makerRebateNumerator",
              "type": "number"
            },
            {
              "name": "makerRebateDenominator",
              "type": "number"
            },
            {
              "name": "fallbackAsk",
              "type": "any"
            },
            {
              "name": "fallbackBid",
              "type": "any"
            }
          ],
          "returns": "NodeToFill[]",
          "startLine": 592,
          "endLine": 676
        },
        {
          "name": "findTakingNodesToFill",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "isAmmPaused",
              "type": "boolean"
            },
            {
              "name": "minAuctionDuration",
              "type": "number"
            },
            {
              "name": "fallbackAsk",
              "type": "any"
            },
            {
              "name": "fallbackBid",
              "type": "any"
            }
          ],
          "returns": "NodeToFill[]",
          "startLine": 678,
          "endLine": 804
        },
        {
          "name": "findTakingNodesCrossingMakerNodes",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "takerNodeGenerator",
              "type": "Generator<DLOBNode, any, any>"
            },
            {
              "name": "makerNodeGeneratorFn",
              "type": "(marketIndex: number, slot: number, marketType: MarketType, oraclePriceData: T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData) => Generator<...>"
            },
            {
              "name": "doesCross",
              "type": "(takerPrice: any, makerPrice: BN) => boolean"
            }
          ],
          "returns": "NodeToFill[]",
          "startLine": 806,
          "endLine": 904
        },
        {
          "name": "findNodesCrossingFallbackLiquidity",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "nodeGenerator",
              "type": "Generator<DLOBNode, any, any>"
            },
            {
              "name": "doesCross",
              "type": "(nodePrice: any) => boolean"
            },
            {
              "name": "minAuctionDuration",
              "type": "number"
            }
          ],
          "returns": "NodeToFill[]",
          "startLine": 906,
          "endLine": 952
        },
        {
          "name": "findExpiredNodesToFill",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "ts",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "slot",
              "type": "BN"
            }
          ],
          "returns": "NodeToFill[]",
          "startLine": 954,
          "endLine": 1025
        },
        {
          "name": "findUnfillableReduceOnlyOrdersToCancel",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "stepSize",
              "type": "BN"
            }
          ],
          "returns": "NodeToFill[]",
          "startLine": 1027,
          "endLine": 1072
        },
        {
          "name": "getTakingBids",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "filterFcn",
              "type": "DLOBFilterFcn"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1073,
          "endLine": 1108
        },
        {
          "name": "getTakingAsks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "filterFcn",
              "type": "DLOBFilterFcn"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1110,
          "endLine": 1145
        },
        {
          "name": "signedMsgGenerator",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "protected",
          "parameters": [
            {
              "name": "signedMsgOrderList",
              "type": "NodeList<\"signedMsg\">"
            },
            {
              "name": "filter",
              "type": "(x: DLOBNode) => boolean"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1147,
          "endLine": 1156
        },
        {
          "name": "getBestNode",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "protected",
          "parameters": [
            {
              "name": "generatorList",
              "type": "Generator<DLOBNode, any, any>[]"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends \"spot\" ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "compareFcn",
              "type": "(bestDLOBNode: DLOBNode, currentDLOBNode: DLOBNode, slot: number, oraclePriceData: T extends \"spot\" ? OraclePriceData : MMOraclePriceData) => boolean"
            },
            {
              "name": "filterFcn",
              "type": "DLOBFilterFcn"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1158,
          "endLine": 1216
        },
        {
          "name": "getRestingLimitAsks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "filterFcn",
              "type": "DLOBFilterFcn"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1218,
          "endLine": 1260
        },
        {
          "name": "getRestingLimitBids",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "filterFcn",
              "type": "DLOBFilterFcn"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1262,
          "endLine": 1304
        },
        {
          "name": "getAsks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "_fallbackAsk",
              "type": "any"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "filterFcn",
              "type": "DLOBFilterFcn"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1315,
          "endLine": 1351
        },
        {
          "name": "getBids",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "_fallbackBid",
              "type": "any"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "filterFcn",
              "type": "DLOBFilterFcn"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1362,
          "endLine": 1399
        },
        {
          "name": "findCrossingRestingLimitOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            }
          ],
          "returns": "NodeToFill[]",
          "startLine": 1401,
          "endLine": 1491
        },
        {
          "name": "determineMakerAndTaker",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "askNode",
              "type": "DLOBNode"
            },
            {
              "name": "bidNode",
              "type": "DLOBNode"
            }
          ],
          "returns": "{ takerNode: DLOBNode; makerNode: DLOBNode; }",
          "startLine": 1493,
          "endLine": 1527
        },
        {
          "name": "getBestAsk",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            }
          ],
          "returns": "any",
          "startLine": 1529,
          "endLine": 1548
        },
        {
          "name": "getBestBid",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "T"
            },
            {
              "name": "oraclePriceData",
              "type": "T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData"
            }
          ],
          "returns": "any",
          "startLine": 1550,
          "endLine": 1569
        },
        {
          "name": "getStopLosses",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1571,
          "endLine": 1592
        },
        {
          "name": "getStopLossMarkets",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1594,
          "endLine": 1604
        },
        {
          "name": "getStopLossLimits",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1606,
          "endLine": 1616
        },
        {
          "name": "getTakeProfits",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1618,
          "endLine": 1639
        },
        {
          "name": "getTakeProfitMarkets",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1641,
          "endLine": 1655
        },
        {
          "name": "getTakeProfitLimits",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            }
          ],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 1657,
          "endLine": 1671
        },
        {
          "name": "findNodesToTrigger",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "triggerPrice",
              "type": "BN"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "stateAccount",
              "type": "StateAccount"
            }
          ],
          "returns": "NodeToTrigger[]",
          "startLine": 1673,
          "endLine": 1719
        },
        {
          "name": "printTop",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "driftClient",
              "type": "DriftClient"
            },
            {
              "name": "slotSubscriber",
              "type": "SlotSubscriber"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marketType",
              "type": "MarketType"
            }
          ],
          "returns": "void",
          "startLine": 1721,
          "endLine": 1818
        },
        {
          "name": "getDLOBOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DLOBOrders",
          "startLine": 1820,
          "endLine": 1833
        },
        {
          "name": "getNodeLists",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Generator<NodeList<DLOBNodeType>, any, any>",
          "startLine": 1835,
          "endLine": 1865
        },
        {
          "name": "getL2",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarketIndex,\n\t\tmarketType,\n\t\tslot,\n\t\toraclePriceData,\n\t\tdepth,\n\t\tfallbackL2Generators = [],\n\t}",
              "type": "{ marketIndex: number; marketType: T; slot: number; oraclePriceData: T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData; depth: number; fallbackL2Generators?: L2OrderBookGenerator[]; }"
            }
          ],
          "returns": "L2OrderBook",
          "startLine": 1877,
          "endLine": 1939
        },
        {
          "name": "getL3",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarketIndex,\n\t\tmarketType,\n\t\tslot,\n\t\toraclePriceData,\n\t}",
              "type": "{ marketIndex: number; marketType: T; slot: number; oraclePriceData: T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData; }"
            }
          ],
          "returns": "L3OrderBook",
          "startLine": 1949,
          "endLine": 2002
        },
        {
          "name": "estimateFillExactBaseAmountInForSide",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "baseAmountIn",
              "type": "BN"
            },
            {
              "name": "oraclePriceData",
              "type": "OraclePriceData"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "dlobSide",
              "type": "Generator<DLOBNode, any, any>"
            }
          ],
          "returns": "BN",
          "startLine": 2004,
          "endLine": 2031
        },
        {
          "name": "estimateFillWithExactBaseAmount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarketIndex,\n\t\tmarketType,\n\t\tbaseAmount,\n\t\torderDirection,\n\t\tslot,\n\t\toraclePriceData,\n\t}",
              "type": "{ marketIndex: number; marketType: T; baseAmount: BN; orderDirection: PositionDirection; slot: number; oraclePriceData: T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData; }"
            }
          ],
          "returns": "BN",
          "startLine": 2043,
          "endLine": 2075
        },
        {
          "name": "getBestMakers",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarketIndex,\n\t\tmarketType,\n\t\tdirection,\n\t\tslot,\n\t\toraclePriceData,\n\t\tnumMakers,\n\t}",
              "type": "{ marketIndex: number; marketType: T; direction: PositionDirection; slot: number; oraclePriceData: T extends { spot: unknown; } ? OraclePriceData : MMOraclePriceData; numMakers: number; }"
            }
          ],
          "returns": "PublicKey[]",
          "startLine": 2077,
          "endLine": 2118
        }
      ],
      "startLine": 114,
      "endLine": 2119
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOBNode.ts",
      "name": "FloatingLimitOrderNode",
      "abstract": false,
      "extends": "OrderNode",
      "methods": [
        {
          "name": "getSortValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            }
          ],
          "returns": "BN",
          "startLine": 146,
          "endLine": 148
        }
      ],
      "startLine": 142,
      "endLine": 149
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOBNode.ts",
      "name": "MarketOrderNode",
      "abstract": false,
      "extends": "OrderNode",
      "methods": [
        {
          "name": "getSortValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            }
          ],
          "returns": "BN",
          "startLine": 155,
          "endLine": 157
        }
      ],
      "startLine": 151,
      "endLine": 158
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOBNode.ts",
      "name": "OrderNode",
      "abstract": true,
      "implements": [
        "DLOBNode"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "userAccount",
              "type": "string"
            },
            {
              "name": "isProtectedMaker",
              "type": "boolean"
            },
            {
              "name": "protectedMakerParams",
              "type": "ProtectedMakerParams"
            },
            {
              "name": "baseAssetAmount",
              "type": "BN"
            },
            {
              "name": "isSignedMsg",
              "type": "boolean"
            }
          ],
          "startLine": 45,
          "endLine": 61
        },
        {
          "name": "getSortValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            }
          ],
          "returns": "BN",
          "startLine": 63,
          "endLine": 63
        },
        {
          "name": "getLabel",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "string",
          "startLine": 65,
          "endLine": 90
        },
        {
          "name": "getPrice",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "oraclePriceData",
              "type": "T extends \"spot\" ? OraclePriceData : MMOraclePriceData"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "BN",
          "startLine": 92,
          "endLine": 103
        },
        {
          "name": "isBaseFilled",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 105,
          "endLine": 107
        },
        {
          "name": "isVammNode",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 109,
          "endLine": 111
        }
      ],
      "startLine": 34,
      "endLine": 112
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOBNode.ts",
      "name": "RestingLimitOrderNode",
      "abstract": false,
      "extends": "OrderNode",
      "methods": [
        {
          "name": "getSortValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            }
          ],
          "returns": "BN",
          "startLine": 127,
          "endLine": 139
        }
      ],
      "startLine": 123,
      "endLine": 140
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOBNode.ts",
      "name": "SignedMsgOrderNode",
      "abstract": false,
      "extends": "OrderNode",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "userAccount",
              "type": "string"
            },
            {
              "name": "baseAssetAmount",
              "type": "BN"
            }
          ],
          "startLine": 174,
          "endLine": 176
        },
        {
          "name": "getSortValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            }
          ],
          "returns": "BN",
          "startLine": 178,
          "endLine": 180
        }
      ],
      "startLine": 170,
      "endLine": 181
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOBNode.ts",
      "name": "TakingLimitOrderNode",
      "abstract": false,
      "extends": "OrderNode",
      "methods": [
        {
          "name": "getSortValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            }
          ],
          "returns": "BN",
          "startLine": 118,
          "endLine": 120
        }
      ],
      "startLine": 114,
      "endLine": 121
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOBNode.ts",
      "name": "TriggerOrderNode",
      "abstract": false,
      "extends": "OrderNode",
      "methods": [
        {
          "name": "getSortValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            }
          ],
          "returns": "BN",
          "startLine": 164,
          "endLine": 166
        }
      ],
      "startLine": 160,
      "endLine": 167
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOBSubscriber.ts",
      "name": "DLOBSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "DLOBSubscriptionConfig"
            }
          ],
          "startLine": 33,
          "endLine": 41
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 43,
          "endLine": 58
        },
        {
          "name": "getProtectedMakerParamsMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "ProtectMakerParamsMap",
          "startLine": 60,
          "endLine": 64
        },
        {
          "name": "updateDLOB",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 66,
          "endLine": 71
        },
        {
          "name": "getDLOB",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DLOB",
          "startLine": 73,
          "endLine": 75
        },
        {
          "name": "getL2",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarketName,\n\t\tmarketIndex,\n\t\tmarketType,\n\t\tdepth = 10,\n\t\tincludeVamm = false,\n\t\tnumVammOrders,\n\t\tfallbackL2Generators = [],\n\t\tlatestSlot,\n\t}",
              "type": "{ marketName?: string; marketIndex?: number; marketType?: MarketType; depth?: number; includeVamm?: boolean; numVammOrders?: number; fallbackL2Generators?: L2OrderBookGenerator[]; latestSlot?: BN; }"
            }
          ],
          "returns": "L2OrderBook",
          "startLine": 88,
          "endLine": 166
        },
        {
          "name": "getL3",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarketName,\n\t\tmarketIndex,\n\t\tmarketType,\n\t}",
              "type": "{ marketName?: string; marketIndex?: number; marketType?: MarketType; }"
            }
          ],
          "returns": "L3OrderBook",
          "startLine": 175,
          "endLine": 216
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 218,
          "endLine": 223
        }
      ],
      "startLine": 24,
      "endLine": 224
    },
    {
      "file": "protocol-v2/sdk/src/dlob/NodeList.ts",
      "name": "NodeList",
      "abstract": false,
      "implements": [
        "DLOBNodeGenerator"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "nodeType",
              "type": "NodeType"
            },
            {
              "name": "sortDirection",
              "type": "SortDirection"
            }
          ],
          "startLine": 30,
          "endLine": 33
        },
        {
          "name": "clear",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 35,
          "endLine": 39
        },
        {
          "name": "insert",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "marketType",
              "type": "MarketTypeStr"
            },
            {
              "name": "userAccount",
              "type": "string"
            },
            {
              "name": "isProtectedMaker",
              "type": "boolean"
            },
            {
              "name": "protectedMakerParamsMap",
              "type": "ProtectedMakerParams"
            },
            {
              "name": "baseAssetAmount",
              "type": "BN"
            }
          ],
          "returns": "void",
          "startLine": 41,
          "endLine": 96
        },
        {
          "name": "prependNode",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "currentNode",
              "type": "DLOBNodeMap[NodeType]"
            },
            {
              "name": "newNode",
              "type": "DLOBNodeMap[NodeType]"
            }
          ],
          "returns": "boolean",
          "startLine": 98,
          "endLine": 117
        },
        {
          "name": "update",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "userAccount",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 119,
          "endLine": 126
        },
        {
          "name": "remove",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "userAccount",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 128,
          "endLine": 150
        },
        {
          "name": "getGenerator",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Generator<DLOBNode, any, any>",
          "startLine": 152,
          "endLine": 158
        },
        {
          "name": "has",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "userAccount",
              "type": "string"
            }
          ],
          "returns": "boolean",
          "startLine": 160,
          "endLine": 162
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "orderSignature",
              "type": "string"
            }
          ],
          "returns": "DLOBNodeMap[NodeType]",
          "startLine": 164,
          "endLine": 166
        },
        {
          "name": "print",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 168,
          "endLine": 174
        },
        {
          "name": "printTop",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 176,
          "endLine": 182
        }
      ],
      "startLine": 23,
      "endLine": 183
    },
    {
      "file": "protocol-v2/sdk/src/driftClient.ts",
      "name": "DriftClient",
      "abstract": false,
      "methods": [
        {
          "name": "isSubscribed",
          "kind": "get",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 271,
          "endLine": 273
        },
        {
          "name": "isSubscribed",
          "kind": "set",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "val",
              "type": "boolean"
            }
          ],
          "startLine": 275,
          "endLine": 277
        },
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "DriftClientConfig"
            }
          ],
          "startLine": 279,
          "endLine": 489
        },
        {
          "name": "getUserMapKey",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "string",
          "startLine": 491,
          "endLine": 493
        },
        {
          "name": "createUser",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "accountSubscriptionConfig",
              "type": "UserSubscriptionConfig"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "User",
          "startLine": 495,
          "endLine": 511
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 513,
          "endLine": 526
        },
        {
          "name": "subscribeUsers",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>[]",
          "startLine": 528,
          "endLine": 530
        },
        {
          "name": "fetchAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 535,
          "endLine": 543
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 545,
          "endLine": 556
        },
        {
          "name": "unsubscribeUsers",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>[]",
          "startLine": 558,
          "endLine": 560
        },
        {
          "name": "getStatePublicKey",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<PublicKey>",
          "startLine": 563,
          "endLine": 571
        },
        {
          "name": "getSignerPublicKey",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "PublicKey",
          "startLine": 574,
          "endLine": 580
        },
        {
          "name": "getStateAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "StateAccount",
          "startLine": 582,
          "endLine": 584
        },
        {
          "name": "forceGetStateAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<StateAccount>",
          "startLine": 589,
          "endLine": 592
        },
        {
          "name": "getPerpMarketAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "PerpMarketAccount",
          "startLine": 594,
          "endLine": 598
        },
        {
          "name": "forceGetPerpMarketAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<PerpMarketAccount>",
          "startLine": 604,
          "endLine": 617
        },
        {
          "name": "getPerpMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "PerpMarketAccount[]",
          "startLine": 619,
          "endLine": 624
        },
        {
          "name": "getSpotMarketAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "SpotMarketAccount",
          "startLine": 626,
          "endLine": 631
        },
        {
          "name": "forceGetSpotMarketAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<SpotMarketAccount>",
          "startLine": 637,
          "endLine": 643
        },
        {
          "name": "getSpotMarketAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "SpotMarketAccount[]",
          "startLine": 645,
          "endLine": 650
        },
        {
          "name": "getQuoteSpotMarketAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "SpotMarketAccount",
          "startLine": 652,
          "endLine": 656
        },
        {
          "name": "getOraclePriceDataAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "oraclePublicKey",
              "type": "PublicKey"
            },
            {
              "name": "oracleSource",
              "type": "OracleSource"
            }
          ],
          "returns": "DataAndSlot<OraclePriceData>",
          "startLine": 658,
          "endLine": 665
        },
        {
          "name": "getSerumV3FulfillmentConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "serumMarket",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<SerumV3FulfillmentConfigAccount>",
          "startLine": 667,
          "endLine": 677
        },
        {
          "name": "getSerumV3FulfillmentConfigs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<SerumV3FulfillmentConfigAccount[]>",
          "startLine": 679,
          "endLine": 686
        },
        {
          "name": "getPhoenixV1FulfillmentConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "phoenixMarket",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<PhoenixV1FulfillmentConfigAccount>",
          "startLine": 688,
          "endLine": 698
        },
        {
          "name": "getPhoenixV1FulfillmentConfigs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<PhoenixV1FulfillmentConfigAccount[]>",
          "startLine": 700,
          "endLine": 708
        },
        {
          "name": "getOpenbookV2FulfillmentConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "openbookMarket",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<OpenbookV2FulfillmentConfigAccount>",
          "startLine": 710,
          "endLine": 720
        },
        {
          "name": "getOpenbookV2FulfillmentConfigs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<OpenbookV2FulfillmentConfigAccount[]>",
          "startLine": 722,
          "endLine": 730
        },
        {
          "name": "fetchMarketLookupTableAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<AddressLookupTableAccount>",
          "startLine": 733,
          "endLine": 747
        },
        {
          "name": "fetchAllLookupTableAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<AddressLookupTableAccount[]>",
          "startLine": 749,
          "endLine": 771
        },
        {
          "name": "getTxVersionForNewWallet",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "newWallet",
              "type": "IWallet"
            }
          ],
          "returns": "0 | \"legacy\"",
          "startLine": 773,
          "endLine": 781
        },
        {
          "name": "updateWallet",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "newWallet",
              "type": "IWallet"
            },
            {
              "name": "subAccountIds",
              "type": "number[]"
            },
            {
              "name": "activeSubAccountId",
              "type": "number"
            },
            {
              "name": "includeDelegates",
              "type": "boolean"
            },
            {
              "name": "authoritySubaccountMap",
              "type": "Map<string, number[]>"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 790,
          "endLine": 876
        },
        {
          "name": "emulateAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "emulateAuthority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 884,
          "endLine": 918
        },
        {
          "name": "switchActiveUser",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 920,
          "endLine": 944
        },
        {
          "name": "addUser",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 946,
          "endLine": 972
        },
        {
          "name": "addAndSubscribeToUsers",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 977,
          "endLine": 1040
        },
        {
          "name": "getInitializeUserAccountIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "poolId",
              "type": "number"
            }
          ],
          "returns": "Promise<[TransactionInstruction[], PublicKey]>",
          "startLine": 1049,
          "endLine": 1081
        },
        {
          "name": "initializeUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<[string, PublicKey]>",
          "startLine": 1091,
          "endLine": 1107
        },
        {
          "name": "getInitializeUserStatsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1109,
          "endLine": 1123
        },
        {
          "name": "initializeSignedMsgUserOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "numOrders",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<[string, PublicKey]>",
          "startLine": 1125,
          "endLine": 1142
        },
        {
          "name": "getInitializeSignedMsgUserOrdersAccountIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "numOrders",
              "type": "number"
            }
          ],
          "returns": "Promise<[PublicKey, TransactionInstruction]>",
          "startLine": 1144,
          "endLine": 1164
        },
        {
          "name": "resizeSignedMsgUserOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "numOrders",
              "type": "number"
            },
            {
              "name": "userSubaccountId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1166,
          "endLine": 1182
        },
        {
          "name": "getResizeSignedMsgUserOrdersInstruction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "numOrders",
              "type": "number"
            },
            {
              "name": "userSubaccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1184,
          "endLine": 1209
        },
        {
          "name": "initializeSignedMsgWsDelegatesAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "delegates",
              "type": "PublicKey[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1211,
          "endLine": 1223
        },
        {
          "name": "getInitializeSignedMsgWsDelegatesAccountIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "delegates",
              "type": "PublicKey[]"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1225,
          "endLine": 1245
        },
        {
          "name": "initializeRevenueShare",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1247,
          "endLine": 1255
        },
        {
          "name": "getInitializeRevenueShareIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "overrides",
              "type": "{ payer?: PublicKey; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1257,
          "endLine": 1276
        },
        {
          "name": "initializeRevenueShareEscrow",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "numOrders",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1278,
          "endLine": 1290
        },
        {
          "name": "getInitializeRevenueShareEscrowIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "numOrders",
              "type": "number"
            },
            {
              "name": "overrides",
              "type": "{ payer?: PublicKey; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1292,
          "endLine": 1317
        },
        {
          "name": "migrateReferrer",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1319,
          "endLine": 1327
        },
        {
          "name": "getMigrateReferrerIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1329,
          "endLine": 1348
        },
        {
          "name": "resizeRevenueShareEscrowOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "numOrders",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1350,
          "endLine": 1362
        },
        {
          "name": "getResizeRevenueShareEscrowOrdersIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "numOrders",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1364,
          "endLine": 1380
        },
        {
          "name": "changeApprovedBuilder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "builder",
              "type": "PublicKey"
            },
            {
              "name": "maxFeeTenthBps",
              "type": "number"
            },
            {
              "name": "add",
              "type": "boolean"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1392,
          "endLine": 1406
        },
        {
          "name": "getChangeApprovedBuilderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "builder",
              "type": "PublicKey"
            },
            {
              "name": "maxFeeTenthBps",
              "type": "number"
            },
            {
              "name": "add",
              "type": "boolean"
            },
            {
              "name": "overrides",
              "type": "{ authority?: PublicKey; payer?: PublicKey; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1417,
          "endLine": 1445
        },
        {
          "name": "addSignedMsgWsDelegate",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "delegate",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1447,
          "endLine": 1456
        },
        {
          "name": "getAddSignedMsgWsDelegateIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "delegate",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1458,
          "endLine": 1478
        },
        {
          "name": "removeSignedMsgWsDelegate",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "delegate",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1480,
          "endLine": 1489
        },
        {
          "name": "getRemoveSignedMsgWsDelegateIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "delegate",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1491,
          "endLine": 1511
        },
        {
          "name": "initializeFuelOverflow",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1513,
          "endLine": 1520
        },
        {
          "name": "getInitializeFuelOverflowIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1522,
          "endLine": 1541
        },
        {
          "name": "sweepFuel",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1543,
          "endLine": 1548
        },
        {
          "name": "getSweepFuelIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1550,
          "endLine": 1567
        },
        {
          "name": "getInitializeUserInstructions",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            }
          ],
          "returns": "Promise<[PublicKey, TransactionInstruction]>",
          "startLine": 1569,
          "endLine": 1631
        },
        {
          "name": "getNextSubAccountId",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<number>",
          "startLine": 1633,
          "endLine": 1646
        },
        {
          "name": "initializeReferrerName",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1648,
          "endLine": 1680
        },
        {
          "name": "updateUserName",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1682,
          "endLine": 1705
        },
        {
          "name": "updateUserCustomMarginRatio",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "updates",
              "type": "{ marginRatio: number; subAccountId: number; }[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1707,
          "endLine": 1725
        },
        {
          "name": "getUpdateUserCustomMarginRatioIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marginRatio",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1727,
          "endLine": 1751
        },
        {
          "name": "getUpdateUserPerpPositionCustomMarginRatioIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "marginRatio",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1753,
          "endLine": 1779
        },
        {
          "name": "updateUserPerpPositionCustomMarginRatio",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "marginRatio",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "enterHighLeverageMode",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1781,
          "endLine": 1802
        },
        {
          "name": "getUpdateUserMarginTradingEnabledIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marginTradingEnabled",
              "type": "boolean"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1804,
          "endLine": 1839
        },
        {
          "name": "updateUserMarginTradingEnabled",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "updates",
              "type": "{ marginTradingEnabled: boolean; subAccountId: number; }[]"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1841,
          "endLine": 1857
        },
        {
          "name": "getUpdateUserDelegateIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "delegate",
              "type": "PublicKey"
            },
            {
              "name": "overrides",
              "type": "{ subAccountId?: number; userAccountPublicKey?: PublicKey; authority?: PublicKey; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1859,
          "endLine": 1882
        },
        {
          "name": "updateUserDelegate",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "delegate",
              "type": "PublicKey"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1884,
          "endLine": 1901
        },
        {
          "name": "updateUserAdvancedLp",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "updates",
              "type": "{ advancedLp: boolean; subAccountId: number; }[]"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1903,
          "endLine": 1916
        },
        {
          "name": "getUpdateAdvancedDlpIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "advancedLp",
              "type": "boolean"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1918,
          "endLine": 1938
        },
        {
          "name": "updateUserReduceOnly",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "updates",
              "type": "{ reduceOnly: boolean; subAccountId: number; }[]"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1940,
          "endLine": 1953
        },
        {
          "name": "getUpdateUserReduceOnlyIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1955,
          "endLine": 1975
        },
        {
          "name": "updateUserPoolId",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "updates",
              "type": "{ poolId: number; subAccountId: number; }[]"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 1977,
          "endLine": 1990
        },
        {
          "name": "getUpdateUserPoolIdIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "poolId",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 1992,
          "endLine": 2009
        },
        {
          "name": "fetchAllUserAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "includeIdle",
              "type": "boolean"
            }
          ],
          "returns": "Promise<ProgramAccount<UserAccount>[]>",
          "startLine": 2011,
          "endLine": 2021
        },
        {
          "name": "getUserAccountsForDelegate",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "delegate",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<UserAccount[]>",
          "startLine": 2023,
          "endLine": 2039
        },
        {
          "name": "getUserAccountsAndAddressesForAuthority",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<ProgramAccount<UserAccount>[]>",
          "startLine": 2041,
          "endLine": 2057
        },
        {
          "name": "getUserAccountsForAuthority",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<UserAccount[]>",
          "startLine": 2059,
          "endLine": 2075
        },
        {
          "name": "getReferredUserStatsAccountsByReferrer",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "referrer",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<UserStatsAccount[]>",
          "startLine": 2077,
          "endLine": 2093
        },
        {
          "name": "getReferrerNameAccountsForAuthority",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<ReferrerNameAccount[]>",
          "startLine": 2095,
          "endLine": 2111
        },
        {
          "name": "deleteUser",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2113,
          "endLine": 2136
        },
        {
          "name": "getUserDeletionIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2138,
          "endLine": 2149
        },
        {
          "name": "forceDeleteUser",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2151,
          "endLine": 2163
        },
        {
          "name": "getForceDeleteUserIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2165,
          "endLine": 2248
        },
        {
          "name": "deleteSignedMsgUserOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2250,
          "endLine": 2264
        },
        {
          "name": "getSignedMsgUserOrdersDeletionIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2266,
          "endLine": 2280
        },
        {
          "name": "isSignedMsgUserOrdersAccountInitialized",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 2290,
          "endLine": 2296
        },
        {
          "name": "reclaimRent",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2298,
          "endLine": 2317
        },
        {
          "name": "getReclaimRentIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 2319,
          "endLine": 2329
        },
        {
          "name": "getUser",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "User",
          "startLine": 2331,
          "endLine": 2340
        },
        {
          "name": "hasUser",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "boolean",
          "startLine": 2342,
          "endLine": 2348
        },
        {
          "name": "getUsers",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "User[]",
          "startLine": 2350,
          "endLine": 2362
        },
        {
          "name": "getUserStats",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "UserStats",
          "startLine": 2364,
          "endLine": 2366
        },
        {
          "name": "fetchReferrerNameAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "Promise<ReferrerNameAccount>",
          "startLine": 2368,
          "endLine": 2379
        },
        {
          "name": "getUserStatsAccountPublicKey",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "PublicKey",
          "startLine": 2382,
          "endLine": 2392
        },
        {
          "name": "getUserAccountPublicKey",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<PublicKey>",
          "startLine": 2394,
          "endLine": 2399
        },
        {
          "name": "getUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "UserAccount",
          "startLine": 2401,
          "endLine": 2406
        },
        {
          "name": "forceGetUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<UserAccount>",
          "startLine": 2412,
          "endLine": 2418
        },
        {
          "name": "getUserAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "DataAndSlot<UserAccount>",
          "startLine": 2420,
          "endLine": 2425
        },
        {
          "name": "getSpotPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "SpotPosition",
          "startLine": 2427,
          "endLine": 2434
        },
        {
          "name": "getQuoteAssetTokenAmount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "BN",
          "startLine": 2436,
          "endLine": 2438
        },
        {
          "name": "getTokenAmount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "BN",
          "startLine": 2445,
          "endLine": 2459
        },
        {
          "name": "convertToSpotPrecision",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 2466,
          "endLine": 2469
        },
        {
          "name": "convertToPerpPrecision",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 2475,
          "endLine": 2481
        },
        {
          "name": "convertToPricePrecision",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 2487,
          "endLine": 2493
        },
        {
          "name": "mustIncludeMarketsInIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tperpMarketIndexes,\n\t\tspotMarketIndexes,\n\t}",
              "type": "{ perpMarketIndexes: number[]; spotMarketIndexes: number[]; }"
            }
          ],
          "returns": "void",
          "startLine": 2502,
          "endLine": 2516
        },
        {
          "name": "getRemainingAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "params",
              "type": "RemainingAccountParams"
            }
          ],
          "returns": "AccountMeta[]",
          "startLine": 2518,
          "endLine": 2645
        },
        {
          "name": "addPerpMarketToRemainingAccountMaps",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "writable",
              "type": "boolean"
            },
            {
              "name": "oracleAccountMap",
              "type": "Map<string, AccountMeta>"
            },
            {
              "name": "spotMarketAccountMap",
              "type": "Map<number, AccountMeta>"
            },
            {
              "name": "perpMarketAccountMap",
              "type": "Map<number, AccountMeta>"
            }
          ],
          "returns": "void",
          "startLine": 2647,
          "endLine": 2673
        },
        {
          "name": "addSpotMarketToRemainingAccountMaps",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "writable",
              "type": "boolean"
            },
            {
              "name": "oracleAccountMap",
              "type": "Map<string, AccountMeta>"
            },
            {
              "name": "spotMarketAccountMap",
              "type": "Map<number, AccountMeta>"
            }
          ],
          "returns": "void",
          "startLine": 2675,
          "endLine": 2694
        },
        {
          "name": "addBuilderToRemainingAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "builders",
              "type": "PublicKey[]"
            },
            {
              "name": "remainingAccounts",
              "type": "AccountMeta[]"
            }
          ],
          "returns": "void",
          "startLine": 2696,
          "endLine": 2723
        },
        {
          "name": "getRemainingAccountMapsForUsers",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccounts",
              "type": "UserAccount[]"
            }
          ],
          "returns": "{ oracleAccountMap: Map<string, AccountMeta>; spotMarketAccountMap: Map<number, AccountMeta>; perpMarketAccountMap: Map<number, AccountMeta>; }",
          "startLine": 2725,
          "endLine": 2775
        },
        {
          "name": "getOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "orderId",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Order",
          "startLine": 2777,
          "endLine": 2781
        },
        {
          "name": "getOrderByUserId",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userOrderId",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Order",
          "startLine": 2783,
          "endLine": 2790
        },
        {
          "name": "getAssociatedTokenAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "useNative",
              "type": "boolean"
            },
            {
              "name": "tokenProgram",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<PublicKey>",
          "startLine": 2798,
          "endLine": 2814
        },
        {
          "name": "createAssociatedTokenAccountIdempotentInstruction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "account",
              "type": "PublicKey"
            },
            {
              "name": "payer",
              "type": "PublicKey"
            },
            {
              "name": "owner",
              "type": "PublicKey"
            },
            {
              "name": "mint",
              "type": "PublicKey"
            },
            {
              "name": "tokenProgram",
              "type": "PublicKey"
            }
          ],
          "returns": "TransactionInstruction",
          "startLine": 2816,
          "endLine": 2839
        },
        {
          "name": "getDepositTxnIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "associatedTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 2841,
          "endLine": 2894
        },
        {
          "name": "buildSwiftDepositTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signedOrderParams",
              "type": "SignedMsgOrderParams"
            },
            {
              "name": "takerInfo",
              "type": "{ taker: PublicKey; takerStats: PublicKey; takerUserAccount: UserAccount; signingAuthority: PublicKey; }"
            },
            {
              "name": "depositAmount",
              "type": "BN"
            },
            {
              "name": "depositSpotMarketIndex",
              "type": "number"
            },
            {
              "name": "tradePerpMarketIndex",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "takerAssociatedTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "initSwiftAccount",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 2896,
          "endLine": 2947
        },
        {
          "name": "createDepositTxn",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "associatedTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "initSwiftAccount",
              "type": "boolean"
            }
          ],
          "returns": "Promise<Transaction | VersionedTransaction>",
          "startLine": 2949,
          "endLine": 2988
        },
        {
          "name": "deposit",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "associatedTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "initSwiftAccount",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 2999,
          "endLine": 3021
        },
        {
          "name": "getDepositInstruction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "userTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "userInitialized",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3023,
          "endLine": 3080
        },
        {
          "name": "checkIfAccountExists",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "account",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 3082,
          "endLine": 3090
        },
        {
          "name": "getWrappedSolAccountCreationIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "includeRent",
              "type": "boolean"
            }
          ],
          "returns": "Promise<{ ixs: TransactionInstruction[]; signers: Signer[]; pubkey: PublicKey; }>",
          "startLine": 3092,
          "endLine": 3146
        },
        {
          "name": "getTokenProgramForSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketAccount",
              "type": "SpotMarketAccount"
            }
          ],
          "returns": "PublicKey",
          "startLine": 3148,
          "endLine": 3155
        },
        {
          "name": "isToken2022",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketAccount",
              "type": "SpotMarketAccount"
            }
          ],
          "returns": "boolean",
          "startLine": 3157,
          "endLine": 3161
        },
        {
          "name": "isTransferHook",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketAccount",
              "type": "SpotMarketAccount"
            }
          ],
          "returns": "boolean",
          "startLine": 3163,
          "endLine": 3167
        },
        {
          "name": "addTokenMintToRemainingAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketAccount",
              "type": "SpotMarketAccount"
            },
            {
              "name": "remainingAccounts",
              "type": "AccountMeta[]"
            }
          ],
          "returns": "void",
          "startLine": 3169,
          "endLine": 3180
        },
        {
          "name": "addExtraAccountMetasToRemainingAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "mint",
              "type": "PublicKey"
            },
            {
              "name": "remainingAccounts",
              "type": "AccountMeta[]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 3182,
          "endLine": 3226
        },
        {
          "name": "getAssociatedTokenAccountCreationIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "tokenMintAddress",
              "type": "PublicKey"
            },
            {
              "name": "associatedTokenAddress",
              "type": "PublicKey"
            },
            {
              "name": "tokenProgram",
              "type": "PublicKey"
            }
          ],
          "returns": "TransactionInstruction",
          "startLine": 3228,
          "endLine": 3240
        },
        {
          "name": "createInitializeUserAccountAndDepositCollateralIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "userTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "fromSubAccountId",
              "type": "number"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "donateAmount",
              "type": "BN"
            },
            {
              "name": "customMaxMarginRatio",
              "type": "number"
            },
            {
              "name": "poolId",
              "type": "number"
            }
          ],
          "returns": "Promise<{ ixs: TransactionInstruction[]; userAccountPublicKey: PublicKey; }>",
          "startLine": 3242,
          "endLine": 3379
        },
        {
          "name": "createInitializeUserAccountAndDepositCollateral",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "userTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "fromSubAccountId",
              "type": "number"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "donateAmount",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "customMaxMarginRatio",
              "type": "number"
            },
            {
              "name": "poolId",
              "type": "number"
            }
          ],
          "returns": "Promise<[Transaction | VersionedTransaction, PublicKey]>",
          "startLine": 3381,
          "endLine": 3411
        },
        {
          "name": "initializeUserAccountAndDepositCollateral",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "userTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "fromSubAccountId",
              "type": "number"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "donateAmount",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "customMaxMarginRatio",
              "type": "number"
            },
            {
              "name": "poolId",
              "type": "number"
            }
          ],
          "returns": "Promise<[string, PublicKey]>",
          "startLine": 3426,
          "endLine": 3465
        },
        {
          "name": "initializeUserAccountForDevnet",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "tokenFaucet",
              "type": "TokenFaucet"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<[string, PublicKey]>",
          "startLine": 3467,
          "endLine": 3518
        },
        {
          "name": "getWithdrawalIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "associatedTokenAddress",
              "type": "PublicKey"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "updateFuel",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 3520,
          "endLine": 3597
        },
        {
          "name": "withdraw",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "associatedTokenAddress",
              "type": "PublicKey"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "updateFuel",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3606,
          "endLine": 3638
        },
        {
          "name": "withdrawAllDustPositions",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "opts",
              "type": "{ dustPositionCountCallback?: (count: number) => void; }"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3640,
          "endLine": 3691
        },
        {
          "name": "getWithdrawIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "userTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3693,
          "endLine": 3740
        },
        {
          "name": "transferDeposit",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "fromSubAccountId",
              "type": "number"
            },
            {
              "name": "toSubAccountId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3750,
          "endLine": 3777
        },
        {
          "name": "getTransferDepositIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "fromSubAccountId",
              "type": "number"
            },
            {
              "name": "toSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3779,
          "endLine": 3836
        },
        {
          "name": "transferPools",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "depositFromMarketIndex",
              "type": "number"
            },
            {
              "name": "depositToMarketIndex",
              "type": "number"
            },
            {
              "name": "borrowFromMarketIndex",
              "type": "number"
            },
            {
              "name": "borrowToMarketIndex",
              "type": "number"
            },
            {
              "name": "depositAmount",
              "type": "any"
            },
            {
              "name": "borrowAmount",
              "type": "any"
            },
            {
              "name": "fromSubAccountId",
              "type": "number"
            },
            {
              "name": "toSubAccountId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3838,
          "endLine": 3877
        },
        {
          "name": "getTransferPoolsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "depositFromMarketIndex",
              "type": "number"
            },
            {
              "name": "depositToMarketIndex",
              "type": "number"
            },
            {
              "name": "borrowFromMarketIndex",
              "type": "number"
            },
            {
              "name": "borrowToMarketIndex",
              "type": "number"
            },
            {
              "name": "depositAmount",
              "type": "any"
            },
            {
              "name": "borrowAmount",
              "type": "any"
            },
            {
              "name": "fromSubAccountId",
              "type": "number"
            },
            {
              "name": "toSubAccountId",
              "type": "number"
            },
            {
              "name": "isToNewSubAccount",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3879,
          "endLine": 3970
        },
        {
          "name": "transferPerpPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "fromSubAccountId",
              "type": "number"
            },
            {
              "name": "toSubAccountId",
              "type": "number"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 3972,
          "endLine": 3993
        },
        {
          "name": "getTransferPerpPositionIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "fromSubAccountId",
              "type": "number"
            },
            {
              "name": "toSubAccountId",
              "type": "number"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 3995,
          "endLine": 4035
        },
        {
          "name": "updateSpotMarketCumulativeInterest",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4037,
          "endLine": 4050
        },
        {
          "name": "updateSpotMarketCumulativeInterestIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4052,
          "endLine": 4064
        },
        {
          "name": "settleLP",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "settleeUserAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4066,
          "endLine": 4080
        },
        {
          "name": "settleLPIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "settleeUserAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4082,
          "endLine": 4102
        },
        {
          "name": "removePerpLpShares",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "sharesToBurn",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4104,
          "endLine": 4123
        },
        {
          "name": "removePerpLpSharesInExpiringMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "sharesToBurn",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4125,
          "endLine": 4144
        },
        {
          "name": "getRemovePerpLpSharesInExpiringMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "sharesToBurn",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4146,
          "endLine": 4179
        },
        {
          "name": "getRemovePerpLpSharesIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "sharesToBurn",
              "type": "BN"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4181,
          "endLine": 4215
        },
        {
          "name": "addPerpLpShares",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4217,
          "endLine": 4233
        },
        {
          "name": "getAddPerpLpSharesIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4235,
          "endLine": 4255
        },
        {
          "name": "getQuoteValuePerLpShare",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "BN",
          "startLine": 4257,
          "endLine": 4284
        },
        {
          "name": "openPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "direction",
              "type": "PositionDirection"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4289,
          "endLine": 4311
        },
        {
          "name": "sendSignedTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction | VersionedTransaction"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4313,
          "endLine": 4325
        },
        {
          "name": "prepareMarketOrderTxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "bracketOrdersParams",
              "type": "OptionalOrderParams[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "cancelExistingOrders",
              "type": "boolean"
            },
            {
              "name": "settlePnl",
              "type": "boolean"
            },
            {
              "name": "positionMaxLev",
              "type": "number"
            }
          ],
          "returns": "Promise<{ cancelExistingOrdersTx?: Transaction | VersionedTransaction; settlePnlTx?: Transaction | VersionedTransaction; fillTx?: Transaction | VersionedTransaction; marketOrderTx: Transaction | VersionedTransaction; }>",
          "startLine": 4327,
          "endLine": 4428
        },
        {
          "name": "sendMarketOrderAndGetSignedFillTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "bracketOrdersParams",
              "type": "OptionalOrderParams[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "cancelExistingOrders",
              "type": "boolean"
            },
            {
              "name": "settlePnl",
              "type": "boolean"
            }
          ],
          "returns": "Promise<{ txSig: string; signedFillTx?: Transaction; signedCancelExistingOrdersTx?: Transaction; signedSettlePnlTx?: Transaction; }>",
          "startLine": 4441,
          "endLine": 4489
        },
        {
          "name": "placePerpOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4491,
          "endLine": 4506
        },
        {
          "name": "getPlacePerpOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "depositToTradeArgs",
              "type": "{ isMakingNewAccount: boolean; depositMarketIndex: number; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4508,
          "endLine": 4556
        },
        {
          "name": "updateAMMs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndexes",
              "type": "number[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4558,
          "endLine": 4571
        },
        {
          "name": "getUpdateAMMsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndexes",
              "type": "number[]"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4573,
          "endLine": 4600
        },
        {
          "name": "settleExpiredMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4602,
          "endLine": 4615
        },
        {
          "name": "getSettleExpiredMarketIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4617,
          "endLine": 4640
        },
        {
          "name": "settleExpiredMarketPoolsToRevenuePool",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4642,
          "endLine": 4655
        },
        {
          "name": "getSettleExpiredMarketPoolsToRevenuePoolIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4657,
          "endLine": 4682
        },
        {
          "name": "cancelOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4684,
          "endLine": 4698
        },
        {
          "name": "getCancelOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderId",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4700,
          "endLine": 4719
        },
        {
          "name": "cancelOrderByUserId",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userOrderId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4721,
          "endLine": 4735
        },
        {
          "name": "getCancelOrderByUserIdIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userOrderId",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4737,
          "endLine": 4760
        },
        {
          "name": "cancelOrdersByIds",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderIds",
              "type": "number[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "user",
              "type": "User"
            },
            {
              "name": "overrides",
              "type": "{ authority?: PublicKey; }"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4771,
          "endLine": 4794
        },
        {
          "name": "getCancelOrdersByIdsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderIds",
              "type": "number[]"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "user",
              "type": "User"
            },
            {
              "name": "overrides",
              "type": "{ authority?: PublicKey; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4804,
          "endLine": 4833
        },
        {
          "name": "cancelOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4835,
          "endLine": 4856
        },
        {
          "name": "getCancelOrdersIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4858,
          "endLine": 4897
        },
        {
          "name": "cancelAndPlaceOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "cancelOrderParams",
              "type": "{ marketType?: MarketType; marketIndex?: number; direction?: PositionDirection; }"
            },
            {
              "name": "placeOrderParams",
              "type": "OrderParams[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4899,
          "endLine": 4921
        },
        {
          "name": "placeOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "params",
              "type": "OrderParams[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "optionalIxs",
              "type": "TransactionInstruction[]"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 4923,
          "endLine": 4943
        },
        {
          "name": "preparePlaceOrdersTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "params",
              "type": "OrderParams[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "optionalIxs",
              "type": "TransactionInstruction[]"
            }
          ],
          "returns": "Promise<{ placeOrdersTx: Transaction | VersionedTransaction; }>",
          "startLine": 4945,
          "endLine": 4966
        },
        {
          "name": "getPlaceOrdersIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "params",
              "type": "OptionalOrderParams[]"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "overrides",
              "type": "{ authority?: PublicKey; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 4968,
          "endLine": 5019
        },
        {
          "name": "getPlaceOrdersAndSetPositionMaxLevIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "params",
              "type": "OptionalOrderParams[]"
            },
            {
              "name": "positionMaxLev",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 5021,
          "endLine": 5086
        },
        {
          "name": "fillPerpOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "user",
              "type": "UserAccount"
            },
            {
              "name": "order",
              "type": "Pick<Order, \"marketIndex\" | \"orderId\">"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "fillerSubAccountId",
              "type": "number"
            },
            {
              "name": "fillerAuthority",
              "type": "PublicKey"
            },
            {
              "name": "hasBuilderFee",
              "type": "boolean"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 5088,
          "endLine": 5118
        },
        {
          "name": "getFillPerpOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "order",
              "type": "Pick<Order, \"marketIndex\" | \"orderId\">"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "fillerSubAccountId",
              "type": "number"
            },
            {
              "name": "isSignedMsg",
              "type": "boolean"
            },
            {
              "name": "fillerAuthority",
              "type": "PublicKey"
            },
            {
              "name": "hasBuilderFee",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 5120,
          "endLine": 5253
        },
        {
          "name": "getRevertFillIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 5255,
          "endLine": 5269
        },
        {
          "name": "placeSpotOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 5271,
          "endLine": 5286
        },
        {
          "name": "preparePlaceSpotOrderTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<{ placeSpotOrderTx: Transaction | VersionedTransaction; }>",
          "startLine": 5288,
          "endLine": 5301
        },
        {
          "name": "getPlaceSpotOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 5303,
          "endLine": 5330
        },
        {
          "name": "fillSpotOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "user",
              "type": "UserAccount"
            },
            {
              "name": "order",
              "type": "Pick<Order, \"marketIndex\" | \"orderId\">"
            },
            {
              "name": "fulfillmentConfig",
              "type": "SerumV3FulfillmentConfigAccount | PhoenixV1FulfillmentConfigAccount | OpenbookV2FulfillmentConfigAccount"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 5332,
          "endLine": 5360
        },
        {
          "name": "getFillSpotOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "order",
              "type": "Pick<Order, \"marketIndex\" | \"orderId\">"
            },
            {
              "name": "fulfillmentConfig",
              "type": "SerumV3FulfillmentConfigAccount | PhoenixV1FulfillmentConfigAccount | OpenbookV2FulfillmentConfigAccount"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 5362,
          "endLine": 5440
        },
        {
          "name": "addSpotFulfillmentAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "remainingAccounts",
              "type": "AccountMeta[]"
            },
            {
              "name": "fulfillmentConfig",
              "type": "SerumV3FulfillmentConfigAccount | PhoenixV1FulfillmentConfigAccount | OpenbookV2FulfillmentConfigAccount"
            }
          ],
          "returns": "void",
          "startLine": 5442,
          "endLine": 5484
        },
        {
          "name": "addSerumRemainingAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "remainingAccounts",
              "type": "AccountMeta[]"
            },
            {
              "name": "fulfillmentConfig",
              "type": "SerumV3FulfillmentConfigAccount"
            }
          ],
          "returns": "void",
          "startLine": 5486,
          "endLine": 5575
        },
        {
          "name": "addPhoenixRemainingAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "remainingAccounts",
              "type": "AccountMeta[]"
            },
            {
              "name": "fulfillmentConfig",
              "type": "PhoenixV1FulfillmentConfigAccount"
            }
          ],
          "returns": "void",
          "startLine": 5577,
          "endLine": 5632
        },
        {
          "name": "addOpenbookRemainingAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "remainingAccounts",
              "type": "AccountMeta[]"
            },
            {
              "name": "fulfillmentConfig",
              "type": "OpenbookV2FulfillmentConfigAccount"
            }
          ],
          "returns": "void",
          "startLine": 5634,
          "endLine": 5729
        },
        {
          "name": "swap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tjupiterClient,\n\t\toutMarketIndex,\n\t\tinMarketIndex,\n\t\toutAssociatedTokenAccount,\n\t\tinAssociatedTokenAccount,\n\t\tamount,\n\t\tslippageBps,\n\t\tswapMode,\n\t\treduceOnly,\n\t\ttxParams,\n\t\tv6,\n\t\tquote,\n\t\tonlyDirectRoutes = false,\n\t}",
              "type": "{ jupiterClient: JupiterClient; outMarketIndex: number; inMarketIndex: number; outAssociatedTokenAccount?: PublicKey; inAssociatedTokenAccount?: PublicKey; ... 7 more ...; quote?: QuoteResponse; }"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 5747,
          "endLine": 5808
        },
        {
          "name": "getJupiterSwapIxV6",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tjupiterClient,\n\t\toutMarketIndex,\n\t\tinMarketIndex,\n\t\toutAssociatedTokenAccount,\n\t\tinAssociatedTokenAccount,\n\t\tamount,\n\t\tslippageBps,\n\t\tswapMode,\n\t\tonlyDirectRoutes,\n\t\tquote,\n\t\treduceOnly,\n\t\tuserAccountPublicKey,\n\t}",
              "type": "{ jupiterClient: JupiterClient; outMarketIndex: number; inMarketIndex: number; outAssociatedTokenAccount?: PublicKey; inAssociatedTokenAccount?: PublicKey; ... 6 more ...; userAccountPublicKey?: PublicKey; }"
            }
          ],
          "returns": "Promise<{ ixs: TransactionInstruction[]; lookupTables: AddressLookupTableAccount[]; }>",
          "startLine": 5810,
          "endLine": 5948
        },
        {
          "name": "getSwapIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\toutMarketIndex,\n\t\tinMarketIndex,\n\t\tamountIn,\n\t\tinTokenAccount,\n\t\toutTokenAccount,\n\t\tlimitPrice,\n\t\treduceOnly,\n\t\tuserAccountPublicKey,\n\t}",
              "type": "{ outMarketIndex: number; inMarketIndex: number; amountIn: BN; inTokenAccount: PublicKey; outTokenAccount: PublicKey; limitPrice?: BN; reduceOnly?: SwapReduceOnly; userAccountPublicKey?: PublicKey; }"
            }
          ],
          "returns": "Promise<{ beginSwapIx: TransactionInstruction; endSwapIx: TransactionInstruction; }>",
          "startLine": 5962,
          "endLine": 6087
        },
        {
          "name": "stakeForMSOL",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{ amount }",
              "type": "{ amount: BN; }"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 6089,
          "endLine": 6093
        },
        {
          "name": "getStakeForMSOLIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tamount,\n\t\tuserAccountPublicKey,\n\t}",
              "type": "{ amount: BN; userAccountPublicKey?: PublicKey; }"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 6095,
          "endLine": 6147
        },
        {
          "name": "triggerOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "user",
              "type": "UserAccount"
            },
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 6149,
          "endLine": 6170
        },
        {
          "name": "getTriggerOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "order",
              "type": "Order"
            },
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 6172,
          "endLine": 6207
        },
        {
          "name": "forceCancelOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "user",
              "type": "UserAccount"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 6209,
          "endLine": 6228
        },
        {
          "name": "getForceCancelOrdersIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 6230,
          "endLine": 6251
        },
        {
          "name": "updateUserIdle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "user",
              "type": "UserAccount"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 6253,
          "endLine": 6272
        },
        {
          "name": "getUpdateUserIdleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 6274,
          "endLine": 6294
        },
        {
          "name": "logUserBalances",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 6296,
          "endLine": 6309
        },
        {
          "name": "getLogUserBalancesIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 6311,
          "endLine": 6329
        },
        {
          "name": "updateUserFuelBonus",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "user",
              "type": "UserAccount"
            },
            {
              "name": "userAuthority",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 6331,
          "endLine": 6350
        },
        {
          "name": "getUpdateUserFuelBonusIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "userAuthority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 6352,
          "endLine": 6375
        },
        {
          "name": "updateUserStatsReferrerStatus",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAuthority",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 6377,
          "endLine": 6390
        },
        {
          "name": "getUpdateUserStatsReferrerStatusIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAuthority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 6392,
          "endLine": 6407
        },
        {
          "name": "updateUserOpenOrdersCount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "user",
              "type": "UserAccount"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 6409,
          "endLine": 6428
        },
        {
          "name": "getUpdateUserOpenOrdersCountIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "fillerPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 6430,
          "endLine": 6450
        },
        {
          "name": "placeAndTakePerpOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "successCondition",
              "type": "PlaceAndTakeOrderSuccessCondition"
            },
            {
              "name": "auctionDurationPercentage",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 6452,
          "endLine": 6478
        },
        {
          "name": "preparePlaceAndTakePerpOrderWithAdditionalOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "bracketOrdersParams",
              "type": "OptionalOrderParams[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "cancelExistingOrders",
              "type": "boolean"
            },
            {
              "name": "settlePnl",
              "type": "boolean"
            },
            {
              "name": "exitEarlyIfSimFails",
              "type": "boolean"
            },
            {
              "name": "auctionDurationPercentage",
              "type": "number"
            },
            {
              "name": "optionalIxs",
              "type": "TransactionInstruction[]"
            }
          ],
          "returns": "Promise<{ placeAndTakeTx: Transaction | VersionedTransaction; cancelExistingOrdersTx: Transaction | VersionedTransaction; settlePnlTx: Transaction | VersionedTransaction; }>",
          "startLine": 6480,
          "endLine": 6654
        },
        {
          "name": "placeAndTakePerpWithAdditionalOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "bracketOrdersParams",
              "type": "OptionalOrderParams[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "cancelExistingOrders",
              "type": "boolean"
            },
            {
              "name": "settlePnl",
              "type": "boolean"
            },
            {
              "name": "exitEarlyIfSimFails",
              "type": "boolean"
            }
          ],
          "returns": "Promise<{ txSig: string; signedCancelExistingOrdersTx?: Transaction; signedSettlePnlTx?: Transaction; }>",
          "startLine": 6656,
          "endLine": 6711
        },
        {
          "name": "getPlaceAndTakePerpOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo | MakerInfo[]"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "successCondition",
              "type": "PlaceAndTakeOrderSuccessCondition"
            },
            {
              "name": "auctionDurationPercentage",
              "type": "number"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "overrides",
              "type": "{ authority?: PublicKey; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 6713,
          "endLine": 6805
        },
        {
          "name": "placeAndMakePerpOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "takerInfo",
              "type": "TakerInfo"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 6807,
          "endLine": 6831
        },
        {
          "name": "getPlaceAndMakePerpOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "takerInfo",
              "type": "TakerInfo"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 6833,
          "endLine": 6891
        },
        {
          "name": "signSignedMsgOrderParamsMessage",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "orderParamsMessage",
              "type": "SignedMsgOrderParamsMessage | SignedMsgOrderParamsDelegateMessage"
            },
            {
              "name": "delegateSigner",
              "type": "boolean"
            }
          ],
          "returns": "SignedMsgOrderParams",
          "startLine": 6893,
          "endLine": 6908
        },
        {
          "name": "buildDepositAndPlaceSignedMsgOrderRequest",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "depositTx",
              "type": "VersionedTransaction"
            },
            {
              "name": "orderParamsMessage",
              "type": "SignedMsgOrderParamsMessage | SignedMsgOrderParamsDelegateMessage"
            },
            {
              "name": "delegateSigner",
              "type": "boolean"
            }
          ],
          "returns": "{ deposit_tx: Buffer<ArrayBufferLike>; swift_order: SignedMsgOrderParams; }",
          "startLine": 6919,
          "endLine": 6942
        },
        {
          "name": "encodeSignedMsgOrderParamsMessage",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "orderParamsMessage",
              "type": "SignedMsgOrderParamsMessage | SignedMsgOrderParamsDelegateMessage"
            },
            {
              "name": "delegateSigner",
              "type": "boolean"
            }
          ],
          "returns": "Buffer<ArrayBufferLike>",
          "startLine": 6947,
          "endLine": 6987
        },
        {
          "name": "decodeSignedMsgOrderParamsMessage",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "encodedMessage",
              "type": "Buffer<ArrayBufferLike>"
            },
            {
              "name": "delegateSigner",
              "type": "boolean"
            }
          ],
          "returns": "SignedMsgOrderParamsMessage | SignedMsgOrderParamsDelegateMessage",
          "startLine": 6995,
          "endLine": 7009
        },
        {
          "name": "signMessage",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "message",
              "type": "Uint8Array<ArrayBufferLike>"
            },
            {
              "name": "keypair",
              "type": "Keypair"
            }
          ],
          "returns": "Buffer<ArrayBufferLike>",
          "startLine": 7011,
          "endLine": 7016
        },
        {
          "name": "placeSignedMsgTakerOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signedSignedMsgOrderParams",
              "type": "SignedMsgOrderParams"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "takerInfo",
              "type": "{ taker: PublicKey; takerStats: PublicKey; takerUserAccount: UserAccount; signingAuthority: PublicKey; }"
            },
            {
              "name": "precedingIxs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "overrideCustomIxIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7018,
          "endLine": 7044
        },
        {
          "name": "getPlaceSignedMsgTakerPerpOrderIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signedSignedMsgOrderParams",
              "type": "SignedMsgOrderParams"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "takerInfo",
              "type": "{ taker: PublicKey; takerStats: PublicKey; takerUserAccount: UserAccount; signingAuthority: PublicKey; }"
            },
            {
              "name": "precedingIxs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "overrideCustomIxIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 7046,
          "endLine": 7138
        },
        {
          "name": "placeAndMakeSignedMsgPerpOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signedSignedMsgOrderParams",
              "type": "SignedMsgOrderParams"
            },
            {
              "name": "signedMsgOrderUuid",
              "type": "Uint8Array<ArrayBufferLike>"
            },
            {
              "name": "takerInfo",
              "type": "{ taker: PublicKey; takerStats: PublicKey; takerUserAccount: UserAccount; signingAuthority: PublicKey; }"
            },
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "precedingIxs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "overrideCustomIxIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7140,
          "endLine": 7174
        },
        {
          "name": "getPlaceAndMakeSignedMsgPerpOrderIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signedSignedMsgOrderParams",
              "type": "SignedMsgOrderParams"
            },
            {
              "name": "signedMsgOrderUuid",
              "type": "Uint8Array<ArrayBufferLike>"
            },
            {
              "name": "takerInfo",
              "type": "{ taker: PublicKey; takerStats: PublicKey; takerUserAccount: UserAccount; signingAuthority: PublicKey; }"
            },
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "precedingIxs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "overrideCustomIxIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 7176,
          "endLine": 7278
        },
        {
          "name": "preparePlaceAndTakeSpotOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "fulfillmentConfig",
              "type": "SerumV3FulfillmentConfigAccount"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<{ placeAndTakeSpotOrderTx: Transaction | VersionedTransaction; }>",
          "startLine": 7280,
          "endLine": 7302
        },
        {
          "name": "placeAndTakeSpotOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "fulfillmentConfig",
              "type": "SerumV3FulfillmentConfigAccount"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7304,
          "endLine": 7330
        },
        {
          "name": "getPlaceAndTakeSpotOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "fulfillmentConfig",
              "type": "SerumV3FulfillmentConfigAccount"
            },
            {
              "name": "makerInfo",
              "type": "MakerInfo"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 7332,
          "endLine": 7404
        },
        {
          "name": "placeAndMakeSpotOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "takerInfo",
              "type": "TakerInfo"
            },
            {
              "name": "fulfillmentConfig",
              "type": "SerumV3FulfillmentConfigAccount"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7406,
          "endLine": 7431
        },
        {
          "name": "getPlaceAndMakeSpotOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "OptionalOrderParams"
            },
            {
              "name": "takerInfo",
              "type": "TakerInfo"
            },
            {
              "name": "fulfillmentConfig",
              "type": "SerumV3FulfillmentConfigAccount"
            },
            {
              "name": "referrerInfo",
              "type": "ReferrerInfo"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 7433,
          "endLine": 7492
        },
        {
          "name": "closePosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7497,
          "endLine": 7524
        },
        {
          "name": "modifyPerpOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderId",
              "type": "number"
            },
            {
              "name": "newBaseAmount",
              "type": "BN"
            },
            {
              "name": "newLimitPrice",
              "type": "BN"
            },
            {
              "name": "newOraclePriceOffset",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7535,
          "endLine": 7547
        },
        {
          "name": "modifyPerpOrderByUserOrderId",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userOrderId",
              "type": "number"
            },
            {
              "name": "newBaseAmount",
              "type": "BN"
            },
            {
              "name": "newLimitPrice",
              "type": "BN"
            },
            {
              "name": "newOraclePriceOffset",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7558,
          "endLine": 7570
        },
        {
          "name": "modifyOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "{ orderId: number; newDirection?: PositionDirection; newBaseAmount?: BN; newLimitPrice?: BN; newOraclePriceOffset?: number; newTriggerPrice?: BN; newTriggerCondition?: OrderTriggerCondition; ... 7 more ...; policy?: number; }"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7590,
          "endLine": 7620
        },
        {
          "name": "getModifyOrderIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\t\torderId,\n\t\t\tnewDirection,\n\t\t\tnewBaseAmount,\n\t\t\tnewLimitPrice,\n\t\t\tnewOraclePriceOffset,\n\t\t\tnewTriggerPrice,\n\t\t\tnewTriggerCondition,\n\t\t\tauctionDuration,\n\t\t\tauctionStartPrice,\n\t\t\tauctionEndPrice,\n\t\t\treduceOnly,\n\t\t\tpostOnly,\n\t\t\tbitFlags,\n\t\t\tmaxTs,\n\t\t\tpolicy,\n\t\t}",
              "type": "{ orderId: number; newDirection?: PositionDirection; newBaseAmount?: BN; newLimitPrice?: BN; newOraclePriceOffset?: number; newTriggerPrice?: BN; newTriggerCondition?: OrderTriggerCondition; ... 7 more ...; policy?: number; }"
            },
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "overrides",
              "type": "{ user?: User; authority?: PublicKey; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 7628,
          "endLine": 7709
        },
        {
          "name": "modifyOrderByUserOrderId",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderParams",
              "type": "{ userOrderId: number; newDirection?: PositionDirection; newBaseAmount?: BN; newLimitPrice?: BN; newOraclePriceOffset?: number; newTriggerPrice?: BN; newTriggerCondition?: OrderTriggerCondition; ... 7 more ...; maxTs?: BN; }"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7729,
          "endLine": 7759
        },
        {
          "name": "getModifyOrderByUserIdIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\t\tuserOrderId,\n\t\t\tnewDirection,\n\t\t\tnewBaseAmount,\n\t\t\tnewLimitPrice,\n\t\t\tnewOraclePriceOffset,\n\t\t\tnewTriggerPrice,\n\t\t\tnewTriggerCondition,\n\t\t\tauctionDuration,\n\t\t\tauctionStartPrice,\n\t\t\tauctionEndPrice,\n\t\t\treduceOnly,\n\t\t\tpostOnly,\n\t\t\tbitFlags,\n\t\t\tmaxTs,\n\t\t\tpolicy,\n\t\t}",
              "type": "{ userOrderId: number; newDirection?: PositionDirection; newBaseAmount?: BN; newLimitPrice?: BN; newOraclePriceOffset?: number; newTriggerPrice?: BN; newTriggerCondition?: OrderTriggerCondition; ... 8 more ...; txParams?: TxParams; }"
            },
            {
              "name": "subAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 7761,
          "endLine": 7835
        },
        {
          "name": "settlePNLs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "users",
              "type": "{ settleeUserAccountPublicKey: PublicKey; settleeUserAccount: UserAccount; }[]"
            },
            {
              "name": "marketIndexes",
              "type": "number[]"
            },
            {
              "name": "opts",
              "type": "{ filterInvalidMarkets?: boolean; }"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7837,
          "endLine": 7888
        },
        {
          "name": "getSettlePNLsIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "users",
              "type": "{ settleeUserAccountPublicKey: PublicKey; settleeUserAccount: UserAccount; }[]"
            },
            {
              "name": "marketIndexes",
              "type": "number[]"
            },
            {
              "name": "revenueShareEscrowMap",
              "type": "RevenueShareEscrowMap"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 7890,
          "endLine": 7913
        },
        {
          "name": "settlePNL",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "settleeUserAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "settleeUserAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "optionalIxs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "revenueShareEscrowMap",
              "type": "RevenueShareEscrowMap"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 7915,
          "endLine": 7944
        },
        {
          "name": "settlePNLIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "settleeUserAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "settleeUserAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "revenueShareEscrowMap",
              "type": "RevenueShareEscrowMap"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 7946,
          "endLine": 8050
        },
        {
          "name": "settleMultiplePNLs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "settleeUserAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "settleeUserAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndexes",
              "type": "number[]"
            },
            {
              "name": "mode",
              "type": "SettlePnlMode"
            },
            {
              "name": "revenueShareEscrowMap",
              "type": "RevenueShareEscrowMap"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 8052,
          "endLine": 8076
        },
        {
          "name": "settleMultiplePNLsMultipleTxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "settleeUserAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "settleeUserAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndexes",
              "type": "number[]"
            },
            {
              "name": "mode",
              "type": "SettlePnlMode"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "optionalIxs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "revenueShareEscrowMap",
              "type": "RevenueShareEscrowMap"
            }
          ],
          "returns": "Promise<string[]>",
          "startLine": 8078,
          "endLine": 8137
        },
        {
          "name": "settleMultiplePNLsIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "settleeUserAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "settleeUserAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndexes",
              "type": "number[]"
            },
            {
              "name": "mode",
              "type": "SettlePnlMode"
            },
            {
              "name": "overrides",
              "type": "{ authority?: PublicKey; }"
            },
            {
              "name": "revenueShareEscrowMap",
              "type": "RevenueShareEscrowMap"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 8139,
          "endLine": 8257
        },
        {
          "name": "getSetUserStatusToBeingLiquidatedIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 8259,
          "endLine": 8274
        },
        {
          "name": "setUserStatusToBeingLiquidated",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 8276,
          "endLine": 8291
        },
        {
          "name": "liquidatePerp",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "maxBaseAssetAmount",
              "type": "BN"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 8293,
          "endLine": 8319
        },
        {
          "name": "getLiquidatePerpIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "maxBaseAssetAmount",
              "type": "BN"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 8321,
          "endLine": 8361
        },
        {
          "name": "liquidatePerpWithFill",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "makerInfos",
              "type": "MakerInfo[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 8363,
          "endLine": 8387
        },
        {
          "name": "getLiquidatePerpWithFillIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "makerInfos",
              "type": "MakerInfo[]"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 8389,
          "endLine": 8438
        },
        {
          "name": "liquidateSpot",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "assetMarketIndex",
              "type": "number"
            },
            {
              "name": "liabilityMarketIndex",
              "type": "number"
            },
            {
              "name": "maxLiabilityTransfer",
              "type": "BN"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 8440,
          "endLine": 8469
        },
        {
          "name": "getLiquidateSpotIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "assetMarketIndex",
              "type": "number"
            },
            {
              "name": "liabilityMarketIndex",
              "type": "number"
            },
            {
              "name": "maxLiabilityTransfer",
              "type": "BN"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 8471,
          "endLine": 8513
        },
        {
          "name": "getJupiterLiquidateSpotWithSwapIxV6",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tjupiterClient,\n\t\tliabilityMarketIndex,\n\t\tassetMarketIndex,\n\t\tswapAmount,\n\t\tassetTokenAccount,\n\t\tliabilityTokenAccount,\n\t\tslippageBps,\n\t\tswapMode,\n\t\tonlyDirectRoutes,\n\t\tquote,\n\t\tuserAccount,\n\t\tuserAccountPublicKey,\n\t\tuserStatsAccountPublicKey,\n\t\tliquidatorSubAccountId,\n\t\tmaxAccounts,\n\t}",
              "type": "{ jupiterClient: JupiterClient; liabilityMarketIndex: number; assetMarketIndex: number; swapAmount: BN; assetTokenAccount?: PublicKey; liabilityTokenAccount?: PublicKey; ... 8 more ...; maxAccounts?: number; }"
            }
          ],
          "returns": "Promise<{ ixs: TransactionInstruction[]; lookupTables: AddressLookupTableAccount[]; }>",
          "startLine": 8515,
          "endLine": 8650
        },
        {
          "name": "getLiquidateSpotWithSwapIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tliabilityMarketIndex,\n\t\tassetMarketIndex,\n\t\tswapAmount: swapAmount,\n\t\tassetTokenAccount,\n\t\tliabilityTokenAccount,\n\t\tuserAccount,\n\t\tuserAccountPublicKey,\n\t\tuserStatsAccountPublicKey,\n\t\tliquidatorSubAccountId,\n\t}",
              "type": "{ liabilityMarketIndex: number; assetMarketIndex: number; swapAmount: BN; assetTokenAccount: PublicKey; liabilityTokenAccount: PublicKey; userAccount: UserAccount; userAccountPublicKey: PublicKey; userStatsAccountPublicKey: PublicKey; liquidatorSubAccountId?: number; }"
            }
          ],
          "returns": "Promise<{ beginSwapIx: TransactionInstruction; endSwapIx: TransactionInstruction; }>",
          "startLine": 8664,
          "endLine": 8793
        },
        {
          "name": "getInsuranceFundSwapIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tinMarketIndex,\n\t\toutMarketIndex,\n\t\tamountIn,\n\t\tinTokenAccount,\n\t\toutTokenAccount,\n\t}",
              "type": "{ inMarketIndex: number; outMarketIndex: number; amountIn: BN; inTokenAccount: PublicKey; outTokenAccount: PublicKey; }"
            }
          ],
          "returns": "Promise<{ beginSwapIx: TransactionInstruction; endSwapIx: TransactionInstruction; }>",
          "startLine": 8795,
          "endLine": 8892
        },
        {
          "name": "liquidateBorrowForPerpPnl",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "liabilityMarketIndex",
              "type": "number"
            },
            {
              "name": "maxLiabilityTransfer",
              "type": "BN"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 8894,
          "endLine": 8923
        },
        {
          "name": "getLiquidateBorrowForPerpPnlIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "liabilityMarketIndex",
              "type": "number"
            },
            {
              "name": "maxLiabilityTransfer",
              "type": "BN"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 8925,
          "endLine": 8967
        },
        {
          "name": "liquidatePerpPnlForDeposit",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "assetMarketIndex",
              "type": "number"
            },
            {
              "name": "maxPnlTransfer",
              "type": "BN"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 8969,
          "endLine": 8998
        },
        {
          "name": "getLiquidatePerpPnlForDepositIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "assetMarketIndex",
              "type": "number"
            },
            {
              "name": "maxPnlTransfer",
              "type": "BN"
            },
            {
              "name": "limitPrice",
              "type": "BN"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9000,
          "endLine": 9042
        },
        {
          "name": "resolvePerpBankruptcy",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9044,
          "endLine": 9065
        },
        {
          "name": "getResolvePerpBankruptcyIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9067,
          "endLine": 9110
        },
        {
          "name": "resolveSpotBankruptcy",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9112,
          "endLine": 9133
        },
        {
          "name": "getResolveSpotBankruptcyIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "liquidatorSubAccountId",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9135,
          "endLine": 9182
        },
        {
          "name": "updateFundingRate",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "oracle",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9184,
          "endLine": 9198
        },
        {
          "name": "getUpdateFundingRateIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "oracle",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9200,
          "endLine": 9215
        },
        {
          "name": "updatePrelaunchOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9217,
          "endLine": 9230
        },
        {
          "name": "getUpdatePrelaunchOracleIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9232,
          "endLine": 9248
        },
        {
          "name": "updatePerpBidAskTwap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "makers",
              "type": "[PublicKey, PublicKey][]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9250,
          "endLine": 9264
        },
        {
          "name": "getUpdatePerpBidAskTwapIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "makers",
              "type": "[PublicKey, PublicKey][]"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9266,
          "endLine": 9296
        },
        {
          "name": "settleFundingPayment",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9298,
          "endLine": 9311
        },
        {
          "name": "getSettleFundingPaymentIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9313,
          "endLine": 9339
        },
        {
          "name": "triggerEvent",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "eventName",
              "type": "keyof DriftClientAccountEvents"
            },
            {
              "name": "data",
              "type": "any"
            }
          ],
          "returns": "void",
          "startLine": 9341,
          "endLine": 9343
        },
        {
          "name": "getOracleDataForPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 9345,
          "endLine": 9349
        },
        {
          "name": "getMMOracleDataForPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "MMOraclePriceData",
          "startLine": 9351,
          "endLine": 9412
        },
        {
          "name": "getOracleDataForSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 9414,
          "endLine": 9418
        },
        {
          "name": "initializeInsuranceFundStake",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9420,
          "endLine": 9433
        },
        {
          "name": "getInitializeInsuranceFundStakeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9435,
          "endLine": 9464
        },
        {
          "name": "getAddInsuranceFundStakeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "collateralAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9466,
          "endLine": 9512
        },
        {
          "name": "addInsuranceFundStake",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarketIndex,\n\t\tamount,\n\t\tcollateralAccountPublicKey,\n\t\tinitializeStakeAccount,\n\t\tfromSubaccount,\n\t\ttxParams,\n\t}",
              "type": "{ marketIndex: number; amount: BN; collateralAccountPublicKey: PublicKey; initializeStakeAccount?: boolean; fromSubaccount?: boolean; txParams?: TxParams; }"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9517,
          "endLine": 9562
        },
        {
          "name": "getAddInsuranceFundStakeIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarketIndex,\n\t\tamount,\n\t\tcollateralAccountPublicKey,\n\t\tinitializeStakeAccount,\n\t\tfromSubaccount,\n\t}",
              "type": "{ marketIndex: number; amount: BN; collateralAccountPublicKey: PublicKey; initializeStakeAccount?: boolean; fromSubaccount?: boolean; }"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 9567,
          "endLine": 9680
        },
        {
          "name": "requestRemoveInsuranceFundStake",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9682,
          "endLine": 9716
        },
        {
          "name": "cancelRequestRemoveInsuranceFundStake",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9718,
          "endLine": 9751
        },
        {
          "name": "removeInsuranceFundStake",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "collateralAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9753,
          "endLine": 9850
        },
        {
          "name": "updateUserQuoteAssetInsuranceStake",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9852,
          "endLine": 9862
        },
        {
          "name": "getUpdateUserQuoteAssetInsuranceStakeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9864,
          "endLine": 9891
        },
        {
          "name": "updateUserGovTokenInsuranceStake",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9893,
          "endLine": 9901
        },
        {
          "name": "getUpdateUserGovTokenInsuranceStakeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9903,
          "endLine": 9930
        },
        {
          "name": "settleRevenueToInsuranceFund",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9932,
          "endLine": 9942
        },
        {
          "name": "getSettleRevenueToInsuranceFundIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9944,
          "endLine": 9974
        },
        {
          "name": "resolvePerpPnlDeficit",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 9976,
          "endLine": 9990
        },
        {
          "name": "getResolvePerpPnlDeficitIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "perpMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 9992,
          "endLine": 10020
        },
        {
          "name": "getDepositIntoSpotMarketRevenuePoolIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "userTokenAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 10022,
          "endLine": 10054
        },
        {
          "name": "depositIntoSpotMarketRevenuePool",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "amount",
              "type": "BN"
            },
            {
              "name": "userTokenAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10063,
          "endLine": 10077
        },
        {
          "name": "getPerpMarketExtendedInfo",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "PerpMarketExtendedInfo",
          "startLine": 10079,
          "endLine": 10102
        },
        {
          "name": "getMarketFees",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "user",
              "type": "User"
            },
            {
              "name": "enteringHighLeverageMode",
              "type": "boolean"
            }
          ],
          "returns": "{ takerFee: number; makerFee: number; }",
          "startLine": 10110,
          "endLine": 10152
        },
        {
          "name": "getMarketIndexAndType",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "returns": "{ marketIndex: number; marketType: MarketType; }",
          "startLine": 10160,
          "endLine": 10183
        },
        {
          "name": "getReceiverProgram",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Program<PythSolanaReceiver>",
          "startLine": 10185,
          "endLine": 10194
        },
        {
          "name": "getSwitchboardOnDemandProgram",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<Program<Idl>>",
          "startLine": 10196,
          "endLine": 10203
        },
        {
          "name": "postPythPullOracleUpdateAtomic",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "vaaString",
              "type": "string"
            },
            {
              "name": "feedId",
              "type": "string"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10205,
          "endLine": 10217
        },
        {
          "name": "postMultiPythPullOracleUpdatesAtomic",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "vaaString",
              "type": "string"
            },
            {
              "name": "feedIds",
              "type": "string[]"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10219,
          "endLine": 10231
        },
        {
          "name": "getPostPythPullOracleUpdateAtomicIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "vaaString",
              "type": "string"
            },
            {
              "name": "feedIds",
              "type": "string | string[]"
            },
            {
              "name": "numSignatures",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 10233,
          "endLine": 10305
        },
        {
          "name": "getSinglePostPythPullOracleAtomicIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "params",
              "type": "{ vaa: Buffer<ArrayBufferLike>; merklePriceUpdate: { message: Buffer<ArrayBufferLike>; proof: number[][]; }; }"
            },
            {
              "name": "feedId",
              "type": "string"
            },
            {
              "name": "guardianSet",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 10307,
          "endLine": 10341
        },
        {
          "name": "updatePythPullOracle",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "vaaString",
              "type": "string"
            },
            {
              "name": "feedId",
              "type": "string"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10343,
          "endLine": 10382
        },
        {
          "name": "getUpdatePythPullOracleIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "params",
              "type": "{ merklePriceUpdate: { message: Buffer<ArrayBufferLike>; proof: number[][]; }; }"
            },
            {
              "name": "feedId",
              "type": "string"
            },
            {
              "name": "encodedVaaAddress",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 10384,
          "endLine": 10417
        },
        {
          "name": "postPythLazerOracleUpdate",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feedIds",
              "type": "number[]"
            },
            {
              "name": "pythMessageHex",
              "type": "string"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10419,
          "endLine": 10432
        },
        {
          "name": "getPostPythLazerOracleUpdateIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feedIds",
              "type": "number[]"
            },
            {
              "name": "pythMessageHex",
              "type": "string"
            },
            {
              "name": "precedingIxs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "overrideCustomIxIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 10434,
          "endLine": 10468
        },
        {
          "name": "getPostManySwitchboardOnDemandUpdatesAtomicIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feeds",
              "type": "PublicKey[]"
            },
            {
              "name": "recentSlothash",
              "type": "Slothash"
            },
            {
              "name": "numSignatures",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 10470,
          "endLine": 10490
        },
        {
          "name": "getPostSwitchboardOnDemandUpdateAtomicIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feed",
              "type": "PublicKey"
            },
            {
              "name": "recentSlothash",
              "type": "Slothash"
            },
            {
              "name": "numSignatures",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 10493,
          "endLine": 10521
        },
        {
          "name": "postSwitchboardOnDemandUpdate",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "feed",
              "type": "PublicKey"
            },
            {
              "name": "recentSlothash",
              "type": "Slothash"
            },
            {
              "name": "numSignatures",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10523,
          "endLine": 10549
        },
        {
          "name": "getBuildEncodedVaaIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "vaa",
              "type": "Buffer<ArrayBufferLike>"
            },
            {
              "name": "guardianSet",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<[TransactionInstruction[], Keypair]>",
          "startLine": 10551,
          "endLine": 10620
        },
        {
          "name": "enableUserHighLeverageMode",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10622,
          "endLine": 10635
        },
        {
          "name": "getEnableHighLeverageModeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "depositToTradeArgs",
              "type": "{ isMakingNewAccount: boolean; depositMarketIndex: number; orderMarketIndex: number; }"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 10637,
          "endLine": 10678
        },
        {
          "name": "disableUserHighLeverageMode",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "user",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10680,
          "endLine": 10694
        },
        {
          "name": "getDisableHighLeverageModeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "user",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "maintenance",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 10696,
          "endLine": 10723
        },
        {
          "name": "fetchHighLeverageModeConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<HighLeverageModeConfig>",
          "startLine": 10725,
          "endLine": 10730
        },
        {
          "name": "fetchProtectedMakerModeConfig",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<ProtectedMakerModeConfig>",
          "startLine": 10732,
          "endLine": 10737
        },
        {
          "name": "updateUserProtectedMakerOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "protectedOrders",
              "type": "boolean"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10739,
          "endLine": 10758
        },
        {
          "name": "getUpdateUserProtectedMakerOrdersIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "subAccountId",
              "type": "number"
            },
            {
              "name": "protectedOrders",
              "type": "boolean"
            },
            {
              "name": "authority",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 10760,
          "endLine": 10785
        },
        {
          "name": "getPauseSpotMarketDepositWithdrawIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 10787,
          "endLine": 10799
        },
        {
          "name": "pauseSpotMarketDepositWithdraw",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10801,
          "endLine": 10814
        },
        {
          "name": "updateMmOracleNative",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "oraclePrice",
              "type": "BN"
            },
            {
              "name": "oracleSequenceId",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10816,
          "endLine": 10834
        },
        {
          "name": "getUpdateMmOracleNativeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "oraclePrice",
              "type": "BN"
            },
            {
              "name": "oracleSequenceId",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 10836,
          "endLine": 10874
        },
        {
          "name": "updateAmmSpreadAdjustmentNative",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "ammSpreadAdjustment",
              "type": "number"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 10876,
          "endLine": 10892
        },
        {
          "name": "getUpdateAmmSpreadAdjustmentNativeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "ammSpreadAdjustment",
              "type": "number"
            }
          ],
          "returns": "TransactionInstruction",
          "startLine": 10894,
          "endLine": 10920
        },
        {
          "name": "handleSignedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "signedTxs",
              "type": "SignedTxData[]"
            }
          ],
          "returns": "void",
          "startLine": 10922,
          "endLine": 10926
        },
        {
          "name": "handlePreSignedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 10928,
          "endLine": 10932
        },
        {
          "name": "isVersionedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction | VersionedTransaction"
            }
          ],
          "returns": "boolean",
          "startLine": 10934,
          "endLine": 10938
        },
        {
          "name": "sendTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction | VersionedTransaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            },
            {
              "name": "preSigned",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 10949,
          "endLine": 10971
        },
        {
          "name": "buildTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "instructions",
              "type": "TransactionInstruction | TransactionInstruction[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "txVersion",
              "type": "TransactionVersion"
            },
            {
              "name": "lookupTables",
              "type": "AddressLookupTableAccount[]"
            },
            {
              "name": "forceVersionedTransaction",
              "type": "boolean"
            },
            {
              "name": "recentBlockhash",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            },
            {
              "name": "optionalIxs",
              "type": "TransactionInstruction[]"
            }
          ],
          "returns": "Promise<Transaction | VersionedTransaction>",
          "startLine": 10973,
          "endLine": 10995
        },
        {
          "name": "buildBulkTransactions",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "instructions",
              "type": "(TransactionInstruction | TransactionInstruction[])[]"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "txVersion",
              "type": "TransactionVersion"
            },
            {
              "name": "lookupTables",
              "type": "AddressLookupTableAccount[]"
            },
            {
              "name": "forceVersionedTransaction",
              "type": "boolean"
            }
          ],
          "returns": "Promise<(Transaction | VersionedTransaction)[]>",
          "startLine": 10997,
          "endLine": 11015
        },
        {
          "name": "buildTransactionsMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "instructionsMap",
              "type": "Record<string, TransactionInstruction | TransactionInstruction[]>"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "txVersion",
              "type": "TransactionVersion"
            },
            {
              "name": "lookupTables",
              "type": "AddressLookupTableAccount[]"
            },
            {
              "name": "forceVersionedTransaction",
              "type": "boolean"
            }
          ],
          "returns": "Promise<MappedRecord<Record<string, TransactionInstruction | TransactionInstruction[]>, Transaction | VersionedTransaction>>",
          "startLine": 11017,
          "endLine": 11038
        },
        {
          "name": "buildAndSignTransactionsMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "instructionsMap",
              "type": "Record<string, TransactionInstruction | TransactionInstruction[]>"
            },
            {
              "name": "txParams",
              "type": "TxParams"
            },
            {
              "name": "txVersion",
              "type": "TransactionVersion"
            },
            {
              "name": "lookupTables",
              "type": "AddressLookupTableAccount[]"
            },
            {
              "name": "forceVersionedTransaction",
              "type": "boolean"
            }
          ],
          "returns": "Promise<{ signedTxMap: Record<string, Transaction>; signedTxData: SignedTxData[]; } | { signedTxMap: MappedRecord<Record<string, TransactionInstruction | TransactionInstruction[]>, Transaction | VersionedTransaction>; signedTxData: SignedTxData[]; }>",
          "startLine": 11040,
          "endLine": 11061
        }
      ],
      "startLine": 221,
      "endLine": 11062
    },
    {
      "file": "protocol-v2/sdk/src/events/eventList.ts",
      "name": "EventList",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "eventType",
              "type": "Type"
            },
            {
              "name": "maxSize",
              "type": "number"
            },
            {
              "name": "sortFn",
              "type": "SortFn"
            },
            {
              "name": "orderDirection",
              "type": "EventSubscriptionOrderDirection"
            }
          ],
          "startLine": 21,
          "endLine": 26
        },
        {
          "name": "insert",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "event",
              "type": "EventMap[Type]"
            }
          ],
          "returns": "void",
          "startLine": 28,
          "endLine": 67
        },
        {
          "name": "detach",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 69,
          "endLine": 84
        },
        {
          "name": "toArray",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "EventMap[Type][]",
          "startLine": 86,
          "endLine": 88
        },
        {
          "name": "[Symbol.iterator]",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Generator<EventMap[Type], void, unknown>",
          "startLine": 90,
          "endLine": 96
        }
      ],
      "startLine": 16,
      "endLine": 97
    },
    {
      "file": "protocol-v2/sdk/src/events/eventList.ts",
      "name": "Node",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "event",
              "type": "Event"
            },
            {
              "name": "next",
              "type": "Node<Type, Event>"
            },
            {
              "name": "prev",
              "type": "Node<Type, Event>"
            }
          ],
          "startLine": 9,
          "endLine": 13
        }
      ],
      "startLine": 8,
      "endLine": 14
    },
    {
      "file": "protocol-v2/sdk/src/events/eventsServerLogProvider.ts",
      "name": "EventsServerLogProvider",
      "abstract": false,
      "implements": [
        "LogProvider"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "url",
              "type": "string"
            },
            {
              "name": "eventTypes",
              "type": "(keyof EventMap)[]"
            },
            {
              "name": "userAccount",
              "type": "string"
            }
          ],
          "startLine": 26,
          "endLine": 32
        },
        {
          "name": "isSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 34,
          "endLine": 36
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "callback",
              "type": "logProviderCallback"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 38,
          "endLine": 108
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "external",
              "type": "boolean"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 110,
          "endLine": 126
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 128,
          "endLine": 151
        }
      ],
      "startLine": 16,
      "endLine": 152
    },
    {
      "file": "protocol-v2/sdk/src/events/eventSubscriber.ts",
      "name": "EventSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            },
            {
              "name": "options",
              "type": "EventSubscriptionOptions"
            }
          ],
          "startLine": 41,
          "endLine": 54
        },
        {
          "name": "currentProviderType",
          "kind": "get",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "LogProviderType",
          "startLine": 56,
          "endLine": 58
        },
        {
          "name": "initializeLogProvider",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "subscribe",
              "type": "boolean"
            }
          ],
          "returns": "void",
          "startLine": 60,
          "endLine": 118
        },
        {
          "name": "populateInitialEventListMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 120,
          "endLine": 132
        },
        {
          "name": "updateFallbackProviderType",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "reconnectAttempts",
              "type": "number"
            },
            {
              "name": "maxReconnectAttempts",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 138,
          "endLine": 159
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 161,
          "endLine": 216
        },
        {
          "name": "handleTxLogs",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "txSig",
              "type": "string"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "logs",
              "type": "string[]"
            },
            {
              "name": "mostRecentBlockTime",
              "type": "number"
            },
            {
              "name": "fromEventsServer",
              "type": "boolean"
            },
            {
              "name": "txSigIndex",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 218,
          "endLine": 265
        },
        {
          "name": "fetchPreviousTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "fetchMax",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 267,
          "endLine": 296
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 298,
          "endLine": 305
        },
        {
          "name": "parseEventsFromLogs",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "txSig",
              "type": "string"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "logs",
              "type": "string[]"
            },
            {
              "name": "txSigIndex",
              "type": "number"
            }
          ],
          "returns": "WrappedEvents",
          "startLine": 307,
          "endLine": 331
        },
        {
          "name": "awaitTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "txSig",
              "type": "string"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 333,
          "endLine": 347
        },
        {
          "name": "getEventList",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "eventType",
              "type": "Type"
            }
          ],
          "returns": "EventList<Type>",
          "startLine": 349,
          "endLine": 353
        },
        {
          "name": "getEventsArray",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "eventType",
              "type": "Type"
            }
          ],
          "returns": "EventMap[Type][]",
          "startLine": 361,
          "endLine": 365
        },
        {
          "name": "getEventsByTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "txSig",
              "type": "string"
            }
          ],
          "returns": "WrappedEvents",
          "startLine": 367,
          "endLine": 369
        }
      ],
      "startLine": 28,
      "endLine": 370
    },
    {
      "file": "protocol-v2/sdk/src/events/fetchLogs.ts",
      "name": "LogParser",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "program",
              "type": "Program<Idl>"
            }
          ],
          "startLine": 140,
          "endLine": 142
        },
        {
          "name": "parseEventsFromTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "transaction",
              "type": "TransactionResponse"
            }
          ],
          "returns": "WrappedEvents",
          "startLine": 144,
          "endLine": 150
        },
        {
          "name": "parseEventsFromLogs",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "event",
              "type": "Log"
            }
          ],
          "returns": "WrappedEvents",
          "startLine": 152,
          "endLine": 168
        }
      ],
      "startLine": 137,
      "endLine": 169
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "ExecutionContext",
      "abstract": false,
      "methods": [
        {
          "name": "program",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "string",
          "startLine": 120,
          "endLine": 125
        },
        {
          "name": "push",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "newProgram",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 127,
          "endLine": 129
        },
        {
          "name": "pop",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 131,
          "endLine": 136
        },
        {
          "name": "ix",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "string",
          "startLine": 138,
          "endLine": 143
        },
        {
          "name": "pushIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "newIx",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 145,
          "endLine": 147
        },
        {
          "name": "popIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 149,
          "endLine": 151
        }
      ],
      "startLine": 116,
      "endLine": 152
    },
    {
      "file": "protocol-v2/sdk/src/events/pollingLogProvider.ts",
      "name": "PollingLogProvider",
      "abstract": false,
      "implements": [
        "LogProvider"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "address",
              "type": "PublicKey"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            },
            {
              "name": "frequency",
              "type": "number"
            },
            {
              "name": "batchSize",
              "type": "number"
            }
          ],
          "startLine": 18,
          "endLine": 26
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "callback",
              "type": "logProviderCallback"
            },
            {
              "name": "skipHistory",
              "type": "boolean"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 28,
          "endLine": 76
        },
        {
          "name": "isSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 78,
          "endLine": 80
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 82,
          "endLine": 88
        }
      ],
      "startLine": 11,
      "endLine": 89
    },
    {
      "file": "protocol-v2/sdk/src/events/txEventCache.ts",
      "name": "Node",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "value",
              "type": "WrappedEvent<keyof EventMap>[]"
            },
            {
              "name": "next",
              "type": "Node"
            },
            {
              "name": "prev",
              "type": "Node"
            }
          ],
          "startLine": 4,
          "endLine": 9
        }
      ],
      "startLine": 3,
      "endLine": 10
    },
    {
      "file": "protocol-v2/sdk/src/events/txEventCache.ts",
      "name": "TxEventCache",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "maxTx",
              "type": "number"
            }
          ],
          "startLine": 19,
          "endLine": 19
        },
        {
          "name": "add",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "events",
              "type": "WrappedEvent<keyof EventMap>[]"
            }
          ],
          "returns": "void",
          "startLine": 21,
          "endLine": 44
        },
        {
          "name": "has",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "returns": "boolean",
          "startLine": 46,
          "endLine": 48
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "returns": "WrappedEvent<keyof EventMap>[]",
          "startLine": 50,
          "endLine": 52
        },
        {
          "name": "detach",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "node",
              "type": "Node"
            }
          ],
          "returns": "void",
          "startLine": 54,
          "endLine": 66
        },
        {
          "name": "clear",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 68,
          "endLine": 73
        }
      ],
      "startLine": 13,
      "endLine": 74
    },
    {
      "file": "protocol-v2/sdk/src/events/webSocketLogProvider.ts",
      "name": "WebSocketLogProvider",
      "abstract": false,
      "implements": [
        "LogProvider"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "address",
              "type": "PublicKey"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            },
            {
              "name": "resubTimeoutMs",
              "type": "number"
            }
          ],
          "startLine": 20,
          "endLine": 29
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "callback",
              "type": "logProviderCallback"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 31,
          "endLine": 49
        },
        {
          "name": "setSubscription",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "callback",
              "type": "logProviderCallback"
            }
          ],
          "returns": "void",
          "startLine": 51,
          "endLine": 71
        },
        {
          "name": "isSubscribed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 73,
          "endLine": 75
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "external",
              "type": "boolean"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 77,
          "endLine": 98
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 100,
          "endLine": 120
        }
      ],
      "startLine": 11,
      "endLine": 121
    },
    {
      "file": "protocol-v2/sdk/src/factory/bigNum.ts",
      "name": "BigNum",
      "abstract": false,
      "methods": [
        {
          "name": "setLocale",
          "kind": "method",
          "isStatic": true,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "locale",
              "type": "string"
            }
          ],
          "returns": "void",
          "startLine": 12,
          "endLine": 15
        },
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "val",
              "type": "any"
            },
            {
              "name": "precisionVal",
              "type": "any"
            }
          ],
          "startLine": 17,
          "endLine": 23
        },
        {
          "name": "bigNumFromParam",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "bn",
              "type": "any"
            }
          ],
          "returns": "any",
          "startLine": 25,
          "endLine": 27
        },
        {
          "name": "add",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "BigNum"
            }
          ],
          "returns": "BigNum",
          "startLine": 29,
          "endLine": 33
        },
        {
          "name": "sub",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "BigNum"
            }
          ],
          "returns": "BigNum",
          "startLine": 35,
          "endLine": 39
        },
        {
          "name": "mul",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "any"
            }
          ],
          "returns": "BigNum",
          "startLine": 41,
          "endLine": 48
        },
        {
          "name": "scalarMul",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "any"
            }
          ],
          "returns": "BigNum",
          "startLine": 55,
          "endLine": 62
        },
        {
          "name": "div",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "any"
            }
          ],
          "returns": "BigNum",
          "startLine": 64,
          "endLine": 68
        },
        {
          "name": "shift",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "exponent",
              "type": "any"
            },
            {
              "name": "skipAdjustingPrecision",
              "type": "boolean"
            }
          ],
          "returns": "BigNum",
          "startLine": 76,
          "endLine": 85
        },
        {
          "name": "shiftTo",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "targetPrecision",
              "type": "BN"
            }
          ],
          "returns": "BigNum",
          "startLine": 92,
          "endLine": 94
        },
        {
          "name": "scale",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "numerator",
              "type": "any"
            },
            {
              "name": "denominator",
              "type": "any"
            }
          ],
          "returns": "BigNum",
          "startLine": 102,
          "endLine": 104
        },
        {
          "name": "toPercentage",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "denominator",
              "type": "BigNum"
            },
            {
              "name": "precision",
              "type": "number"
            }
          ],
          "returns": "string",
          "startLine": 106,
          "endLine": 111
        },
        {
          "name": "gt",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "any"
            },
            {
              "name": "ignorePrecision",
              "type": "boolean"
            }
          ],
          "returns": "boolean",
          "startLine": 113,
          "endLine": 124
        },
        {
          "name": "lt",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "any"
            },
            {
              "name": "ignorePrecision",
              "type": "boolean"
            }
          ],
          "returns": "boolean",
          "startLine": 126,
          "endLine": 137
        },
        {
          "name": "gte",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "any"
            },
            {
              "name": "ignorePrecision",
              "type": "boolean"
            }
          ],
          "returns": "boolean",
          "startLine": 139,
          "endLine": 150
        },
        {
          "name": "lte",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "any"
            },
            {
              "name": "ignorePrecision",
              "type": "boolean"
            }
          ],
          "returns": "boolean",
          "startLine": 152,
          "endLine": 163
        },
        {
          "name": "eq",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "bn",
              "type": "any"
            },
            {
              "name": "ignorePrecision",
              "type": "boolean"
            }
          ],
          "returns": "boolean",
          "startLine": 165,
          "endLine": 176
        },
        {
          "name": "eqZero",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 178,
          "endLine": 180
        },
        {
          "name": "gtZero",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 182,
          "endLine": 184
        },
        {
          "name": "ltZero",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 186,
          "endLine": 188
        },
        {
          "name": "gteZero",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 190,
          "endLine": 192
        },
        {
          "name": "lteZero",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 194,
          "endLine": 196
        },
        {
          "name": "abs",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "BigNum",
          "startLine": 198,
          "endLine": 200
        },
        {
          "name": "neg",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "BigNum",
          "startLine": 202,
          "endLine": 204
        },
        {
          "name": "print",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "string",
          "startLine": 213,
          "endLine": 249
        },
        {
          "name": "prettyPrint",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "useTradePrecision",
              "type": "boolean"
            },
            {
              "name": "precisionOverride",
              "type": "number"
            },
            {
              "name": "decimalOverride",
              "type": "number"
            }
          ],
          "returns": "string",
          "startLine": 251,
          "endLine": 298
        },
        {
          "name": "printShort",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "useTradePrecision",
              "type": "boolean"
            },
            {
              "name": "precisionOverride",
              "type": "number"
            }
          ],
          "returns": "string",
          "startLine": 304,
          "endLine": 317
        },
        {
          "name": "debug",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 319,
          "endLine": 323
        },
        {
          "name": "toFixed",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "fixedPrecision",
              "type": "number"
            },
            {
              "name": "rounded",
              "type": "boolean"
            }
          ],
          "returns": "string",
          "startLine": 330,
          "endLine": 347
        },
        {
          "name": "getZeroes",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "count",
              "type": "number"
            }
          ],
          "returns": "string",
          "startLine": 349,
          "endLine": 351
        },
        {
          "name": "toRounded",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "roundingPrecision",
              "type": "number"
            }
          ],
          "returns": "BigNum",
          "startLine": 353,
          "endLine": 385
        },
        {
          "name": "toPrecision",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "fixedPrecision",
              "type": "number"
            },
            {
              "name": "trailingZeroes",
              "type": "boolean"
            },
            {
              "name": "rounded",
              "type": "boolean"
            }
          ],
          "returns": "string",
          "startLine": 392,
          "endLine": 508
        },
        {
          "name": "toTradePrecision",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "rounded",
              "type": "boolean"
            }
          ],
          "returns": "string",
          "startLine": 510,
          "endLine": 512
        },
        {
          "name": "toNotional",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "useTradePrecision",
              "type": "boolean"
            },
            {
              "name": "precisionOverride",
              "type": "number"
            },
            {
              "name": "decimalOverride",
              "type": "number"
            }
          ],
          "returns": "string",
          "startLine": 520,
          "endLine": 547
        },
        {
          "name": "toMillified",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "precision",
              "type": "number"
            },
            {
              "name": "rounded",
              "type": "boolean"
            },
            {
              "name": "type",
              "type": "\"financial\" | \"scientific\""
            }
          ],
          "returns": "string",
          "startLine": 549,
          "endLine": 607
        },
        {
          "name": "toJSON",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "{ val: any; precision: any; }",
          "startLine": 609,
          "endLine": 614
        },
        {
          "name": "isNeg",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 616,
          "endLine": 618
        },
        {
          "name": "isPos",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 620,
          "endLine": 622
        },
        {
          "name": "toNum",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 628,
          "endLine": 644
        },
        {
          "name": "fromJSON",
          "kind": "method",
          "isStatic": true,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "json",
              "type": "{ val: string; precision: string; }"
            }
          ],
          "returns": "BigNum",
          "startLine": 646,
          "endLine": 648
        },
        {
          "name": "from",
          "kind": "method",
          "isStatic": true,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "val",
              "type": "any"
            },
            {
              "name": "precision",
              "type": "any"
            }
          ],
          "returns": "BigNum",
          "startLine": 656,
          "endLine": 665
        },
        {
          "name": "fromPrint",
          "kind": "method",
          "isStatic": true,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "val",
              "type": "string"
            },
            {
              "name": "precisionShift",
              "type": "BN"
            }
          ],
          "returns": "BigNum",
          "startLine": 673,
          "endLine": 696
        },
        {
          "name": "max",
          "kind": "method",
          "isStatic": true,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "a",
              "type": "BigNum"
            },
            {
              "name": "b",
              "type": "BigNum"
            }
          ],
          "returns": "BigNum",
          "startLine": 698,
          "endLine": 700
        },
        {
          "name": "min",
          "kind": "method",
          "isStatic": true,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "a",
              "type": "BigNum"
            },
            {
              "name": "b",
              "type": "BigNum"
            }
          ],
          "returns": "BigNum",
          "startLine": 702,
          "endLine": 704
        },
        {
          "name": "zero",
          "kind": "method",
          "isStatic": true,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "precision",
              "type": "any"
            }
          ],
          "returns": "BigNum",
          "startLine": 706,
          "endLine": 708
        }
      ],
      "startLine": 5,
      "endLine": 709
    },
    {
      "file": "protocol-v2/sdk/src/indicative-quotes/indicativeQuotesSender.ts",
      "name": "IndicativeQuotesSender",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "endpoint",
              "type": "string"
            },
            {
              "name": "keypair",
              "type": "Keypair"
            }
          ],
          "startLine": 30,
          "endLine": 33
        },
        {
          "name": "generateChallengeResponse",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "nonce",
              "type": "string"
            }
          ],
          "returns": "string",
          "startLine": 35,
          "endLine": 40
        },
        {
          "name": "handleAuthMessage",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "message",
              "type": "any"
            }
          ],
          "returns": "void",
          "startLine": 42,
          "endLine": 59
        },
        {
          "name": "connect",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 61,
          "endLine": 151
        },
        {
          "name": "startHeartbeatTimer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 153,
          "endLine": 161
        },
        {
          "name": "setQuote",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "newQuotes",
              "type": "Quote | Quote[]"
            }
          ],
          "returns": "void",
          "startLine": 163,
          "endLine": 194
        },
        {
          "name": "reconnect",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 196,
          "endLine": 218
        }
      ],
      "startLine": 19,
      "endLine": 219
    },
    {
      "file": "protocol-v2/sdk/src/jupiter/jupiterClient.ts",
      "name": "JupiterClient",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{ connection, url }",
              "type": "{ connection: Connection; url?: string; }"
            }
          ],
          "startLine": 235,
          "endLine": 238
        },
        {
          "name": "getQuote",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tinputMint,\n\t\toutputMint,\n\t\tamount,\n\t\tmaxAccounts = 50, // 50 is an estimated amount with buffer\n\t\tslippageBps = 50,\n\t\tswapMode = 'ExactIn',\n\t\tonlyDirectRoutes = false,\n\t\texcludeDexes,\n\t\tautoSlippage = false,\n\t\tmaxAutoSlippageBps,\n\t\tusdEstimate,\n\t}",
              "type": "{ inputMint: PublicKey; outputMint: PublicKey; amount: BN; maxAccounts?: number; slippageBps?: number; swapMode?: SwapMode; onlyDirectRoutes?: boolean; excludeDexes?: string[]; autoSlippage?: boolean; maxAutoSlippageBps?: number; usdEstimate?: number; }"
            }
          ],
          "returns": "Promise<QuoteResponse>",
          "startLine": 249,
          "endLine": 300
        },
        {
          "name": "getSwap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tquote,\n\t\tuserPublicKey,\n\t\tslippageBps = 50,\n\t}",
              "type": "{ quote: QuoteResponse; userPublicKey: PublicKey; slippageBps?: number; }"
            }
          ],
          "returns": "Promise<VersionedTransaction>",
          "startLine": 308,
          "endLine": 355
        },
        {
          "name": "getTransactionMessageAndLookupTables",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\ttransaction,\n\t}",
              "type": "{ transaction: VersionedTransaction; }"
            }
          ],
          "returns": "Promise<{ transactionMessage: TransactionMessage; lookupTables: AddressLookupTableAccount[]; }>",
          "startLine": 361,
          "endLine": 386
        },
        {
          "name": "getLookupTable",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "accountKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<AddressLookupTableAccount>",
          "startLine": 388,
          "endLine": 396
        },
        {
          "name": "getJupiterInstructions",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\ttransactionMessage,\n\t\tinputMint,\n\t\toutputMint,\n\t}",
              "type": "{ transactionMessage: TransactionMessage; inputMint: PublicKey; outputMint: PublicKey; }"
            }
          ],
          "returns": "TransactionInstruction[]",
          "startLine": 404,
          "endLine": 446
        }
      ],
      "startLine": 230,
      "endLine": 447
    },
    {
      "file": "protocol-v2/sdk/src/openbook/openbookV2FulfillmentConfigMap.ts",
      "name": "OpenbookV2FulfillmentConfigMap",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "driftClient",
              "type": "DriftClient"
            }
          ],
          "startLine": 9,
          "endLine": 11
        },
        {
          "name": "add",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "openbookV2MarketAddress",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 13,
          "endLine": 22
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "OpenbookV2FulfillmentConfigAccount",
          "startLine": 24,
          "endLine": 28
        }
      ],
      "startLine": 5,
      "endLine": 29
    },
    {
      "file": "protocol-v2/sdk/src/openbook/openbookV2Subscriber.ts",
      "name": "OpenbookV2Subscriber",
      "abstract": false,
      "implements": [
        "L2OrderBookGenerator"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "OpenbookV2SubscriberConfig"
            }
          ],
          "startLine": 35,
          "endLine": 46
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 48,
          "endLine": 96
        },
        {
          "name": "getBestBid",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 98,
          "endLine": 106
        },
        {
          "name": "getBestAsk",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 108,
          "endLine": 116
        },
        {
          "name": "getL2Bids",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Generator<L2Level, any, any>",
          "startLine": 118,
          "endLine": 120
        },
        {
          "name": "getL2Asks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Generator<L2Level, any, any>",
          "startLine": 122,
          "endLine": 124
        },
        {
          "name": "convertSizeInBaseLotsToMarketPrecision",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "sizeInLots",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 126,
          "endLine": 128
        },
        {
          "name": "convertPriceInLotsToPricePrecision",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "priceInLots",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 130,
          "endLine": 140
        },
        {
          "name": "getL2Levels",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "side",
              "type": "\"bids\" | \"asks\""
            }
          ],
          "returns": "Generator<L2Level, any, any>",
          "startLine": 142,
          "endLine": 155
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 157,
          "endLine": 174
        }
      ],
      "startLine": 24,
      "endLine": 175
    },
    {
      "file": "protocol-v2/sdk/src/oracles/oracleClientCache.ts",
      "name": "OracleClientCache",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "startLine": 9,
          "endLine": 9
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "oracleSource",
              "type": "OracleSource"
            },
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            }
          ],
          "returns": "OracleClient",
          "startLine": 11,
          "endLine": 24
        }
      ],
      "startLine": 7,
      "endLine": 25
    },
    {
      "file": "protocol-v2/sdk/src/oracles/prelaunchOracleClient.ts",
      "name": "PrelaunchOracleClient",
      "abstract": false,
      "implements": [
        "OracleClient"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "program",
              "type": "Program<Idl>"
            }
          ],
          "startLine": 10,
          "endLine": 13
        },
        {
          "name": "getOraclePriceData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "pricePublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<OraclePriceData>",
          "startLine": 15,
          "endLine": 20
        },
        {
          "name": "getOraclePriceDataFromBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "buffer",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 22,
          "endLine": 36
        }
      ],
      "startLine": 6,
      "endLine": 37
    },
    {
      "file": "protocol-v2/sdk/src/oracles/pythClient.ts",
      "name": "PythClient",
      "abstract": false,
      "implements": [
        "OracleClient"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "multiple",
              "type": "any"
            },
            {
              "name": "stableCoin",
              "type": "boolean"
            }
          ],
          "startLine": 17,
          "endLine": 25
        },
        {
          "name": "getOraclePriceData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "pricePublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<OraclePriceData>",
          "startLine": 27,
          "endLine": 32
        },
        {
          "name": "getOraclePriceDataFromBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "buffer",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 34,
          "endLine": 67
        }
      ],
      "startLine": 12,
      "endLine": 68
    },
    {
      "file": "protocol-v2/sdk/src/oracles/pythLazerClient.ts",
      "name": "PythLazerClient",
      "abstract": false,
      "implements": [
        "OracleClient"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "multiple",
              "type": "any"
            },
            {
              "name": "stableCoin",
              "type": "boolean"
            }
          ],
          "startLine": 21,
          "endLine": 46
        },
        {
          "name": "getOraclePriceData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "pricePublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<OraclePriceData>",
          "startLine": 48,
          "endLine": 53
        },
        {
          "name": "getOraclePriceDataFromBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "buffer",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 55,
          "endLine": 88
        }
      ],
      "startLine": 14,
      "endLine": 89
    },
    {
      "file": "protocol-v2/sdk/src/oracles/pythPullClient.ts",
      "name": "PythPullClient",
      "abstract": false,
      "implements": [
        "OracleClient"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "multiple",
              "type": "any"
            },
            {
              "name": "stableCoin",
              "type": "boolean"
            }
          ],
          "startLine": 25,
          "endLine": 50
        },
        {
          "name": "getOraclePriceData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "pricePublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<OraclePriceData>",
          "startLine": 52,
          "endLine": 57
        },
        {
          "name": "getOraclePriceDataFromBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "buffer",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 59,
          "endLine": 93
        }
      ],
      "startLine": 18,
      "endLine": 94
    },
    {
      "file": "protocol-v2/sdk/src/oracles/quoteAssetOracleClient.ts",
      "name": "QuoteAssetOracleClient",
      "abstract": false,
      "implements": [
        "OracleClient"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "startLine": 14,
          "endLine": 14
        },
        {
          "name": "getOraclePriceData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "_pricePublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<OraclePriceData>",
          "startLine": 16,
          "endLine": 20
        },
        {
          "name": "getOraclePriceDataFromBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "_buffer",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 22,
          "endLine": 24
        }
      ],
      "startLine": 13,
      "endLine": 25
    },
    {
      "file": "protocol-v2/sdk/src/oracles/strictOraclePrice.ts",
      "name": "StrictOraclePrice",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "current",
              "type": "BN"
            },
            {
              "name": "twap",
              "type": "BN"
            }
          ],
          "startLine": 7,
          "endLine": 10
        },
        {
          "name": "max",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "BN",
          "startLine": 12,
          "endLine": 14
        },
        {
          "name": "min",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "BN",
          "startLine": 16,
          "endLine": 18
        }
      ],
      "startLine": 3,
      "endLine": 19
    },
    {
      "file": "protocol-v2/sdk/src/oracles/switchboardClient.ts",
      "name": "SwitchboardClient",
      "abstract": false,
      "implements": [
        "OracleClient"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            }
          ],
          "startLine": 26,
          "endLine": 29
        },
        {
          "name": "getOraclePriceData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "pricePublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<OraclePriceData>",
          "startLine": 31,
          "endLine": 36
        },
        {
          "name": "getOraclePriceDataFromBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "buffer",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 38,
          "endLine": 66
        }
      ],
      "startLine": 22,
      "endLine": 67
    },
    {
      "file": "protocol-v2/sdk/src/oracles/switchboardOnDemandClient.ts",
      "name": "SwitchboardOnDemandClient",
      "abstract": false,
      "implements": [
        "OracleClient"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            }
          ],
          "startLine": 35,
          "endLine": 38
        },
        {
          "name": "getOraclePriceData",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "pricePublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<OraclePriceData>",
          "startLine": 40,
          "endLine": 45
        },
        {
          "name": "getOraclePriceDataFromBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "buffer",
              "type": "Buffer<ArrayBufferLike>"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 47,
          "endLine": 63
        }
      ],
      "startLine": 31,
      "endLine": 64
    },
    {
      "file": "protocol-v2/sdk/src/orderSubscriber/grpcSubscription.ts",
      "name": "grpcSubscription",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tgrpcConfigs,\n\t\torderSubscriber,\n\t\tskipInitialLoad = false,\n\t\tresubOpts,\n\t\tresyncIntervalMs,\n\t\tdecoded = true,\n\t}",
              "type": "{ grpcConfigs: GrpcConfigs; orderSubscriber: OrderSubscriber; skipInitialLoad?: boolean; resubOpts?: ResubOpts; resyncIntervalMs?: number; decoded?: boolean; }"
            }
          ],
          "startLine": 25,
          "endLine": 46
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 48,
          "endLine": 128
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 130,
          "endLine": 138
        }
      ],
      "startLine": 10,
      "endLine": 139
    },
    {
      "file": "protocol-v2/sdk/src/orderSubscriber/OrderSubscriber.ts",
      "name": "OrderSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "OrderSubscriberConfig"
            }
          ],
          "startLine": 40,
          "endLine": 83
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 85,
          "endLine": 87
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 89,
          "endLine": 148
        },
        {
          "name": "tryUpdateUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "dataType",
              "type": "\"buffer\" | \"decoded\" | \"raw\""
            },
            {
              "name": "data",
              "type": "string[] | Buffer<ArrayBufferLike> | UserAccount"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 150,
          "endLine": 233
        },
        {
          "name": "createDLOB",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "protected",
          "parameters": [
            {
              "name": "protectedMakerParamsMap",
              "type": "ProtectMakerParamsMap"
            }
          ],
          "returns": "DLOB",
          "startLine": 240,
          "endLine": 242
        },
        {
          "name": "getDLOB",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "protectedMakerParamsMap",
              "type": "ProtectMakerParamsMap"
            }
          ],
          "returns": "Promise<DLOB>",
          "startLine": 244,
          "endLine": 268
        },
        {
          "name": "getSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 270,
          "endLine": 272
        },
        {
          "name": "addPubkey",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 274,
          "endLine": 288
        },
        {
          "name": "mustGetUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "returns": "Promise<UserAccount>",
          "startLine": 290,
          "endLine": 295
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 297,
          "endLine": 300
        }
      ],
      "startLine": 24,
      "endLine": 301
    },
    {
      "file": "protocol-v2/sdk/src/orderSubscriber/PollingSubscription.ts",
      "name": "PollingSubscription",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\torderSubscriber,\n\t\tfrequency,\n\t}",
              "type": "{ orderSubscriber: OrderSubscriber; frequency: number; }"
            }
          ],
          "startLine": 9,
          "endLine": 18
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 20,
          "endLine": 31
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 33,
          "endLine": 38
        }
      ],
      "startLine": 3,
      "endLine": 39
    },
    {
      "file": "protocol-v2/sdk/src/orderSubscriber/WebsocketSubscription.ts",
      "name": "WebsocketSubscription",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\torderSubscriber,\n\t\tcommitment,\n\t\tskipInitialLoad = false,\n\t\tresubOpts,\n\t\tresyncIntervalMs,\n\t\tdecoded = true,\n\t}",
              "type": "{ orderSubscriber: OrderSubscriber; commitment: Commitment; skipInitialLoad?: boolean; resubOpts?: ResubOpts; resyncIntervalMs?: number; decoded?: boolean; }"
            }
          ],
          "startLine": 20,
          "endLine": 41
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 43,
          "endLine": 108
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 110,
          "endLine": 118
        }
      ],
      "startLine": 8,
      "endLine": 119
    },
    {
      "file": "protocol-v2/sdk/src/phoenix/phoenixFulfillmentConfigMap.ts",
      "name": "PhoenixFulfillmentConfigMap",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "driftClient",
              "type": "DriftClient"
            }
          ],
          "startLine": 9,
          "endLine": 11
        },
        {
          "name": "add",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "phoenixMarketAddress",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 13,
          "endLine": 21
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "PhoenixV1FulfillmentConfigAccount",
          "startLine": 23,
          "endLine": 25
        }
      ],
      "startLine": 5,
      "endLine": 26
    },
    {
      "file": "protocol-v2/sdk/src/phoenix/phoenixSubscriber.ts",
      "name": "PhoenixSubscriber",
      "abstract": false,
      "implements": [
        "L2OrderBookGenerator"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "PhoenixMarketSubscriberConfig"
            }
          ],
          "startLine": 47,
          "endLine": 60
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 62,
          "endLine": 138
        },
        {
          "name": "getBestBid",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 140,
          "endLine": 152
        },
        {
          "name": "getBestAsk",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 154,
          "endLine": 167
        },
        {
          "name": "convertPriceInTicksToPricePrecision",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "priceInTicks",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 169,
          "endLine": 180
        },
        {
          "name": "convertSizeInBaseLotsToMarketPrecision",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "sizeInBaseLots",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 182,
          "endLine": 184
        },
        {
          "name": "getL2Bids",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Generator<L2Level, any, any>",
          "startLine": 186,
          "endLine": 188
        },
        {
          "name": "getL2Asks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Generator<L2Level, any, any>",
          "startLine": 190,
          "endLine": 192
        },
        {
          "name": "getL2Levels",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "side",
              "type": "\"bids\" | \"asks\""
            }
          ],
          "returns": "Generator<L2Level, any, any>",
          "startLine": 194,
          "endLine": 220
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 221,
          "endLine": 246
        }
      ],
      "startLine": 31,
      "endLine": 247
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/averageOverSlotsStrategy.ts",
      "name": "AverageOverSlotsStrategy",
      "abstract": false,
      "implements": [
        "PriorityFeeStrategy"
      ],
      "methods": [
        {
          "name": "calculate",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "samples",
              "type": "SolanaPriorityFeeResponse[]"
            }
          ],
          "returns": "number",
          "startLine": 5,
          "endLine": 15
        }
      ],
      "startLine": 4,
      "endLine": 16
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/averageStrategy.ts",
      "name": "AverageStrategy",
      "abstract": false,
      "implements": [
        "PriorityFeeStrategy"
      ],
      "methods": [
        {
          "name": "calculate",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "samples",
              "type": "SolanaPriorityFeeResponse[]"
            }
          ],
          "returns": "number",
          "startLine": 5,
          "endLine": 11
        }
      ],
      "startLine": 4,
      "endLine": 12
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/ewmaStrategy.ts",
      "name": "EwmaStrategy",
      "abstract": false,
      "implements": [
        "PriorityFeeStrategy"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "halfLife",
              "type": "number"
            }
          ],
          "startLine": 10,
          "endLine": 12
        },
        {
          "name": "calculate",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "samples",
              "type": "SolanaPriorityFeeResponse[]"
            }
          ],
          "returns": "number",
          "startLine": 15,
          "endLine": 38
        }
      ],
      "startLine": 4,
      "endLine": 39
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/maxOverSlotsStrategy.ts",
      "name": "MaxOverSlotsStrategy",
      "abstract": false,
      "implements": [
        "PriorityFeeStrategy"
      ],
      "methods": [
        {
          "name": "calculate",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "samples",
              "type": "SolanaPriorityFeeResponse[]"
            }
          ],
          "returns": "number",
          "startLine": 5,
          "endLine": 16
        }
      ],
      "startLine": 4,
      "endLine": 17
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/maxStrategy.ts",
      "name": "MaxStrategy",
      "abstract": false,
      "implements": [
        "PriorityFeeStrategy"
      ],
      "methods": [
        {
          "name": "calculate",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "samples",
              "type": "{ slot: number; prioritizationFee: number; }[]"
            }
          ],
          "returns": "number",
          "startLine": 4,
          "endLine": 6
        }
      ],
      "startLine": 3,
      "endLine": 7
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/priorityFeeSubscriber.ts",
      "name": "PriorityFeeSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "PriorityFeeSubscriberConfig"
            }
          ],
          "startLine": 46,
          "endLine": 92
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 94,
          "endLine": 101
        },
        {
          "name": "loadForSolana",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 103,
          "endLine": 119
        },
        {
          "name": "loadForHelius",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 121,
          "endLine": 138
        },
        {
          "name": "loadForDrift",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 140,
          "endLine": 156
        },
        {
          "name": "getMaxPriorityFee",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 158,
          "endLine": 160
        },
        {
          "name": "updateMaxPriorityFee",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "newMaxFee",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 162,
          "endLine": 164
        },
        {
          "name": "getPriorityFeeMultiplier",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 166,
          "endLine": 168
        },
        {
          "name": "updatePriorityFeeMultiplier",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "newPriorityFeeMultiplier",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 170,
          "endLine": 172
        },
        {
          "name": "updateCustomStrategy",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "newStrategy",
              "type": "PriorityFeeStrategy"
            }
          ],
          "returns": "void",
          "startLine": 174,
          "endLine": 176
        },
        {
          "name": "getHeliusPriorityFeeLevel",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "level",
              "type": "HeliusPriorityLevel"
            }
          ],
          "returns": "number",
          "startLine": 178,
          "endLine": 188
        },
        {
          "name": "getCustomStrategyResult",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 190,
          "endLine": 197
        },
        {
          "name": "getAvgStrategyResult",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 199,
          "endLine": 205
        },
        {
          "name": "getMaxStrategyResult",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 207,
          "endLine": 213
        },
        {
          "name": "load",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 215,
          "endLine": 235
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 237,
          "endLine": 242
        },
        {
          "name": "updateAddresses",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "addresses",
              "type": "PublicKey[]"
            }
          ],
          "returns": "void",
          "startLine": 244,
          "endLine": 246
        },
        {
          "name": "updateMarketTypeAndIndex",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "driftMarkets",
              "type": "DriftMarketInfo[]"
            }
          ],
          "returns": "void",
          "startLine": 248,
          "endLine": 250
        }
      ],
      "startLine": 21,
      "endLine": 251
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/priorityFeeSubscriberMap.ts",
      "name": "PriorityFeeSubscriberMap",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "PriorityFeeSubscriberMapConfig"
            }
          ],
          "startLine": 23,
          "endLine": 32
        },
        {
          "name": "updateFeesMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "driftPriorityFeeResponse",
              "type": "DriftPriorityFeeResponse"
            }
          ],
          "returns": "void",
          "startLine": 34,
          "endLine": 38
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 40,
          "endLine": 47
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 49,
          "endLine": 54
        },
        {
          "name": "load",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 56,
          "endLine": 70
        },
        {
          "name": "updateMarketTypeAndIndex",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "driftMarkets",
              "type": "DriftMarketInfo[]"
            }
          ],
          "returns": "void",
          "startLine": 72,
          "endLine": 74
        },
        {
          "name": "getPriorityFees",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketType",
              "type": "string"
            },
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DriftPriorityFeeLevels",
          "startLine": 76,
          "endLine": 81
        }
      ],
      "startLine": 15,
      "endLine": 82
    },
    {
      "file": "protocol-v2/sdk/src/serum/serumFulfillmentConfigMap.ts",
      "name": "SerumFulfillmentConfigMap",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "driftClient",
              "type": "DriftClient"
            }
          ],
          "startLine": 9,
          "endLine": 11
        },
        {
          "name": "add",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "serumMarketAddress",
              "type": "PublicKey"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 13,
          "endLine": 21
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "SerumV3FulfillmentConfigAccount",
          "startLine": 23,
          "endLine": 25
        }
      ],
      "startLine": 5,
      "endLine": 26
    },
    {
      "file": "protocol-v2/sdk/src/serum/serumSubscriber.ts",
      "name": "SerumSubscriber",
      "abstract": false,
      "implements": [
        "L2OrderBookGenerator"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "SerumMarketSubscriberConfig"
            }
          ],
          "startLine": 29,
          "endLine": 39
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 41,
          "endLine": 96
        },
        {
          "name": "getBestBid",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 98,
          "endLine": 105
        },
        {
          "name": "getBestAsk",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 107,
          "endLine": 114
        },
        {
          "name": "getL2Bids",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Generator<L2Level, any, any>",
          "startLine": 116,
          "endLine": 118
        },
        {
          "name": "getL2Asks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Generator<L2Level, any, any>",
          "startLine": 120,
          "endLine": 122
        },
        {
          "name": "getL2Levels",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "side",
              "type": "\"bids\" | \"asks\""
            }
          ],
          "returns": "Generator<L2Level, any, any>",
          "startLine": 124,
          "endLine": 141
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 143,
          "endLine": 168
        }
      ],
      "startLine": 9,
      "endLine": 169
    },
    {
      "file": "protocol-v2/sdk/src/slot/SlothashSubscriber.ts",
      "name": "SlothashSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "config",
              "type": "SlothashSubscriberConfig"
            }
          ],
          "startLine": 31,
          "endLine": 42
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 44,
          "endLine": 77
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 79,
          "endLine": 95
        },
        {
          "name": "getSlothash",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Slothash",
          "startLine": 97,
          "endLine": 99
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 101,
          "endLine": 116
        }
      ],
      "startLine": 20,
      "endLine": 117
    },
    {
      "file": "protocol-v2/sdk/src/slot/SlotSubscriber.ts",
      "name": "SlotSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "config",
              "type": "SlotSubscriberConfig"
            }
          ],
          "startLine": 25,
          "endLine": 36
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 38,
          "endLine": 63
        },
        {
          "name": "updateCurrentSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 65,
          "endLine": 68
        },
        {
          "name": "setTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 70,
          "endLine": 86
        },
        {
          "name": "getSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 88,
          "endLine": 90
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onResub",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 92,
          "endLine": 107
        }
      ],
      "startLine": 14,
      "endLine": 108
    },
    {
      "file": "protocol-v2/sdk/src/swift/grpcSignedMsgUserAccountSubscriber.ts",
      "name": "grpcSignedMsgUserOrdersAccountSubscriber",
      "abstract": false,
      "extends": "SignedMsgUserOrdersAccountSubscriber",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tgrpcConfigs,\n\t\tdriftClient,\n\t\tcommitment,\n\t\tresubOpts,\n\t\tdecodeFn,\n\t\tresyncIntervalMs,\n\t}",
              "type": "{ grpcConfigs: GrpcConfigs; driftClient: DriftClient; commitment?: Commitment; resubOpts?: ResubOpts; decodeFn?: (name: string, data: Buffer<ArrayBufferLike>) => SignedMsgUserOrdersAccount; resyncIntervalMs?: number; }"
            }
          ],
          "startLine": 13,
          "endLine": 36
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 38,
          "endLine": 84
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 86,
          "endLine": 94
        }
      ],
      "startLine": 9,
      "endLine": 95
    },
    {
      "file": "protocol-v2/sdk/src/swift/signedMsgUserAccountSubscriber.ts",
      "name": "SignedMsgUserOrdersAccountSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tdriftClient,\n\t\tcommitment,\n\t\tresubOpts,\n\t\tdecodeFn,\n\t\tresyncIntervalMs,\n\t}",
              "type": "{ driftClient: DriftClient; commitment?: Commitment; resubOpts?: ResubOpts; decodeFn?: (name: string, data: Buffer<ArrayBufferLike>) => SignedMsgUserOrdersAccount; resyncIntervalMs?: number; }"
            }
          ],
          "startLine": 49,
          "endLine": 73
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 75,
          "endLine": 124
        },
        {
          "name": "fetch",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 126,
          "endLine": 166
        },
        {
          "name": "tryUpdateSignedMsgUserOrdersAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "data",
              "type": "Buffer<ArrayBufferLike> | SignedMsgUserOrdersAccount"
            },
            {
              "name": "dataType",
              "type": "\"buffer\" | \"decoded\""
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "skipEventEmitting",
              "type": "boolean"
            }
          ],
          "returns": "void",
          "startLine": 168,
          "endLine": 227
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 229,
          "endLine": 237
        }
      ],
      "startLine": 24,
      "endLine": 238
    },
    {
      "file": "protocol-v2/sdk/src/swift/swiftOrderSubscriber.ts",
      "name": "SwiftOrderSubscriber",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "SwiftOrderSubscriberConfig"
            }
          ],
          "startLine": 85,
          "endLine": 88
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 90,
          "endLine": 97
        },
        {
          "name": "getSymbolForMarketIndex",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "string",
          "startLine": 99,
          "endLine": 105
        },
        {
          "name": "generateChallengeResponse",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "nonce",
              "type": "string"
            }
          ],
          "returns": "string",
          "startLine": 107,
          "endLine": 115
        },
        {
          "name": "handleAuthMessage",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "message",
              "type": "any"
            }
          ],
          "returns": "void",
          "startLine": 117,
          "endLine": 144
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "onOrder",
              "type": "(orderMessageRaw: SwiftOrderMessage, signedMessage: SignedMsgOrderParamsMessage | SignedMsgOrderParamsDelegateMessage, isDelegateSigner?: boolean) => Promise<...>"
            },
            {
              "name": "acceptSanitized",
              "type": "boolean"
            },
            {
              "name": "acceptDepositTrade",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 146,
          "endLine": 255
        },
        {
          "name": "getPlaceAndMakeSignedMsgOrderIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "orderMessageRaw",
              "type": "SwiftOrderMessage"
            },
            {
              "name": "signedMsgOrderParamsMessage",
              "type": "SignedMsgOrderParamsMessage | SignedMsgOrderParamsDelegateMessage"
            },
            {
              "name": "makerOrderParams",
              "type": "OptionalOrderParams"
            }
          ],
          "returns": "Promise<TransactionInstruction[]>",
          "startLine": 257,
          "endLine": 321
        },
        {
          "name": "startHeartbeatTimer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 323,
          "endLine": 334
        },
        {
          "name": "reconnect",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 336,
          "endLine": 346
        }
      ],
      "startLine": 69,
      "endLine": 347
    },
    {
      "file": "protocol-v2/sdk/src/testClient.ts",
      "name": "TestClient",
      "abstract": false,
      "extends": "AdminClient",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "DriftClientConfig"
            }
          ],
          "startLine": 8,
          "endLine": 14
        },
        {
          "name": "sendTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            },
            {
              "name": "preSigned",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 16,
          "endLine": 41
        }
      ],
      "startLine": 7,
      "endLine": 42
    },
    {
      "file": "protocol-v2/sdk/src/tokenFaucet.ts",
      "name": "TokenFaucet",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "wallet",
              "type": "IWallet"
            },
            {
              "name": "programId",
              "type": "PublicKey"
            },
            {
              "name": "mint",
              "type": "PublicKey"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            },
            {
              "name": "context",
              "type": "BankrunContextWrapper"
            }
          ],
          "startLine": 34,
          "endLine": 56
        },
        {
          "name": "getFaucetConfigPublicKeyAndNonce",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<[PublicKey, number]>",
          "startLine": 58,
          "endLine": 68
        },
        {
          "name": "getMintAuthority",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<PublicKey>",
          "startLine": 70,
          "endLine": 80
        },
        {
          "name": "getFaucetConfigPublicKey",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<PublicKey>",
          "startLine": 82,
          "endLine": 84
        },
        {
          "name": "initialize",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<string>",
          "startLine": 86,
          "endLine": 102
        },
        {
          "name": "fetchState",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<any>",
          "startLine": 104,
          "endLine": 108
        },
        {
          "name": "mintToUserIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "userTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "amount",
              "type": "BN"
            }
          ],
          "returns": "Promise<TransactionInstruction>",
          "startLine": 110,
          "endLine": 120
        },
        {
          "name": "mintToUser",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userTokenAccount",
              "type": "PublicKey"
            },
            {
              "name": "amount",
              "type": "BN"
            }
          ],
          "returns": "Promise<string>",
          "startLine": 122,
          "endLine": 135
        },
        {
          "name": "transferMintAuthority",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<string>",
          "startLine": 137,
          "endLine": 162
        },
        {
          "name": "createAssociatedTokenAccountAndMintTo",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "amount",
              "type": "BN"
            }
          ],
          "returns": "Promise<[PublicKey, string]>",
          "startLine": 164,
          "endLine": 202
        },
        {
          "name": "createAssociatedTokenAccountAndMintToInstructions",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "amount",
              "type": "BN"
            }
          ],
          "returns": "Promise<[PublicKey, TransactionInstruction, TransactionInstruction]>",
          "startLine": 204,
          "endLine": 224
        },
        {
          "name": "getAssosciatedMockUSDMintAddress",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "{ userPubKey: PublicKey; }"
            }
          ],
          "returns": "Promise<PublicKey>",
          "startLine": 226,
          "endLine": 232
        },
        {
          "name": "getTokenAccountInfo",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "{ userPubKey: PublicKey; }"
            }
          ],
          "returns": "Promise<Account>",
          "startLine": 234,
          "endLine": 242
        },
        {
          "name": "subscribeToTokenAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "{ userPubKey: PublicKey; callback: (accountInfo: Account) => void; }"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 244,
          "endLine": 269
        }
      ],
      "startLine": 25,
      "endLine": 270
    },
    {
      "file": "protocol-v2/sdk/src/tx/baseTxSender.ts",
      "name": "BaseTxSender",
      "abstract": true,
      "implements": [
        "TxSender"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tconnection,\n\t\twallet,\n\t\topts = DEFAULT_CONFIRMATION_OPTS,\n\t\ttimeout = DEFAULT_TIMEOUT,\n\t\tadditionalConnections = new Array<Connection>(),\n\t\tconfirmationStrategy = ConfirmationStrategy.Combo,\n\t\tadditionalTxSenderCallbacks,\n\t\ttrackTxLandRate,\n\t\ttxHandler,\n\t\ttxLandRateLookbackWindowMinutes = DEFAULT_TX_LAND_RATE_LOOKBACK_WINDOW_MINUTES,\n\t\tlandRateToFeeFunc,\n\t\tthrowOnTimeoutError = true,\n\t\tthrowOnTransactionError = true,\n\t}",
              "type": "{ connection: Connection; wallet: IWallet; opts?: ConfirmOptions; timeout?: number; additionalConnections?: any; confirmationStrategy?: ConfirmationStrategy; ... 6 more ...; throwOnTransactionError?: boolean; }"
            }
          ],
          "startLine": 56,
          "endLine": 111
        },
        {
          "name": "send",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            },
            {
              "name": "preSigned",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 113,
          "endLine": 134
        },
        {
          "name": "prepareTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            },
            {
              "name": "preSigned",
              "type": "boolean"
            }
          ],
          "returns": "Promise<Transaction>",
          "startLine": 136,
          "endLine": 149
        },
        {
          "name": "getVersionedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "ixs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "lookupTableAccounts",
              "type": "AddressLookupTableAccount[]"
            },
            {
              "name": "_additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            },
            {
              "name": "blockhash",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            }
          ],
          "returns": "Promise<VersionedTransaction>",
          "startLine": 151,
          "endLine": 164
        },
        {
          "name": "sendVersionedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "VersionedTransaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            },
            {
              "name": "preSigned",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 166,
          "endLine": 195
        },
        {
          "name": "sendRawTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "rawTransaction",
              "type": "Uint8Array<ArrayBufferLike> | Buffer<ArrayBufferLike>"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 197,
          "endLine": 204
        },
        {
          "name": "simulateTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "VersionedTransaction"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 207,
          "endLine": 219
        },
        {
          "name": "confirmTransactionWebSocket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signature",
              "type": "string"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "returns": "Promise<RpcResponseAndContext<SignatureResult>>",
          "startLine": 221,
          "endLine": 305
        },
        {
          "name": "confirmTransactionPolling",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signature",
              "type": "string"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "returns": "Promise<RpcResponseAndContext<SignatureResult>>",
          "startLine": 307,
          "endLine": 347
        },
        {
          "name": "confirmTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "signature",
              "type": "string"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "returns": "Promise<RpcResponseAndContext<SignatureResult>>",
          "startLine": 349,
          "endLine": 361
        },
        {
          "name": "getTimestamp",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 363,
          "endLine": 365
        },
        {
          "name": "promiseTimeout",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "promises",
              "type": "Promise<T>[]"
            },
            {
              "name": "timeoutMs",
              "type": "number"
            }
          ],
          "returns": "Promise<T>",
          "startLine": 367,
          "endLine": 382
        },
        {
          "name": "sendToAdditionalConnections",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "rawTx",
              "type": "Uint8Array<ArrayBufferLike> | Buffer<ArrayBufferLike>"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            }
          ],
          "returns": "void",
          "startLine": 384,
          "endLine": 400
        },
        {
          "name": "addAdditionalConnection",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "newConnection",
              "type": "Connection"
            }
          ],
          "returns": "void",
          "startLine": 402,
          "endLine": 412
        },
        {
          "name": "getTimeoutCount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 414,
          "endLine": 416
        },
        {
          "name": "checkConfirmationResultForError",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "txSig",
              "type": "string"
            },
            {
              "name": "result",
              "type": "SignatureResult"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 418,
          "endLine": 431
        },
        {
          "name": "getTxLandRate",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 433,
          "endLine": 451
        },
        {
          "name": "defaultLandRateToFeeFunc",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "txLandRate",
              "type": "number"
            }
          ],
          "returns": "number",
          "startLine": 453,
          "endLine": 463
        },
        {
          "name": "getSuggestedPriorityFeeMultiplier",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 465,
          "endLine": 470
        }
      ],
      "startLine": 35,
      "endLine": 471
    },
    {
      "file": "protocol-v2/sdk/src/tx/blockhashFetcher/baseBlockhashFetcher.ts",
      "name": "BaseBlockhashFetcher",
      "abstract": false,
      "implements": [
        "BlockhashFetcher"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "blockhashCommitment",
              "type": "Commitment"
            }
          ],
          "startLine": 9,
          "endLine": 12
        },
        {
          "name": "getLatestBlockhash",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<Readonly<{ blockhash: string; lastValidBlockHeight: number; }>>",
          "startLine": 14,
          "endLine": 18
        }
      ],
      "startLine": 8,
      "endLine": 19
    },
    {
      "file": "protocol-v2/sdk/src/tx/blockhashFetcher/cachedBlockhashFetcher.ts",
      "name": "CachedBlockhashFetcher",
      "abstract": false,
      "implements": [
        "BlockhashFetcher"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "blockhashCommitment",
              "type": "Commitment"
            },
            {
              "name": "retryCount",
              "type": "number"
            },
            {
              "name": "retrySleepTimeMs",
              "type": "number"
            },
            {
              "name": "staleCacheTimeMs",
              "type": "number"
            }
          ],
          "startLine": 23,
          "endLine": 29
        },
        {
          "name": "fetchBlockhashWithRetry",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<Readonly<{ blockhash: string; lastValidBlockHeight: number; }>>",
          "startLine": 31,
          "endLine": 45
        },
        {
          "name": "sleep",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "ms",
              "type": "number"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 47,
          "endLine": 49
        },
        {
          "name": "updateBlockhashCache",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 51,
          "endLine": 57
        },
        {
          "name": "getLatestBlockhash",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<Readonly<{ blockhash: string; lastValidBlockHeight: number; }>>",
          "startLine": 59,
          "endLine": 66
        },
        {
          "name": "isCacheStale",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "boolean",
          "startLine": 68,
          "endLine": 73
        },
        {
          "name": "refreshBlockhash",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 78,
          "endLine": 89
        }
      ],
      "startLine": 15,
      "endLine": 90
    },
    {
      "file": "protocol-v2/sdk/src/tx/fastSingleTxSender.ts",
      "name": "FastSingleTxSender",
      "abstract": false,
      "extends": "BaseTxSender",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tconnection,\n\t\twallet,\n\t\topts = { ...DEFAULT_CONFIRMATION_OPTS, maxRetries: 0 },\n\t\ttimeout = DEFAULT_TIMEOUT,\n\t\tblockhashRefreshInterval = DEFAULT_BLOCKHASH_REFRESH,\n\t\tadditionalConnections = new Array<Connection>(),\n\t\tskipConfirmation = false,\n\t\tconfirmInBackground = false,\n\t\tblockhashCommitment = 'finalized',\n\t\tconfirmationStrategy = ConfirmationStrategy.Combo,\n\t\ttrackTxLandRate,\n\t\ttxHandler,\n\t\ttxLandRateLookbackWindowMinutes,\n\t\tlandRateToFeeFunc,\n\t\tthrowOnTimeoutError = true,\n\t}",
              "type": "{ connection: Connection; wallet: IWallet; opts?: ConfirmOptions; timeout?: number; blockhashRefreshInterval?: number; additionalConnections?: any; ... 8 more ...; throwOnTimeoutError?: boolean; }"
            }
          ],
          "startLine": 31,
          "endLine": 87
        },
        {
          "name": "startBlockhashRefreshLoop",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "void",
          "startLine": 89,
          "endLine": 101
        },
        {
          "name": "sendRawTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "rawTransaction",
              "type": "Uint8Array<ArrayBufferLike> | Buffer<ArrayBufferLike>"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 103,
          "endLine": 141
        }
      ],
      "startLine": 17,
      "endLine": 142
    },
    {
      "file": "protocol-v2/sdk/src/tx/forwardOnlyTxSender.ts",
      "name": "ForwardOnlyTxSender",
      "abstract": false,
      "extends": "BaseTxSender",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tconnection,\n\t\twallet,\n\t\topts = { ...DEFAULT_CONFIRMATION_OPTS, maxRetries: 0 },\n\t\ttimeout = DEFAULT_TIMEOUT,\n\t\tretrySleep = DEFAULT_RETRY,\n\t\tconfirmationStrategy = ConfirmationStrategy.Combo,\n\t\tadditionalTxSenderCallbacks = [],\n\t\ttxHandler,\n\t\ttrackTxLandRate,\n\t\ttxLandRateLookbackWindowMinutes,\n\t\tlandRateToFeeFunc,\n\t\tthrowOnTimeoutError = true,\n\t}",
              "type": "{ connection: Connection; wallet: IWallet; opts?: ConfirmOptions; timeout?: number; retrySleep?: number; confirmationStrategy?: ConfirmationStrategy; ... 5 more ...; throwOnTimeoutError?: boolean; }"
            }
          ],
          "startLine": 29,
          "endLine": 76
        },
        {
          "name": "sleep",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "reference",
              "type": "ResolveReference"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 78,
          "endLine": 83
        },
        {
          "name": "sendToAdditionalConnections",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "rawTx",
              "type": "Uint8Array<ArrayBufferLike> | Buffer<ArrayBufferLike>"
            },
            {
              "name": "_opts",
              "type": "ConfirmOptions"
            }
          ],
          "returns": "void",
          "startLine": 85,
          "endLine": 92
        },
        {
          "name": "sendRawTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "rawTransaction",
              "type": "Uint8Array<ArrayBufferLike> | Buffer<ArrayBufferLike>"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 94,
          "endLine": 144
        }
      ],
      "startLine": 20,
      "endLine": 145
    },
    {
      "file": "protocol-v2/sdk/src/tx/priorityFeeCalculator.ts",
      "name": "PriorityFeeCalculator",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "currentTimeMs",
              "type": "number"
            },
            {
              "name": "priorityFeeLatchDurationMs",
              "type": "number"
            }
          ],
          "startLine": 18,
          "endLine": 26
        },
        {
          "name": "updatePriorityFee",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "currentTimeMs",
              "type": "number"
            },
            {
              "name": "txTimeoutCount",
              "type": "number"
            }
          ],
          "returns": "boolean",
          "startLine": 33,
          "endLine": 57
        },
        {
          "name": "generateComputeBudgetIxs",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "computeUnitLimit",
              "type": "number"
            }
          ],
          "returns": "TransactionInstruction[]",
          "startLine": 64,
          "endLine": 74
        },
        {
          "name": "calculateComputeUnitPrice",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "computeUnitLimit",
              "type": "number"
            },
            {
              "name": "additionalFeeMicroLamports",
              "type": "number"
            }
          ],
          "returns": "number",
          "startLine": 82,
          "endLine": 87
        },
        {
          "name": "generateComputeBudgetWithPriorityFeeIx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "computeUnitLimit",
              "type": "number"
            },
            {
              "name": "usePriorityFee",
              "type": "boolean"
            },
            {
              "name": "additionalFeeMicroLamports",
              "type": "number"
            }
          ],
          "returns": "TransactionInstruction[]",
          "startLine": 96,
          "endLine": 116
        }
      ],
      "startLine": 7,
      "endLine": 117
    },
    {
      "file": "protocol-v2/sdk/src/tx/retryTxSender.ts",
      "name": "RetryTxSender",
      "abstract": false,
      "extends": "BaseTxSender",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tconnection,\n\t\twallet,\n\t\topts = { ...DEFAULT_CONFIRMATION_OPTS, maxRetries: 0 },\n\t\ttimeout = DEFAULT_TIMEOUT,\n\t\tretrySleep = DEFAULT_RETRY,\n\t\tadditionalConnections = new Array<Connection>(),\n\t\tconfirmationStrategy = ConfirmationStrategy.Combo,\n\t\tadditionalTxSenderCallbacks = [],\n\t\ttxHandler,\n\t\ttrackTxLandRate,\n\t\ttxLandRateLookbackWindowMinutes,\n\t\tlandRateToFeeFunc,\n\t\tthrowOnTimeoutError = true,\n\t}",
              "type": "{ connection: Connection; wallet: IWallet; opts?: ConfirmOptions; timeout?: number; retrySleep?: number; additionalConnections?: any; confirmationStrategy?: ConfirmationStrategy; ... 5 more ...; throwOnTimeoutError?: boolean; }"
            }
          ],
          "startLine": 24,
          "endLine": 73
        },
        {
          "name": "sleep",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "reference",
              "type": "ResolveReference"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 75,
          "endLine": 80
        },
        {
          "name": "sendRawTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "rawTransaction",
              "type": "Uint8Array<ArrayBufferLike> | Buffer<ArrayBufferLike>"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 82,
          "endLine": 134
        }
      ],
      "startLine": 15,
      "endLine": 135
    },
    {
      "file": "protocol-v2/sdk/src/tx/txHandler.ts",
      "name": "TxHandler",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "{ connection: Connection; wallet: IWallet; confirmationOptions: ConfirmOptions; opts?: { returnBlockHeightsWithSignedTxCallbackData?: boolean; onSignedCb?: (txSigs: SignedTxData[]) => void; preSignedCb?: () => void; }; config?: TxHandlerConfig; }"
            }
          ],
          "startLine": 96,
          "endLine": 134
        },
        {
          "name": "getWallet",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "IWallet",
          "startLine": 136,
          "endLine": 138
        },
        {
          "name": "addHashAndExpiryToLookup",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "hashAndExpiry",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            }
          ],
          "returns": "void",
          "startLine": 140,
          "endLine": 147
        },
        {
          "name": "updateWallet",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "wallet",
              "type": "IWallet"
            }
          ],
          "returns": "void",
          "startLine": 155,
          "endLine": 157
        },
        {
          "name": "getLatestBlockhashForTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<Readonly<{ blockhash: string; lastValidBlockHeight: number; }>>",
          "startLine": 166,
          "endLine": 168
        },
        {
          "name": "prepareTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "wallet",
              "type": "IWallet"
            },
            {
              "name": "confirmationOpts",
              "type": "ConfirmOptions"
            },
            {
              "name": "preSigned",
              "type": "boolean"
            },
            {
              "name": "recentBlockhash",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            }
          ],
          "returns": "Promise<Transaction>",
          "startLine": 180,
          "endLine": 208
        },
        {
          "name": "isVersionedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction | VersionedTransaction"
            }
          ],
          "returns": "boolean",
          "startLine": 210,
          "endLine": 214
        },
        {
          "name": "isLegacyTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction | VersionedTransaction"
            }
          ],
          "returns": "boolean",
          "startLine": 216,
          "endLine": 218
        },
        {
          "name": "getTxSigFromSignedTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "signedTx",
              "type": "Transaction | VersionedTransaction"
            }
          ],
          "returns": "string",
          "startLine": 220,
          "endLine": 230
        },
        {
          "name": "getBlockhashFromSignedTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "signedTx",
              "type": "Transaction | VersionedTransaction"
            }
          ],
          "returns": "string",
          "startLine": 232,
          "endLine": 240
        },
        {
          "name": "signTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "wallet",
              "type": "IWallet"
            }
          ],
          "returns": "Promise<Transaction>",
          "startLine": 242,
          "endLine": 271
        },
        {
          "name": "signVersionedTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "VersionedTransaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "recentBlockhash",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            },
            {
              "name": "wallet",
              "type": "IWallet"
            }
          ],
          "returns": "Promise<VersionedTransaction>",
          "startLine": 273,
          "endLine": 313
        },
        {
          "name": "handleSignedTxData",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "txData",
              "type": "Omit<SignedTxData, \"lastValidBlockHeight\">[]"
            }
          ],
          "returns": "{ lastValidBlockHeight: number; txSig: string; signedTx: Transaction | VersionedTransaction; blockHash: string; }[]",
          "startLine": 315,
          "endLine": 341
        },
        {
          "name": "getProcessedTransactionParams",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "txBuildingProps",
              "type": "TxBuildingProps"
            }
          ],
          "returns": "Promise<BaseTxParams>",
          "startLine": 348,
          "endLine": 382
        },
        {
          "name": "_generateVersionedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "recentBlockhash",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            },
            {
              "name": "message",
              "type": "Message | MessageV0"
            }
          ],
          "returns": "VersionedTransaction",
          "startLine": 384,
          "endLine": 391
        },
        {
          "name": "generateLegacyVersionedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "recentBlockhash",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            },
            {
              "name": "ixs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "wallet",
              "type": "IWallet"
            }
          ],
          "returns": "VersionedTransaction",
          "startLine": 393,
          "endLine": 412
        },
        {
          "name": "generateVersionedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "recentBlockhash",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            },
            {
              "name": "ixs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "lookupTableAccounts",
              "type": "AddressLookupTableAccount[]"
            },
            {
              "name": "wallet",
              "type": "IWallet"
            }
          ],
          "returns": "VersionedTransaction",
          "startLine": 414,
          "endLine": 434
        },
        {
          "name": "generateLegacyTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "ixs",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "recentBlockhash",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            }
          ],
          "returns": "Transaction",
          "startLine": 436,
          "endLine": 445
        },
        {
          "name": "buildBulkTransactions",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "Omit<TxBuildingProps, \"instructions\"> & { instructions: (TransactionInstruction | TransactionInstruction[])[]; }"
            }
          ],
          "returns": "Promise<(Transaction | VersionedTransaction)[]>",
          "startLine": 452,
          "endLine": 470
        },
        {
          "name": "buildTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "TxBuildingProps"
            }
          ],
          "returns": "Promise<Transaction | VersionedTransaction>",
          "startLine": 481,
          "endLine": 594
        },
        {
          "name": "wrapInTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "instruction",
              "type": "TransactionInstruction"
            },
            {
              "name": "computeUnits",
              "type": "number"
            },
            {
              "name": "computeUnitsPrice",
              "type": "number"
            }
          ],
          "returns": "Transaction",
          "startLine": 596,
          "endLine": 625
        },
        {
          "name": "getPreparedAndSignedLegacyTransactionMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "txsMap",
              "type": "T"
            },
            {
              "name": "wallet",
              "type": "IWallet"
            },
            {
              "name": "commitment",
              "type": "Commitment"
            },
            {
              "name": "recentBlockhash",
              "type": "Readonly<{ blockhash: string; lastValidBlockHeight: number; }>"
            }
          ],
          "returns": "Promise<{ signedTxMap: T; signedTxData: SignedTxData[]; }>",
          "startLine": 635,
          "endLine": 659
        },
        {
          "name": "getSignedTransactionMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "txsToSignMap",
              "type": "T"
            },
            {
              "name": "wallet",
              "type": "IWallet"
            }
          ],
          "returns": "Promise<{ signedTxMap: T; signedTxData: SignedTxData[]; }>",
          "startLine": 668,
          "endLine": 726
        },
        {
          "name": "buildTransactionsMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "Omit<TxBuildingProps, \"instructions\"> & { instructionsMap: T; }"
            }
          ],
          "returns": "Promise<MappedRecord<T, Transaction | VersionedTransaction>>",
          "startLine": 733,
          "endLine": 749
        },
        {
          "name": "buildAndSignTransactionMap",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "Omit<TxBuildingProps, \"instructions\"> & { instructionsMap: T; }"
            }
          ],
          "returns": "Promise<{ signedTxMap: Record<string, Transaction>; signedTxData: SignedTxData[]; } | { signedTxMap: MappedRecord<T, Transaction | VersionedTransaction>; signedTxData: SignedTxData[]; }>",
          "startLine": 756,
          "endLine": 774
        },
        {
          "name": "simulateAndCalculateInstructions",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "txBuildingProps",
              "type": "TxBuildingProps"
            },
            {
              "name": "optionalInstructions",
              "type": "TransactionInstruction[]"
            },
            {
              "name": "versionedTransaction",
              "type": "boolean"
            },
            {
              "name": "addressLookupTables",
              "type": "AddressLookupTableAccount[]"
            }
          ],
          "returns": "Promise<[TransactionInstruction[], SimulatedTransactionResponse]>",
          "startLine": 776,
          "endLine": 833
        }
      ],
      "startLine": 81,
      "endLine": 834
    },
    {
      "file": "protocol-v2/sdk/src/tx/txParamProcessor.ts",
      "name": "TransactionParamProcessor",
      "abstract": false,
      "methods": [
        {
          "name": "getComputeUnitsFromSim",
          "kind": "method",
          "isStatic": true,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "txSim",
              "type": "RpcResponseAndContext<SimulatedTransactionResponse>"
            }
          ],
          "returns": "Promise<number>",
          "startLine": 22,
          "endLine": 30
        },
        {
          "name": "getTxSimComputeUnits",
          "kind": "method",
          "isStatic": true,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "VersionedTransaction"
            },
            {
              "name": "connection",
              "type": "Connection"
            },
            {
              "name": "bufferMultiplier",
              "type": "number"
            },
            {
              "name": "lowerBoundCu",
              "type": "number"
            },
            {
              "name": "simulatedTx",
              "type": "SimulatedTransactionResponse"
            }
          ],
          "returns": "Promise<{ success: boolean; computeUnits: number; }>",
          "startLine": 32,
          "endLine": 85
        },
        {
          "name": "process",
          "kind": "method",
          "isStatic": true,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "{ baseTxParams: BaseTxParams; processConfig: ProcessingTxParams; processParams: { connection: Connection; simulatedTx?: SimulatedTransactionResponse; }; txBuilder: (baseTransactionProps: TransactionBuildingProps) => Promise<...>; }"
            }
          ],
          "returns": "Promise<BaseTxParams>",
          "startLine": 87,
          "endLine": 162
        }
      ],
      "startLine": 21,
      "endLine": 163
    },
    {
      "file": "protocol-v2/sdk/src/tx/types.ts",
      "name": "TxSendError",
      "abstract": false,
      "extends": "Error",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "message",
              "type": "string"
            },
            {
              "name": "code",
              "type": "number"
            }
          ],
          "startLine": 62,
          "endLine": 70
        }
      ],
      "startLine": 61,
      "endLine": 71
    },
    {
      "file": "protocol-v2/sdk/src/tx/whileValidTxSender.ts",
      "name": "WhileValidTxSender",
      "abstract": false,
      "extends": "BaseTxSender",
      "methods": [
        {
          "name": "checkAndSetUseBlockHeightOffset",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 37,
          "endLine": 57
        },
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tconnection,\n\t\twallet,\n\t\topts = { ...DEFAULT_CONFIRMATION_OPTS, maxRetries: 0 },\n\t\tretrySleep = DEFAULT_RETRY,\n\t\tadditionalConnections = new Array<Connection>(),\n\t\tconfirmationStrategy = ConfirmationStrategy.Combo,\n\t\tadditionalTxSenderCallbacks = [],\n\t\ttxHandler,\n\t\ttrackTxLandRate,\n\t\ttxLandRateLookbackWindowMinutes,\n\t\tlandRateToFeeFunc,\n\t\tthrowOnTimeoutError = true,\n\t\tthrowOnTransactionError = true,\n\t}",
              "type": "{ connection: Connection; wallet: IWallet; opts?: ConfirmOptions; retrySleep?: number; additionalConnections?: any; additionalTxSenderCallbacks?: ((base58EncodedTx: string) => void)[]; ... 6 more ...; throwOnTransactionError?: boolean; }"
            }
          ],
          "startLine": 59,
          "endLine": 105
        },
        {
          "name": "sleep",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "reference",
              "type": "ResolveReference"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 107,
          "endLine": 112
        },
        {
          "name": "prepareTx",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            },
            {
              "name": "preSigned",
              "type": "boolean"
            }
          ],
          "returns": "Promise<Transaction>",
          "startLine": 114,
          "endLine": 150
        },
        {
          "name": "sendVersionedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "VersionedTransaction"
            },
            {
              "name": "additionalSigners",
              "type": "Signer[]"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            },
            {
              "name": "preSigned",
              "type": "boolean"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 152,
          "endLine": 200
        },
        {
          "name": "sendRawTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "rawTransaction",
              "type": "Uint8Array<ArrayBufferLike> | Buffer<ArrayBufferLike>"
            },
            {
              "name": "opts",
              "type": "ConfirmOptions"
            }
          ],
          "returns": "Promise<TxSigAndSlot>",
          "startLine": 202,
          "endLine": 265
        }
      ],
      "startLine": 22,
      "endLine": 266
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "AssetTier",
      "abstract": false,
      "methods": [],
      "startLine": 105,
      "endLine": 111
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "ContractTier",
      "abstract": false,
      "methods": [],
      "startLine": 96,
      "endLine": 103
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "ContractType",
      "abstract": false,
      "methods": [],
      "startLine": 90,
      "endLine": 94
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "DepositDirection",
      "abstract": false,
      "methods": [],
      "startLine": 133,
      "endLine": 136
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "DepositExplanation",
      "abstract": false,
      "methods": [],
      "startLine": 290,
      "endLine": 296
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "LiquidationType",
      "abstract": false,
      "methods": [],
      "startLine": 511,
      "endLine": 528
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "LPAction",
      "abstract": false,
      "methods": [],
      "startLine": 457,
      "endLine": 462
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "MarginMode",
      "abstract": false,
      "methods": [],
      "startLine": 82,
      "endLine": 88
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "MarketStatus",
      "abstract": false,
      "methods": [],
      "startLine": 38,
      "endLine": 48
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "MarketType",
      "abstract": false,
      "methods": [],
      "startLine": 185,
      "endLine": 188
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "OracleSource",
      "abstract": false,
      "methods": [],
      "startLine": 138,
      "endLine": 155
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "OracleSourceNum",
      "abstract": false,
      "methods": [],
      "startLine": 157,
      "endLine": 174
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "OrderAction",
      "abstract": false,
      "methods": [],
      "startLine": 204,
      "endLine": 210
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "OrderActionExplanation",
      "abstract": false,
      "methods": [],
      "startLine": 212,
      "endLine": 271
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "OrderBitFlag",
      "abstract": false,
      "methods": [],
      "startLine": 197,
      "endLine": 202
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "OrderParamsBitFlag",
      "abstract": false,
      "methods": [],
      "startLine": 1284,
      "endLine": 1287
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "OrderStatus",
      "abstract": false,
      "methods": [],
      "startLine": 190,
      "endLine": 195
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "OrderTriggerCondition",
      "abstract": false,
      "methods": [],
      "startLine": 273,
      "endLine": 278
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "OrderType",
      "abstract": false,
      "methods": [],
      "startLine": 176,
      "endLine": 182
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "PositionDirection",
      "abstract": false,
      "methods": [],
      "startLine": 128,
      "endLine": 131
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "PostOnlyParams",
      "abstract": false,
      "methods": [],
      "startLine": 1277,
      "endLine": 1282
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "SettlePnlExplanation",
      "abstract": false,
      "methods": [],
      "startLine": 298,
      "endLine": 301
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "SettlePnlMode",
      "abstract": false,
      "methods": [],
      "startLine": 317,
      "endLine": 320
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "SpotBalanceType",
      "abstract": false,
      "methods": [],
      "startLine": 123,
      "endLine": 126
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "SpotFulfillmentConfigStatus",
      "abstract": false,
      "methods": [],
      "startLine": 303,
      "endLine": 306
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "SpotFulfillmentStatus",
      "abstract": false,
      "methods": [],
      "startLine": 285,
      "endLine": 288
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "SpotFulfillmentType",
      "abstract": false,
      "methods": [],
      "startLine": 280,
      "endLine": 283
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "StakeAction",
      "abstract": false,
      "methods": [],
      "startLine": 308,
      "endLine": 315
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "SwapDirection",
      "abstract": false,
      "methods": [],
      "startLine": 118,
      "endLine": 121
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "SwapReduceOnly",
      "abstract": false,
      "methods": [],
      "startLine": 1408,
      "endLine": 1411
    },
    {
      "file": "protocol-v2/sdk/src/user.ts",
      "name": "User",
      "abstract": false,
      "methods": [
        {
          "name": "isSubscribed",
          "kind": "get",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 117,
          "endLine": 119
        },
        {
          "name": "isSubscribed",
          "kind": "set",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "val",
              "type": "boolean"
            }
          ],
          "startLine": 121,
          "endLine": 123
        },
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "UserConfig"
            }
          ],
          "startLine": 125,
          "endLine": 172
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 178,
          "endLine": 181
        },
        {
          "name": "fetchAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 186,
          "endLine": 188
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 190,
          "endLine": 193
        },
        {
          "name": "getUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "UserAccount",
          "startLine": 195,
          "endLine": 197
        },
        {
          "name": "forceGetUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<UserAccount>",
          "startLine": 199,
          "endLine": 202
        },
        {
          "name": "getUserAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<UserAccount>",
          "startLine": 204,
          "endLine": 206
        },
        {
          "name": "getPerpPositionForUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "PerpPosition",
          "startLine": 208,
          "endLine": 215
        },
        {
          "name": "getPerpPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "PerpPosition",
          "startLine": 222,
          "endLine": 225
        },
        {
          "name": "getPerpPositionOrEmpty",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "PerpPosition",
          "startLine": 227,
          "endLine": 233
        },
        {
          "name": "getPerpPositionAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<PerpPosition>",
          "startLine": 235,
          "endLine": 247
        },
        {
          "name": "getSpotPositionForUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "SpotPosition",
          "startLine": 249,
          "endLine": 256
        },
        {
          "name": "getSpotPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "SpotPosition",
          "startLine": 263,
          "endLine": 266
        },
        {
          "name": "getSpotPositionAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<SpotPosition>",
          "startLine": 268,
          "endLine": 280
        },
        {
          "name": "getEmptySpotPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "SpotPosition",
          "startLine": 282,
          "endLine": 292
        },
        {
          "name": "getTokenAmount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "BN",
          "startLine": 300,
          "endLine": 314
        },
        {
          "name": "getEmptyPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "PerpPosition",
          "startLine": 316,
          "endLine": 335
        },
        {
          "name": "getClonedPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "position",
              "type": "PerpPosition"
            }
          ],
          "returns": "PerpPosition",
          "startLine": 337,
          "endLine": 340
        },
        {
          "name": "getOrderForUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "orderId",
              "type": "number"
            }
          ],
          "returns": "Order",
          "startLine": 342,
          "endLine": 347
        },
        {
          "name": "getOrder",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "orderId",
              "type": "number"
            }
          ],
          "returns": "Order",
          "startLine": 353,
          "endLine": 356
        },
        {
          "name": "getOrderAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "orderId",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<Order>",
          "startLine": 358,
          "endLine": 365
        },
        {
          "name": "getOrderByUserIdForUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "userOrderId",
              "type": "number"
            }
          ],
          "returns": "Order",
          "startLine": 367,
          "endLine": 374
        },
        {
          "name": "getOrderByUserOrderId",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userOrderId",
              "type": "number"
            }
          ],
          "returns": "Order",
          "startLine": 380,
          "endLine": 383
        },
        {
          "name": "getOrderByUserOrderIdAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userOrderId",
              "type": "number"
            }
          ],
          "returns": "DataAndSlot<Order>",
          "startLine": 385,
          "endLine": 397
        },
        {
          "name": "getOpenOrdersForUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "Order[]",
          "startLine": 399,
          "endLine": 403
        },
        {
          "name": "getOpenOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Order[]",
          "startLine": 405,
          "endLine": 408
        },
        {
          "name": "getOpenOrdersAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<Order[]>",
          "startLine": 410,
          "endLine": 417
        },
        {
          "name": "getUserAccountPublicKey",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "PublicKey",
          "startLine": 419,
          "endLine": 421
        },
        {
          "name": "exists",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<boolean>",
          "startLine": 423,
          "endLine": 429
        },
        {
          "name": "getPerpBidAsks",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "[BN, BN]",
          "startLine": 436,
          "endLine": 443
        },
        {
          "name": "getPerpBuyingPower",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "collateralBuffer",
              "type": "any"
            },
            {
              "name": "enterHighLeverageMode",
              "type": "any"
            },
            {
              "name": "maxMarginRatio",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 449,
          "endLine": 479
        },
        {
          "name": "getPerpBuyingPowerFromFreeCollateralAndBaseAssetAmount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "freeCollateral",
              "type": "BN"
            },
            {
              "name": "baseAssetAmount",
              "type": "BN"
            },
            {
              "name": "enterHighLeverageMode",
              "type": "any"
            },
            {
              "name": "perpMarketMaxMarginRatio",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 481,
          "endLine": 501
        },
        {
          "name": "getFreeCollateral",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "enterHighLeverageMode",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 507,
          "endLine": 518
        },
        {
          "name": "getMarginRequirement",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            },
            {
              "name": "strict",
              "type": "boolean"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "enteringHighLeverage",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 523,
          "endLine": 545
        },
        {
          "name": "getInitialMarginRequirement",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "enterHighLeverageMode",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 550,
          "endLine": 558
        },
        {
          "name": "getMaintenanceMarginRequirement",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "liquidationBuffer",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 563,
          "endLine": 565
        },
        {
          "name": "getActivePerpPositionsForUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "PerpPosition[]",
          "startLine": 567,
          "endLine": 576
        },
        {
          "name": "getActivePerpPositions",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "PerpPosition[]",
          "startLine": 578,
          "endLine": 581
        },
        {
          "name": "getActivePerpPositionsAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<PerpPosition[]>",
          "startLine": 582,
          "endLine": 591
        },
        {
          "name": "getActiveSpotPositionsForUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "userAccount",
              "type": "UserAccount"
            }
          ],
          "returns": "SpotPosition[]",
          "startLine": 593,
          "endLine": 599
        },
        {
          "name": "getActiveSpotPositions",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "SpotPosition[]",
          "startLine": 601,
          "endLine": 604
        },
        {
          "name": "getActiveSpotPositionsAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<SpotPosition[]>",
          "startLine": 605,
          "endLine": 614
        },
        {
          "name": "getUnrealizedPNL",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "withFunding",
              "type": "boolean"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "withWeightMarginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "strict",
              "type": "boolean"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 620,
          "endLine": 696
        },
        {
          "name": "getUnrealizedFundingPNL",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "BN",
          "startLine": 702,
          "endLine": 713
        },
        {
          "name": "getFuelBonus",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "now",
              "type": "BN"
            },
            {
              "name": "includeSettled",
              "type": "boolean"
            },
            {
              "name": "includeUnsettled",
              "type": "boolean"
            },
            {
              "name": "givenUserStats",
              "type": "UserStats"
            }
          ],
          "returns": "{ depositFuel: BN; borrowFuel: BN; positionFuel: BN; takerFuel: BN; makerFuel: BN; insuranceFuel: BN; }",
          "startLine": 715,
          "endLine": 847
        },
        {
          "name": "getSpotMarketAssetAndLiabilityValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "strict",
              "type": "boolean"
            },
            {
              "name": "now",
              "type": "BN"
            }
          ],
          "returns": "{ totalAssetValue: BN; totalLiabilityValue: BN; }",
          "startLine": 849,
          "endLine": 1038
        },
        {
          "name": "getSpotMarketLiabilityValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "strict",
              "type": "boolean"
            },
            {
              "name": "now",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 1040,
          "endLine": 1057
        },
        {
          "name": "getSpotLiabilityValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "tokenAmount",
              "type": "BN"
            },
            {
              "name": "strictOraclePrice",
              "type": "StrictOraclePrice"
            },
            {
              "name": "spotMarketAccount",
              "type": "SpotMarketAccount"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 1059,
          "endLine": 1074
        },
        {
          "name": "getSpotMarketAssetValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "strict",
              "type": "boolean"
            },
            {
              "name": "now",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 1076,
          "endLine": 1092
        },
        {
          "name": "getSpotAssetValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "tokenAmount",
              "type": "BN"
            },
            {
              "name": "strictOraclePrice",
              "type": "StrictOraclePrice"
            },
            {
              "name": "spotMarketAccount",
              "type": "SpotMarketAccount"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            }
          ],
          "returns": "BN",
          "startLine": 1094,
          "endLine": 1107
        },
        {
          "name": "getSpotPositionValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "strict",
              "type": "boolean"
            },
            {
              "name": "now",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 1109,
          "endLine": 1127
        },
        {
          "name": "getNetSpotMarketValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "withWeightMarginCategory",
              "type": "MarginCategory"
            }
          ],
          "returns": "BN",
          "startLine": 1129,
          "endLine": 1137
        },
        {
          "name": "getTotalCollateral",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "strict",
              "type": "boolean"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 1143,
          "endLine": 1163
        },
        {
          "name": "getLiquidationBuffer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "any",
          "startLine": 1165,
          "endLine": 1174
        },
        {
          "name": "getHealth",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 1180,
          "endLine": 1208
        },
        {
          "name": "calculateWeightedPerpPositionLiability",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "perpPosition",
              "type": "PerpPosition"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "strict",
              "type": "boolean"
            },
            {
              "name": "enteringHighLeverage",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 1210,
          "endLine": 1307
        },
        {
          "name": "getPerpMarketLiabilityValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "strict",
              "type": "boolean"
            }
          ],
          "returns": "BN",
          "startLine": 1313,
          "endLine": 1328
        },
        {
          "name": "getTotalPerpPositionLiability",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "strict",
              "type": "boolean"
            },
            {
              "name": "enteringHighLeverage",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 1334,
          "endLine": 1355
        },
        {
          "name": "getPerpPositionValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "oraclePriceData",
              "type": "Pick<OraclePriceData, \"price\">"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            }
          ],
          "returns": "BN",
          "startLine": 1361,
          "endLine": 1376
        },
        {
          "name": "getPerpLiabilityValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "oraclePriceData",
              "type": "OraclePriceData"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            }
          ],
          "returns": "BN",
          "startLine": 1382,
          "endLine": 1405
        },
        {
          "name": "getPositionSide",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "currentPosition",
              "type": "Pick<PerpPosition, \"baseAssetAmount\">"
            }
          ],
          "returns": "PositionDirection",
          "startLine": 1407,
          "endLine": 1417
        },
        {
          "name": "getPositionEstimatedExitPriceAndPnl",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "position",
              "type": "PerpPosition"
            },
            {
              "name": "amountToClose",
              "type": "BN"
            },
            {
              "name": "useAMMClose",
              "type": "boolean"
            }
          ],
          "returns": "[BN, BN]",
          "startLine": 1423,
          "endLine": 1479
        },
        {
          "name": "getLeverage",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            }
          ],
          "returns": "BN",
          "startLine": 1485,
          "endLine": 1489
        },
        {
          "name": "calculateLeverageFromComponents",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tperpLiabilityValue,\n\t\tperpPnl,\n\t\tspotAssetValue,\n\t\tspotLiabilityValue,\n\t}",
              "type": "{ perpLiabilityValue: BN; perpPnl: BN; spotAssetValue: BN; spotLiabilityValue: BN; }"
            }
          ],
          "returns": "BN",
          "startLine": 1491,
          "endLine": 1511
        },
        {
          "name": "getLeverageComponents",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            }
          ],
          "returns": "{ perpLiabilityValue: BN; perpPnl: BN; spotAssetValue: BN; spotLiabilityValue: BN; }",
          "startLine": 1513,
          "endLine": 1545
        },
        {
          "name": "isDustDepositPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketAccount",
              "type": "SpotMarketAccount"
            }
          ],
          "returns": "boolean",
          "startLine": 1547,
          "endLine": 1580
        },
        {
          "name": "getSpotMarketAccountsWithDustPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "SpotMarketAccount[]",
          "startLine": 1582,
          "endLine": 1595
        },
        {
          "name": "getTotalLiabilityValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            }
          ],
          "returns": "BN",
          "startLine": 1597,
          "endLine": 1610
        },
        {
          "name": "getTotalAssetValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            }
          ],
          "returns": "BN",
          "startLine": 1612,
          "endLine": 1616
        },
        {
          "name": "getNetUsdValue",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "BN",
          "startLine": 1618,
          "endLine": 1622
        },
        {
          "name": "getTotalAllTimePnl",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "BN",
          "startLine": 1629,
          "endLine": 1637
        },
        {
          "name": "getMaxLeverageForPerp",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "perpMarketIndex",
              "type": "number"
            },
            {
              "name": "_marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "isLp",
              "type": "boolean"
            },
            {
              "name": "enterHighLeverageMode",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 1647,
          "endLine": 1697
        },
        {
          "name": "getMaxLeverageForSpot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "spotMarketIndex",
              "type": "number"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            }
          ],
          "returns": "BN",
          "startLine": 1705,
          "endLine": 1789
        },
        {
          "name": "getMarginRatio",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "BN",
          "startLine": 1795,
          "endLine": 1809
        },
        {
          "name": "canBeLiquidated",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "{ canBeLiquidated: boolean; marginRequirement: BN; totalCollateral: BN; }",
          "startLine": 1811,
          "endLine": 1834
        },
        {
          "name": "isBeingLiquidated",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 1836,
          "endLine": 1842
        },
        {
          "name": "hasStatus",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "status",
              "type": "UserStatus"
            }
          ],
          "returns": "boolean",
          "startLine": 1844,
          "endLine": 1846
        },
        {
          "name": "isBankrupt",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 1848,
          "endLine": 1850
        },
        {
          "name": "isHighLeverageMode",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            }
          ],
          "returns": "boolean",
          "startLine": 1852,
          "endLine": 1858
        },
        {
          "name": "needsToSettleFundingPayment",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "boolean",
          "startLine": 1864,
          "endLine": 1887
        },
        {
          "name": "spotLiquidationPrice",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "positionBaseSizeChange",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 1894,
          "endLine": 1981
        },
        {
          "name": "liquidationPrice",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "positionBaseSizeChange",
              "type": "BN"
            },
            {
              "name": "estimatedEntryPrice",
              "type": "BN"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "offsetCollateral",
              "type": "any"
            },
            {
              "name": "enteringHighLeverage",
              "type": "any"
            }
          ],
          "returns": "BN",
          "startLine": 1993,
          "endLine": 2114
        },
        {
          "name": "calculateEntriesEffectOnFreeCollateral",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "market",
              "type": "PerpMarketAccount"
            },
            {
              "name": "oraclePrice",
              "type": "BN"
            },
            {
              "name": "perpPosition",
              "type": "PerpPosition"
            },
            {
              "name": "positionBaseSizeChange",
              "type": "BN"
            },
            {
              "name": "estimatedEntryPrice",
              "type": "BN"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "enteringHighLeverage",
              "type": "any"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            }
          ],
          "returns": "BN",
          "startLine": 2116,
          "endLine": 2207
        },
        {
          "name": "calculateFreeCollateralDeltaForPerp",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "market",
              "type": "PerpMarketAccount"
            },
            {
              "name": "perpPosition",
              "type": "PerpPosition"
            },
            {
              "name": "positionBaseSizeChange",
              "type": "BN"
            },
            {
              "name": "oraclePrice",
              "type": "BN"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            },
            {
              "name": "enteringHighLeverage",
              "type": "any"
            }
          ],
          "returns": "any",
          "startLine": 2209,
          "endLine": 2283
        },
        {
          "name": "calculateFreeCollateralDeltaForSpot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "market",
              "type": "SpotMarketAccount"
            },
            {
              "name": "signedTokenAmount",
              "type": "BN"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            }
          ],
          "returns": "BN",
          "startLine": 2285,
          "endLine": 2317
        },
        {
          "name": "liquidationPriceAfterClose",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "positionMarketIndex",
              "type": "number"
            },
            {
              "name": "closeQuoteAmount",
              "type": "BN"
            },
            {
              "name": "estimatedEntryPrice",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 2325,
          "endLine": 2347
        },
        {
          "name": "getMarginUSDCRequiredForTrade",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "targetMarketIndex",
              "type": "number"
            },
            {
              "name": "baseSize",
              "type": "BN"
            },
            {
              "name": "estEntryPrice",
              "type": "BN"
            },
            {
              "name": "perpMarketMaxMarginRatio",
              "type": "number"
            }
          ],
          "returns": "BN",
          "startLine": 2349,
          "endLine": 2367
        },
        {
          "name": "getCollateralDepositRequiredForTrade",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "targetMarketIndex",
              "type": "number"
            },
            {
              "name": "baseSize",
              "type": "BN"
            },
            {
              "name": "collateralIndex",
              "type": "number"
            },
            {
              "name": "perpMarketMaxMarginRatio",
              "type": "number"
            }
          ],
          "returns": "BN",
          "startLine": 2369,
          "endLine": 2387
        },
        {
          "name": "getMaxTradeSizeUSDCForPerp",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "targetMarketIndex",
              "type": "number"
            },
            {
              "name": "tradeSide",
              "type": "PositionDirection"
            },
            {
              "name": "isLp",
              "type": "boolean"
            },
            {
              "name": "enterHighLeverageMode",
              "type": "any"
            },
            {
              "name": "maxMarginRatio",
              "type": "any"
            }
          ],
          "returns": "{ tradeSize: BN; oppositeSideTradeSize: BN; }",
          "startLine": 2398,
          "endLine": 2548
        },
        {
          "name": "getMaxTradeSizeUSDCForSpot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "targetMarketIndex",
              "type": "number"
            },
            {
              "name": "direction",
              "type": "PositionDirection"
            },
            {
              "name": "currentQuoteAssetValue",
              "type": "BN"
            },
            {
              "name": "currentSpotMarketNetValue",
              "type": "BN"
            }
          ],
          "returns": "BN",
          "startLine": 2559,
          "endLine": 2635
        },
        {
          "name": "getMaxSwapAmount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tinMarketIndex,\n\t\toutMarketIndex,\n\t\tcalculateSwap,\n\t\titerationLimit = 1000,\n\t}",
              "type": "{ inMarketIndex: number; outMarketIndex: number; calculateSwap?: (inAmount: BN) => BN; iterationLimit?: number; }"
            }
          ],
          "returns": "{ inAmount: BN; outAmount: BN; leverage: BN; }",
          "startLine": 2646,
          "endLine": 2856
        },
        {
          "name": "cloneAndUpdateSpotPosition",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "position",
              "type": "SpotPosition"
            },
            {
              "name": "tokenAmount",
              "type": "BN"
            },
            {
              "name": "market",
              "type": "SpotMarketAccount"
            }
          ],
          "returns": "SpotPosition",
          "startLine": 2858,
          "endLine": 2906
        },
        {
          "name": "calculateSpotPositionFreeCollateralContribution",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "spotPosition",
              "type": "SpotPosition"
            },
            {
              "name": "strictOraclePrice",
              "type": "StrictOraclePrice"
            }
          ],
          "returns": "BN",
          "startLine": 2908,
          "endLine": 2926
        },
        {
          "name": "calculateSpotPositionLeverageContribution",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "spotPosition",
              "type": "SpotPosition"
            },
            {
              "name": "strictOraclePrice",
              "type": "StrictOraclePrice"
            }
          ],
          "returns": "{ totalAssetValue: BN; totalLiabilityValue: BN; }",
          "startLine": 2928,
          "endLine": 2965
        },
        {
          "name": "accountLeverageAfterSwap",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tinMarketIndex,\n\t\toutMarketIndex,\n\t\tinAmount,\n\t\toutAmount,\n\t}",
              "type": "{ inMarketIndex: number; outMarketIndex: number; inAmount: BN; outAmount: BN; }"
            }
          ],
          "returns": "BN",
          "startLine": 2974,
          "endLine": 3067
        },
        {
          "name": "accountLeverageRatioAfterTrade",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "targetMarketIndex",
              "type": "number"
            },
            {
              "name": "targetMarketType",
              "type": "MarketType"
            },
            {
              "name": "tradeQuoteAmount",
              "type": "BN"
            },
            {
              "name": "tradeSide",
              "type": "PositionDirection"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            }
          ],
          "returns": "BN",
          "startLine": 3080,
          "endLine": 3253
        },
        {
          "name": "getUserFeeTier",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketType",
              "type": "MarketType"
            },
            {
              "name": "now",
              "type": "BN"
            }
          ],
          "returns": "FeeTier",
          "startLine": 3255,
          "endLine": 3321
        },
        {
          "name": "calculateFeeForQuoteAmount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "quoteAmount",
              "type": "BN"
            },
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "enteringHighLeverageMode",
              "type": "boolean"
            }
          ],
          "returns": "BN",
          "startLine": 3328,
          "endLine": 3350
        },
        {
          "name": "getWithdrawalLimit",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            },
            {
              "name": "reduceOnly",
              "type": "boolean"
            }
          ],
          "returns": "BN",
          "startLine": 3358,
          "endLine": 3444
        },
        {
          "name": "canBypassWithdrawLimits",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "{ canBypass: boolean; netDeposits: BN; depositAmount: BN; maxDepositAmount: BN; }",
          "startLine": 3446,
          "endLine": 3499
        },
        {
          "name": "canMakeIdle",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "slot",
              "type": "BN"
            }
          ],
          "returns": "boolean",
          "startLine": 3501,
          "endLine": 3554
        },
        {
          "name": "getSafestTiers",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "{ perpTier: number; spotTier: number; }",
          "startLine": 3556,
          "endLine": 3586
        },
        {
          "name": "getPerpPositionHealth",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarginCategory,\n\t\tperpPosition,\n\t\toraclePriceData,\n\t\tquoteOraclePriceData,\n\t\tincludeOpenOrders = true,\n\t}",
              "type": "{ marginCategory: MarginCategory; perpPosition: PerpPosition; oraclePriceData?: OraclePriceData; quoteOraclePriceData?: OraclePriceData; includeOpenOrders?: boolean; }"
            }
          ],
          "returns": "HealthComponent",
          "startLine": 3588,
          "endLine": 3663
        },
        {
          "name": "getHealthComponents",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tmarginCategory,\n\t}",
              "type": "{ marginCategory: MarginCategory; }"
            }
          ],
          "returns": "HealthComponents",
          "startLine": 3665,
          "endLine": 3844
        },
        {
          "name": "getTotalPerpPositionValueExcludingMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "marketToIgnore",
              "type": "number"
            },
            {
              "name": "marginCategory",
              "type": "MarginCategory"
            },
            {
              "name": "liquidationBuffer",
              "type": "BN"
            },
            {
              "name": "includeOpenOrders",
              "type": "boolean"
            }
          ],
          "returns": "BN",
          "startLine": 3851,
          "endLine": 3875
        },
        {
          "name": "getMMOracleDataForPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "MMOraclePriceData",
          "startLine": 3877,
          "endLine": 3879
        },
        {
          "name": "getOracleDataForPerpMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 3881,
          "endLine": 3883
        },
        {
          "name": "getOracleDataForSpotMarket",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "marketIndex",
              "type": "number"
            }
          ],
          "returns": "OraclePriceData",
          "startLine": 3885,
          "endLine": 3887
        },
        {
          "name": "getActivePositions",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "{ activePerpPositions: number[]; activeSpotPositions: number[]; }",
          "startLine": 3892,
          "endLine": 3908
        }
      ],
      "startLine": 110,
      "endLine": 3909
    },
    {
      "file": "protocol-v2/sdk/src/userMap/grpcSubscription.ts",
      "name": "grpcSubscription",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tgrpcConfigs,\n\t\tuserMap,\n\t\tskipInitialLoad = false,\n\t\tresubOpts,\n\t\tincludeIdle = false,\n\t\tdecodeFn,\n\t\tadditionalFilters = undefined,\n\t}",
              "type": "{ grpcConfigs: GrpcConfigs; userMap: UserMap; skipInitialLoad?: boolean; resubOpts?: ResubOpts; includeIdle?: boolean; decodeFn: (name: string, data: Buffer<ArrayBufferLike>) => UserAccount; additionalFilters?: MemcmpFilter[]; }"
            }
          ],
          "startLine": 20,
          "endLine": 44
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 46,
          "endLine": 78
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 80,
          "endLine": 84
        }
      ],
      "startLine": 9,
      "endLine": 85
    },
    {
      "file": "protocol-v2/sdk/src/userMap/PollingSubscription.ts",
      "name": "PollingSubscription",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tuserMap,\n\t\tfrequency,\n\t\tskipInitialLoad = false,\n\t}",
              "type": "{ userMap: UserMap; frequency: number; skipInitialLoad?: boolean; includeIdle?: boolean; }"
            }
          ],
          "startLine": 10,
          "endLine": 23
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 25,
          "endLine": 39
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 41,
          "endLine": 46
        }
      ],
      "startLine": 3,
      "endLine": 47
    },
    {
      "file": "protocol-v2/sdk/src/userMap/referrerMap.ts",
      "name": "ReferrerMap",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "driftClient",
              "type": "DriftClient"
            },
            {
              "name": "parallelSync",
              "type": "boolean"
            }
          ],
          "startLine": 42,
          "endLine": 45
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 50,
          "endLine": 57
        },
        {
          "name": "has",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "boolean",
          "startLine": 59,
          "endLine": 61
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "ReferrerInfo",
          "startLine": 63,
          "endLine": 65
        },
        {
          "name": "addReferrer",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "string"
            },
            {
              "name": "referrer",
              "type": "string"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 67,
          "endLine": 86
        },
        {
          "name": "mustGet",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "Promise<ReferrerInfo>",
          "startLine": 94,
          "endLine": 101
        },
        {
          "name": "getReferrer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "ReferrerInfo",
          "startLine": 103,
          "endLine": 133
        },
        {
          "name": "size",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 135,
          "endLine": 137
        },
        {
          "name": "numberOfReferred",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 139,
          "endLine": 143
        },
        {
          "name": "sync",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 145,
          "endLine": 170
        },
        {
          "name": "syncAll",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 172,
          "endLine": 210
        },
        {
          "name": "syncReferrer",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "referrerFilter",
              "type": "MemcmpFilter"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 212,
          "endLine": 261
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 263,
          "endLine": 266
        },
        {
          "name": "dump",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "{ authority: string; referrer: string; referrerInfo?: ReferrerInfo; }[]",
          "startLine": 272,
          "endLine": 290
        }
      ],
      "startLine": 21,
      "endLine": 291
    },
    {
      "file": "protocol-v2/sdk/src/userMap/revenueShareEscrowMap.ts",
      "name": "RevenueShareEscrowMap",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "driftClient",
              "type": "DriftClient"
            },
            {
              "name": "parallelSync",
              "type": "boolean"
            }
          ],
          "startLine": 24,
          "endLine": 27
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 32,
          "endLine": 39
        },
        {
          "name": "has",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "boolean",
          "startLine": 41,
          "endLine": 43
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "RevenueShareEscrowAccount",
          "startLine": 45,
          "endLine": 49
        },
        {
          "name": "mustGet",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "Promise<RevenueShareEscrowAccount>",
          "startLine": 57,
          "endLine": 64
        },
        {
          "name": "addRevenueShareEscrow",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "string"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 66,
          "endLine": 93
        },
        {
          "name": "size",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 95,
          "endLine": 97
        },
        {
          "name": "sync",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 99,
          "endLine": 114
        },
        {
          "name": "slowSync",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 120,
          "endLine": 139
        },
        {
          "name": "syncAll",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 141,
          "endLine": 229
        },
        {
          "name": "getAll",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Map<string, RevenueShareEscrowAccount>",
          "startLine": 234,
          "endLine": 236
        },
        {
          "name": "getAuthorities",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "string[]",
          "startLine": 241,
          "endLine": 243
        },
        {
          "name": "getEscrowsWithApprovedReferrers",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Map<string, RevenueShareEscrowAccount>",
          "startLine": 248,
          "endLine": 259
        },
        {
          "name": "getEscrowsWithOrders",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "Map<string, RevenueShareEscrowAccount>",
          "startLine": 264,
          "endLine": 272
        },
        {
          "name": "getByReferrer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "referrerPublicKey",
              "type": "string"
            }
          ],
          "returns": "RevenueShareEscrowAccount",
          "startLine": 277,
          "endLine": 286
        },
        {
          "name": "getAllByReferrer",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "referrerPublicKey",
              "type": "string"
            }
          ],
          "returns": "RevenueShareEscrowAccount[]",
          "startLine": 291,
          "endLine": 301
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 303,
          "endLine": 305
        }
      ],
      "startLine": 7,
      "endLine": 306
    },
    {
      "file": "protocol-v2/sdk/src/userMap/userMap.ts",
      "name": "UserMap",
      "abstract": false,
      "implements": [
        "UserMapInterface"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "UserMapConfig"
            }
          ],
          "startLine": 113,
          "endLine": 180
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 182,
          "endLine": 198
        },
        {
          "name": "addPubkey",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userAccountPublicKey",
              "type": "PublicKey"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "accountSubscription",
              "type": "UserSubscriptionConfig"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 200,
          "endLine": 227
        },
        {
          "name": "has",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "returns": "boolean",
          "startLine": 229,
          "endLine": 231
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "returns": "User",
          "startLine": 238,
          "endLine": 240
        },
        {
          "name": "getWithSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "returns": "DataAndSlot<User>",
          "startLine": 241,
          "endLine": 243
        },
        {
          "name": "mustGet",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "accountSubscription",
              "type": "UserSubscriptionConfig"
            }
          ],
          "returns": "Promise<User>",
          "startLine": 250,
          "endLine": 263
        },
        {
          "name": "mustGetWithSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "accountSubscription",
              "type": "UserSubscriptionConfig"
            }
          ],
          "returns": "Promise<DataAndSlot<User>>",
          "startLine": 264,
          "endLine": 277
        },
        {
          "name": "mustGetUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "returns": "Promise<UserAccount>",
          "startLine": 279,
          "endLine": 282
        },
        {
          "name": "getUserAuthority",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            }
          ],
          "returns": "PublicKey",
          "startLine": 289,
          "endLine": 295
        },
        {
          "name": "getDLOB",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "slot",
              "type": "number"
            },
            {
              "name": "protectedMakerParamsMap",
              "type": "ProtectMakerParamsMap"
            }
          ],
          "returns": "Promise<DLOB>",
          "startLine": 302,
          "endLine": 309
        },
        {
          "name": "updateWithOrderRecord",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "record",
              "type": "OrderRecord"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 311,
          "endLine": 315
        },
        {
          "name": "updateWithEventRecord",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "record",
              "type": "any"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 317,
          "endLine": 351
        },
        {
          "name": "values",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "IterableIterator<User>",
          "startLine": 353,
          "endLine": 357
        },
        {
          "name": "valuesWithSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "IterableIterator<DataAndSlot<User>>",
          "startLine": 358,
          "endLine": 360
        },
        {
          "name": "entries",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "IterableIterator<[string, User]>",
          "startLine": 362,
          "endLine": 366
        },
        {
          "name": "entriesWithSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "IterableIterator<[string, DataAndSlot<User>]>",
          "startLine": 367,
          "endLine": 369
        },
        {
          "name": "size",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 371,
          "endLine": 373
        },
        {
          "name": "getUniqueAuthorities",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "filterCriteria",
              "type": "UserAccountFilterCriteria"
            }
          ],
          "returns": "PublicKey[]",
          "startLine": 380,
          "endLine": 399
        },
        {
          "name": "sync",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 401,
          "endLine": 407
        },
        {
          "name": "getFilters",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "MemcmpFilter[]",
          "startLine": 409,
          "endLine": 421
        },
        {
          "name": "defaultSync",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 428,
          "endLine": 518
        },
        {
          "name": "paginatedSync",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 525,
          "endLine": 640
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 642,
          "endLine": 660
        },
        {
          "name": "updateUserAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "key",
              "type": "string"
            },
            {
              "name": "userAccount",
              "type": "UserAccount"
            },
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 662,
          "endLine": 681
        },
        {
          "name": "updateLatestSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "slot",
              "type": "number"
            }
          ],
          "returns": "void",
          "startLine": 683,
          "endLine": 685
        },
        {
          "name": "getSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 687,
          "endLine": 689
        }
      ],
      "startLine": 80,
      "endLine": 690
    },
    {
      "file": "protocol-v2/sdk/src/userMap/userStatsMap.ts",
      "name": "UserStatsMap",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "driftClient",
              "type": "DriftClient"
            },
            {
              "name": "bulkAccountLoader",
              "type": "BulkAccountLoader"
            },
            {
              "name": "syncConfig",
              "type": "SyncConfig"
            }
          ],
          "startLine": 44,
          "endLine": 67
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authorities",
              "type": "PublicKey[]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 69,
          "endLine": 76
        },
        {
          "name": "addUserStat",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authority",
              "type": "PublicKey"
            },
            {
              "name": "userStatsAccount",
              "type": "UserStatsAccount"
            },
            {
              "name": "skipFetch",
              "type": "boolean"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 84,
          "endLine": 109
        },
        {
          "name": "updateWithOrderRecord",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "record",
              "type": "OrderRecord"
            },
            {
              "name": "userMap",
              "type": "UserMap"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 111,
          "endLine": 116
        },
        {
          "name": "updateWithEventRecord",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "record",
              "type": "any"
            },
            {
              "name": "userMap",
              "type": "UserMap"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 118,
          "endLine": 183
        },
        {
          "name": "has",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "boolean",
          "startLine": 185,
          "endLine": 187
        },
        {
          "name": "get",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "UserStats",
          "startLine": 189,
          "endLine": 191
        },
        {
          "name": "mustGet",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authorityPublicKey",
              "type": "string"
            }
          ],
          "returns": "Promise<UserStats>",
          "startLine": 199,
          "endLine": 208
        },
        {
          "name": "values",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "IterableIterator<UserStats>",
          "startLine": 210,
          "endLine": 212
        },
        {
          "name": "size",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "number",
          "startLine": 214,
          "endLine": 216
        },
        {
          "name": "sync",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "authorities",
              "type": "PublicKey[]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 223,
          "endLine": 229
        },
        {
          "name": "defaultSync",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "authorities",
              "type": "PublicKey[]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 236,
          "endLine": 243
        },
        {
          "name": "paginatedSync",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "authorities",
              "type": "PublicKey[]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 249,
          "endLine": 357
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 359,
          "endLine": 364
        }
      ],
      "startLine": 25,
      "endLine": 365
    },
    {
      "file": "protocol-v2/sdk/src/userMap/WebsocketSubscription.ts",
      "name": "WebsocketSubscription",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "{\n\t\tuserMap,\n\t\tcommitment,\n\t\tskipInitialLoad = false,\n\t\tresubOpts,\n\t\tincludeIdle = false,\n\t\tdecodeFn,\n\t\tadditionalFilters = undefined,\n\t}",
              "type": "{ userMap: UserMap; commitment: Commitment; skipInitialLoad?: boolean; resubOpts?: ResubOpts; includeIdle?: boolean; decodeFn: (name: string, data: Buffer<ArrayBufferLike>) => UserAccount; additionalFilters?: MemcmpFilter[]; }"
            }
          ],
          "startLine": 19,
          "endLine": 43
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 45,
          "endLine": 77
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 79,
          "endLine": 83
        }
      ],
      "startLine": 8,
      "endLine": 84
    },
    {
      "file": "protocol-v2/sdk/src/userStats.ts",
      "name": "UserStats",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "config",
              "type": "UserStatsConfig"
            }
          ],
          "startLine": 28,
          "endLine": 67
        },
        {
          "name": "subscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "userStatsAccount",
              "type": "UserStatsAccount"
            }
          ],
          "returns": "Promise<boolean>",
          "startLine": 69,
          "endLine": 76
        },
        {
          "name": "fetchAccounts",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 78,
          "endLine": 80
        },
        {
          "name": "unsubscribe",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 82,
          "endLine": 85
        },
        {
          "name": "getAccountAndSlot",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "DataAndSlot<UserStatsAccount>",
          "startLine": 87,
          "endLine": 89
        },
        {
          "name": "getAccount",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "UserStatsAccount",
          "startLine": 91,
          "endLine": 93
        },
        {
          "name": "getInsuranceFuelBonus",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "now",
              "type": "BN"
            },
            {
              "name": "includeSettled",
              "type": "boolean"
            },
            {
              "name": "includeUnsettled",
              "type": "boolean"
            }
          ],
          "returns": "BN",
          "startLine": 95,
          "endLine": 152
        },
        {
          "name": "getReferrerInfo",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "ReferrerInfo",
          "startLine": 154,
          "endLine": 170
        },
        {
          "name": "getOldestActionTs",
          "kind": "method",
          "isStatic": true,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "account",
              "type": "UserStatsAccount"
            }
          ],
          "returns": "number",
          "startLine": 172,
          "endLine": 178
        }
      ],
      "startLine": 22,
      "endLine": 179
    },
    {
      "file": "protocol-v2/sdk/src/util/chainClock.ts",
      "name": "ChainClock",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "ChainClickInitialisationProps"
            }
          ],
          "startLine": 20,
          "endLine": 25
        },
        {
          "name": "update",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "props",
              "type": "ChainClockUpdateProps"
            }
          ],
          "returns": "void",
          "startLine": 27,
          "endLine": 36
        },
        {
          "name": "getState",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "commitment",
              "type": "Commitment"
            }
          ],
          "returns": "ChainClockProgress",
          "startLine": 38,
          "endLine": 40
        }
      ],
      "startLine": 17,
      "endLine": 41
    },
    {
      "file": "protocol-v2/sdk/src/util/TransactionConfirmationManager.ts",
      "name": "TransactionConfirmationManager",
      "abstract": false,
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "connection",
              "type": "Connection"
            }
          ],
          "startLine": 50,
          "endLine": 52
        },
        {
          "name": "confirmTransactionWebSocket",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "txSig",
              "type": "string"
            },
            {
              "name": "timeout",
              "type": "number"
            },
            {
              "name": "desiredConfirmationStatus",
              "type": "TransactionConfirmationStatus"
            }
          ],
          "returns": "Promise<RpcResponseAndContext<SignatureResult>>",
          "startLine": 54,
          "endLine": 158
        },
        {
          "name": "confirmTransactionPolling",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "txSig",
              "type": "string"
            },
            {
              "name": "desiredConfirmationStatus",
              "type": "TransactionConfirmationStatus"
            },
            {
              "name": "timeout",
              "type": "number"
            },
            {
              "name": "pollInterval",
              "type": "number"
            },
            {
              "name": "searchTransactionHistory",
              "type": "boolean"
            }
          ],
          "returns": "Promise<SignatureStatus>",
          "startLine": 160,
          "endLine": 190
        },
        {
          "name": "startConfirmationLoop",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [],
          "returns": "void",
          "startLine": 192,
          "endLine": 194
        },
        {
          "name": "checkPendingConfirmations",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [],
          "returns": "Promise<void>",
          "startLine": 196,
          "endLine": 221
        },
        {
          "name": "checkStatusMatchesDesiredConfirmationStatus",
          "kind": "method",
          "isStatic": false,
          "isAsync": false,
          "access": "private",
          "parameters": [
            {
              "name": "status",
              "type": "SignatureStatus"
            },
            {
              "name": "desiredConfirmationStatus",
              "type": "TransactionConfirmationStatus"
            }
          ],
          "returns": "boolean",
          "startLine": 223,
          "endLine": 236
        },
        {
          "name": "checkTransactionStatuses",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "private",
          "parameters": [
            {
              "name": "requests",
              "type": "TransactionConfirmationRequest[]"
            }
          ],
          "returns": "Promise<void>",
          "startLine": 238,
          "endLine": 291
        }
      ],
      "startLine": 44,
      "endLine": 292
    },
    {
      "file": "protocol-v2/sdk/src/wallet.ts",
      "name": "Wallet",
      "abstract": false,
      "implements": [
        "IWallet",
        "IVersionedWallet"
      ],
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "payer",
              "type": "Keypair"
            }
          ],
          "startLine": 11,
          "endLine": 11
        },
        {
          "name": "signTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "Transaction"
            }
          ],
          "returns": "Promise<Transaction>",
          "startLine": 13,
          "endLine": 16
        },
        {
          "name": "signVersionedTransaction",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "tx",
              "type": "VersionedTransaction"
            }
          ],
          "returns": "Promise<VersionedTransaction>",
          "startLine": 18,
          "endLine": 23
        },
        {
          "name": "signAllTransactions",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "txs",
              "type": "Transaction[]"
            }
          ],
          "returns": "Promise<Transaction[]>",
          "startLine": 25,
          "endLine": 30
        },
        {
          "name": "signAllVersionedTransactions",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "txs",
              "type": "VersionedTransaction[]"
            }
          ],
          "returns": "Promise<VersionedTransaction[]>",
          "startLine": 32,
          "endLine": 39
        },
        {
          "name": "publicKey",
          "kind": "get",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [],
          "returns": "PublicKey",
          "startLine": 41,
          "endLine": 43
        }
      ],
      "startLine": 10,
      "endLine": 44
    },
    {
      "file": "protocol-v2/sdk/src/wallet.ts",
      "name": "WalletV2",
      "abstract": false,
      "extends": "Wallet",
      "methods": [
        {
          "name": "constructor",
          "kind": "constructor",
          "isStatic": false,
          "isAsync": false,
          "access": "public",
          "parameters": [
            {
              "name": "payer",
              "type": "Keypair"
            }
          ],
          "startLine": 47,
          "endLine": 49
        },
        {
          "name": "signMessage",
          "kind": "method",
          "isStatic": false,
          "isAsync": true,
          "access": "public",
          "parameters": [
            {
              "name": "message",
              "type": "Uint8Array<ArrayBufferLike>"
            }
          ],
          "returns": "Promise<Uint8Array<ArrayBufferLike>>",
          "startLine": 51,
          "endLine": 53
        }
      ],
      "startLine": 46,
      "endLine": 54
    }
  ],
  "functions": [
    {
      "file": "protocol-v2/sdk/src/accounts/bulkUserStatsSubscription.ts",
      "name": "bulkPollingUserStatsSubscribe",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "userStats",
          "type": "UserStats[]"
        },
        {
          "name": "accountLoader",
          "type": "BulkAccountLoader"
        }
      ],
      "returns": "Promise<void>",
      "startLine": 9,
      "endLine": 33
    },
    {
      "file": "protocol-v2/sdk/src/accounts/bulkUserSubscription.ts",
      "name": "bulkPollingUserSubscribe",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "users",
          "type": "User[]"
        },
        {
          "name": "accountLoader",
          "type": "BulkAccountLoader"
        }
      ],
      "returns": "Promise<void>",
      "startLine": 9,
      "endLine": 33
    },
    {
      "file": "protocol-v2/sdk/src/accounts/fetch.ts",
      "name": "fetchRevenueShareAccount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "program",
          "type": "Program<Idl>"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        }
      ],
      "returns": "Promise<RevenueShareAccount>",
      "startLine": 75,
      "endLine": 92
    },
    {
      "file": "protocol-v2/sdk/src/accounts/fetch.ts",
      "name": "fetchRevenueShareEscrowAccount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "program",
          "type": "Program<Idl>"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        }
      ],
      "returns": "Promise<RevenueShareEscrowAccount>",
      "startLine": 94,
      "endLine": 115
    },
    {
      "file": "protocol-v2/sdk/src/accounts/fetch.ts",
      "name": "fetchUserAccounts",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "program",
          "type": "Program<Idl>"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        },
        {
          "name": "limit",
          "type": "number"
        }
      ],
      "returns": "Promise<UserAccount[]>",
      "startLine": 16,
      "endLine": 30
    },
    {
      "file": "protocol-v2/sdk/src/accounts/fetch.ts",
      "name": "fetchUserAccountsUsingKeys",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "program",
          "type": "Program<Idl>"
        },
        {
          "name": "userAccountPublicKeys",
          "type": "PublicKey[]"
        }
      ],
      "returns": "Promise<UserAccount[]>",
      "startLine": 32,
      "endLine": 51
    },
    {
      "file": "protocol-v2/sdk/src/accounts/fetch.ts",
      "name": "fetchUserStatsAccount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "program",
          "type": "Program<Idl>"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        }
      ],
      "returns": "Promise<UserStatsAccount>",
      "startLine": 53,
      "endLine": 73
    },
    {
      "file": "protocol-v2/sdk/src/accounts/grpcMultiAccountSubscriber.ts",
      "name": "commitmentLevelToCommitment",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "commitmentLevel",
          "type": "CommitmentLevel"
        }
      ],
      "returns": "Commitment",
      "startLine": 24,
      "endLine": 37
    },
    {
      "file": "protocol-v2/sdk/src/accounts/utils.ts",
      "name": "capitalize",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "value",
          "type": "string"
        }
      ],
      "returns": "string",
      "startLine": 6,
      "endLine": 8
    },
    {
      "file": "protocol-v2/sdk/src/accounts/utils.ts",
      "name": "findDelistedPerpMarketsAndOracles",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpMarkets",
          "type": "DataAndSlot<PerpMarketAccount>[]"
        },
        {
          "name": "spotMarkets",
          "type": "DataAndSlot<SpotMarketAccount>[]"
        }
      ],
      "returns": "{ perpMarketIndexes: number[]; oracles: OracleInfo[]; }",
      "startLine": 10,
      "endLine": 62
    },
    {
      "file": "protocol-v2/sdk/src/addresses/marketAddresses.ts",
      "name": "getMarketAddress",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "marketIndex",
          "type": "number"
        }
      ],
      "returns": "Promise<PublicKey>",
      "startLine": 5,
      "endLine": 17
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getDriftSignerPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 215,
      "endLine": 220
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getDriftStateAccountPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        }
      ],
      "returns": "Promise<PublicKey>",
      "startLine": 16,
      "endLine": 20
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getDriftStateAccountPublicKeyAndNonce",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        }
      ],
      "returns": "Promise<[PublicKey, number]>",
      "startLine": 7,
      "endLine": 14
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getFuelOverflowAccountPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 75,
      "endLine": 86
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getHighLeverageModeConfigPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 361,
      "endLine": 368
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getIfRebalanceConfigPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "inMarketIndex",
          "type": "number"
        },
        {
          "name": "outMarketIndex",
          "type": "number"
        }
      ],
      "returns": "PublicKey",
      "startLine": 383,
      "endLine": 396
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getInsuranceFundStakeAccountPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        },
        {
          "name": "marketIndex",
          "type": "number"
        }
      ],
      "returns": "PublicKey",
      "startLine": 200,
      "endLine": 213
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getInsuranceFundVaultPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "marketIndex",
          "type": "number"
        }
      ],
      "returns": "Promise<PublicKey>",
      "startLine": 185,
      "endLine": 198
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getOpenbookV2FulfillmentConfigPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "market",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 272,
      "endLine": 285
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getPerpMarketPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "marketIndex",
          "type": "number"
        }
      ],
      "returns": "Promise<PublicKey>",
      "startLine": 114,
      "endLine": 127
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getPerpMarketPublicKeySync",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "marketIndex",
          "type": "number"
        }
      ],
      "returns": "PublicKey",
      "startLine": 129,
      "endLine": 140
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getPhoenixFulfillmentConfigPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "market",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 259,
      "endLine": 270
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getPrelaunchOraclePublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "marketIndex",
          "type": "number"
        }
      ],
      "returns": "PublicKey",
      "startLine": 309,
      "endLine": 320
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getProtectedMakerModeConfigPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 370,
      "endLine": 381
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getProtocolIfSharesTransferConfigPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 300,
      "endLine": 307
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getPythLazerOraclePublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "progarmId",
          "type": "PublicKey"
        },
        {
          "name": "feedId",
          "type": "number"
        }
      ],
      "returns": "PublicKey",
      "startLine": 335,
      "endLine": 350
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getPythPullOraclePublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "progarmId",
          "type": "PublicKey"
        },
        {
          "name": "feedId",
          "type": "Uint8Array<ArrayBufferLike>"
        }
      ],
      "returns": "PublicKey",
      "startLine": 322,
      "endLine": 333
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getReferrerNamePublicKeySync",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "nameBuffer",
          "type": "number[]"
        }
      ],
      "returns": "PublicKey",
      "startLine": 287,
      "endLine": 298
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getRevenueShareAccountPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 398,
      "endLine": 409
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getRevenueShareEscrowAccountPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 411,
      "endLine": 422
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getSerumFulfillmentConfigPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "market",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 246,
      "endLine": 257
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getSerumOpenOrdersPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "market",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 222,
      "endLine": 233
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getSerumSignerPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "market",
          "type": "PublicKey"
        },
        {
          "name": "nonce",
          "type": "BN"
        }
      ],
      "returns": "PublicKey",
      "startLine": 235,
      "endLine": 244
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getSignedMsgUserAccountPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 88,
      "endLine": 99
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getSignedMsgWsDelegatesAccountPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 101,
      "endLine": 112
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getSpotMarketPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "marketIndex",
          "type": "number"
        }
      ],
      "returns": "Promise<PublicKey>",
      "startLine": 142,
      "endLine": 155
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getSpotMarketPublicKeySync",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "marketIndex",
          "type": "number"
        }
      ],
      "returns": "PublicKey",
      "startLine": 157,
      "endLine": 168
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getSpotMarketVaultPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "marketIndex",
          "type": "number"
        }
      ],
      "returns": "Promise<PublicKey>",
      "startLine": 170,
      "endLine": 183
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getTokenProgramForSpotMarket",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "spotMarketAccount",
          "type": "SpotMarketAccount"
        }
      ],
      "returns": "PublicKey",
      "startLine": 352,
      "endLine": 359
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getUserAccountPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        },
        {
          "name": "subAccountId",
          "type": "number"
        }
      ],
      "returns": "Promise<PublicKey>",
      "startLine": 37,
      "endLine": 45
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getUserAccountPublicKeyAndNonce",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        },
        {
          "name": "subAccountId",
          "type": "number"
        }
      ],
      "returns": "Promise<[PublicKey, number]>",
      "startLine": 22,
      "endLine": 35
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getUserAccountPublicKeySync",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        },
        {
          "name": "subAccountId",
          "type": "number"
        }
      ],
      "returns": "PublicKey",
      "startLine": 47,
      "endLine": 60
    },
    {
      "file": "protocol-v2/sdk/src/addresses/pda.ts",
      "name": "getUserStatsAccountPublicKey",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "authority",
          "type": "PublicKey"
        }
      ],
      "returns": "PublicKey",
      "startLine": 62,
      "endLine": 73
    },
    {
      "file": "protocol-v2/sdk/src/assert/assert.ts",
      "name": "assert",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "condition",
          "type": "boolean"
        },
        {
          "name": "error",
          "type": "string"
        }
      ],
      "returns": "void",
      "startLine": 1,
      "endLine": 5
    },
    {
      "file": "protocol-v2/sdk/src/bankrun/bankrunConnection.ts",
      "name": "asBN",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "value",
          "type": "number | bigint"
        }
      ],
      "returns": "BN",
      "startLine": 558,
      "endLine": 560
    },
    {
      "file": "protocol-v2/sdk/src/config.ts",
      "name": "findAllMarketAndOracles",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "program",
          "type": "Program<Idl>"
        }
      ],
      "returns": "Promise<{ perpMarketIndexes: number[]; perpMarketAccounts: PerpMarketAccount[]; spotMarketIndexes: number[]; oracleInfos: OracleInfo[]; spotMarketAccounts: SpotMarketAccount[]; }>",
      "startLine": 170,
      "endLine": 218
    },
    {
      "file": "protocol-v2/sdk/src/config.ts",
      "name": "getConfig",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "DriftConfig",
      "startLine": 107,
      "endLine": 107
    },
    {
      "file": "protocol-v2/sdk/src/config.ts",
      "name": "getMarketsAndOraclesForSubscription",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "env",
          "type": "DriftEnv"
        },
        {
          "name": "perpMarkets",
          "type": "PerpMarketConfig[]"
        },
        {
          "name": "spotMarkets",
          "type": "SpotMarketConfig[]"
        }
      ],
      "returns": "{ perpMarketIndexes: number[]; spotMarketIndexes: number[]; oracleInfos: OracleInfo[]; }",
      "startLine": 129,
      "endLine": 168
    },
    {
      "file": "protocol-v2/sdk/src/config.ts",
      "name": "initialize",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "props",
          "type": "{ env: DriftEnv; overrideEnv?: Partial<DriftConfig>; }"
        }
      ],
      "returns": "DriftConfig",
      "startLine": 116,
      "endLine": 127
    },
    {
      "file": "protocol-v2/sdk/src/decode/phoenix.ts",
      "name": "deserializeRedBlackTree",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "data",
          "type": "Buffer<ArrayBufferLike>"
        },
        {
          "name": "keyDeserializer",
          "type": "BeetArgsStruct<Key>"
        },
        {
          "name": "valueDeserializer",
          "type": "BeetArgsStruct<Value>"
        }
      ],
      "returns": "Map<Key, Value>",
      "startLine": 32,
      "endLine": 54
    },
    {
      "file": "protocol-v2/sdk/src/decode/phoenix.ts",
      "name": "deserializeRedBlackTreeNodes",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "data",
          "type": "Buffer<ArrayBufferLike>"
        },
        {
          "name": "keyDeserializer",
          "type": "BeetArgsStruct<Key>"
        },
        {
          "name": "valueDeserializer",
          "type": "BeetArgsStruct<Value>"
        }
      ],
      "returns": "[[Key, Value][], Set<number>]",
      "startLine": 56,
      "endLine": 113
    },
    {
      "file": "protocol-v2/sdk/src/decode/phoenix.ts",
      "name": "fastDecode",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "buffer",
          "type": "Buffer<ArrayBufferLike>"
        }
      ],
      "returns": "MarketData",
      "startLine": 115,
      "endLine": 207
    },
    {
      "file": "protocol-v2/sdk/src/decode/user.ts",
      "name": "decodeUser",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "buffer",
          "type": "Buffer<ArrayBufferLike>"
        }
      ],
      "returns": "UserAccount",
      "startLine": 32,
      "endLine": 390
    },
    {
      "file": "protocol-v2/sdk/src/decode/user.ts",
      "name": "readSignedBigInt64LE",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "buffer",
          "type": "Buffer<ArrayBufferLike>"
        },
        {
          "name": "offset",
          "type": "number"
        }
      ],
      "returns": "BN",
      "startLine": 22,
      "endLine": 30
    },
    {
      "file": "protocol-v2/sdk/src/decode/user.ts",
      "name": "readUnsignedBigInt64LE",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "buffer",
          "type": "Buffer<ArrayBufferLike>"
        },
        {
          "name": "offset",
          "type": "number"
        }
      ],
      "returns": "BN",
      "startLine": 18,
      "endLine": 20
    },
    {
      "file": "protocol-v2/sdk/src/dlob/DLOBNode.ts",
      "name": "createNode",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "nodeType",
          "type": "T"
        },
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "userAccount",
          "type": "string"
        },
        {
          "name": "isProtectedMaker",
          "type": "boolean"
        },
        {
          "name": "protectedMakerParams",
          "type": "ProtectedMakerParams"
        },
        {
          "name": "baseAssetAmount",
          "type": "BN"
        }
      ],
      "returns": "DLOBNodeMap[T]",
      "startLine": 202,
      "endLine": 264
    },
    {
      "file": "protocol-v2/sdk/src/dlob/NodeList.ts",
      "name": "getOrderSignature",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "orderId",
          "type": "number"
        },
        {
          "name": "userAccount",
          "type": "string"
        }
      ],
      "returns": "string",
      "startLine": 12,
      "endLine": 17
    },
    {
      "file": "protocol-v2/sdk/src/dlob/orderBookLevels.ts",
      "name": "cloneL2Level",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "level",
          "type": "L2Level"
        }
      ],
      "returns": "L2Level",
      "startLine": 328,
      "endLine": 336
    },
    {
      "file": "protocol-v2/sdk/src/dlob/orderBookLevels.ts",
      "name": "createL2Levels",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "generator",
          "type": "Generator<L2Level, any, any>"
        },
        {
          "name": "depth",
          "type": "number"
        }
      ],
      "returns": "L2Level[]",
      "startLine": 152,
      "endLine": 177
    },
    {
      "file": "protocol-v2/sdk/src/dlob/orderBookLevels.ts",
      "name": "getL2GeneratorFromDLOBNodes",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "dlobNodes",
          "type": "Generator<DLOBNode, any, any>"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "Generator<L2Level, any, any>",
      "startLine": 89,
      "endLine": 114
    },
    {
      "file": "protocol-v2/sdk/src/dlob/orderBookLevels.ts",
      "name": "getVammL2Generator",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "{\n\tmarketAccount,\n\tmmOraclePriceData,\n\tnumOrders,\n\tnow = new BN(Math.floor(Date.now() / 1000)),\n\ttopOfBookQuoteAmounts = [],\n\tlatestSlot,\n}",
          "type": "{ marketAccount: PerpMarketAccount; mmOraclePriceData: MMOraclePriceData; numOrders: number; now?: BN; topOfBookQuoteAmounts?: BN[]; latestSlot?: BN; }"
        }
      ],
      "returns": "L2OrderBookGenerator",
      "startLine": 179,
      "endLine": 314
    },
    {
      "file": "protocol-v2/sdk/src/dlob/orderBookLevels.ts",
      "name": "groupL2",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "l2",
          "type": "L2OrderBook"
        },
        {
          "name": "grouping",
          "type": "BN"
        },
        {
          "name": "depth",
          "type": "number"
        }
      ],
      "returns": "L2OrderBook",
      "startLine": 316,
      "endLine": 326
    },
    {
      "file": "protocol-v2/sdk/src/dlob/orderBookLevels.ts",
      "name": "groupL2Levels",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "levels",
          "type": "L2Level[]"
        },
        {
          "name": "grouping",
          "type": "BN"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "depth",
          "type": "number"
        }
      ],
      "returns": "L2Level[]",
      "startLine": 338,
      "endLine": 381
    },
    {
      "file": "protocol-v2/sdk/src/dlob/orderBookLevels.ts",
      "name": "mergeByPrice",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bidsOrAsks",
          "type": "L2Level[]"
        }
      ],
      "returns": "L2Level[]",
      "startLine": 386,
      "endLine": 405
    },
    {
      "file": "protocol-v2/sdk/src/dlob/orderBookLevels.ts",
      "name": "mergeL2LevelGenerators",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "l2LevelGenerators",
          "type": "Generator<L2Level, any, any>[]"
        },
        {
          "name": "compare",
          "type": "(a: L2Level, b: L2Level) => boolean"
        }
      ],
      "returns": "Generator<L2Level, any, any>",
      "startLine": 116,
      "endLine": 150
    },
    {
      "file": "protocol-v2/sdk/src/dlob/orderBookLevels.ts",
      "name": "uncrossL2",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bids",
          "type": "L2Level[]"
        },
        {
          "name": "asks",
          "type": "L2Level[]"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        },
        {
          "name": "oracleTwap5Min",
          "type": "BN"
        },
        {
          "name": "markTwap5Min",
          "type": "BN"
        },
        {
          "name": "grouping",
          "type": "BN"
        },
        {
          "name": "userBids",
          "type": "Set<string>"
        },
        {
          "name": "userAsks",
          "type": "Set<string>"
        }
      ],
      "returns": "{ bids: L2Level[]; asks: L2Level[]; }",
      "startLine": 425,
      "endLine": 582
    },
    {
      "file": "protocol-v2/sdk/src/events/fetchLogs.ts",
      "name": "chunk",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "array",
          "type": "readonly T[]"
        },
        {
          "name": "size",
          "type": "number"
        }
      ],
      "returns": "T[][]",
      "startLine": 130,
      "endLine": 135
    },
    {
      "file": "protocol-v2/sdk/src/events/fetchLogs.ts",
      "name": "fetchLogs",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "address",
          "type": "PublicKey"
        },
        {
          "name": "finality",
          "type": "Finality"
        },
        {
          "name": "beforeTx",
          "type": "string"
        },
        {
          "name": "untilTx",
          "type": "string"
        },
        {
          "name": "limit",
          "type": "number"
        },
        {
          "name": "batchSize",
          "type": "number"
        }
      ],
      "returns": "Promise<FetchLogsResponse>",
      "startLine": 34,
      "endLine": 90
    },
    {
      "file": "protocol-v2/sdk/src/events/fetchLogs.ts",
      "name": "fetchTransactionLogs",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "signatures",
          "type": "string[]"
        },
        {
          "name": "finality",
          "type": "Finality"
        }
      ],
      "returns": "Promise<Log[]>",
      "startLine": 92,
      "endLine": 128
    },
    {
      "file": "protocol-v2/sdk/src/events/fetchLogs.ts",
      "name": "mapTransactionResponseToLog",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "transaction",
          "type": "VersionedTransactionResponse | TransactionResponse"
        }
      ],
      "returns": "Log",
      "startLine": 24,
      "endLine": 32
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "handleLog",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "execution",
          "type": "ExecutionContext"
        },
        {
          "name": "log",
          "type": "string"
        },
        {
          "name": "program",
          "type": "Program<Idl>"
        },
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "returns": "[Event, string, boolean]",
      "startLine": 54,
      "endLine": 68
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "handleLogForCuUsage",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "execution",
          "type": "ExecutionContext"
        },
        {
          "name": "log",
          "type": "string"
        },
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "returns": "[string, string, boolean, number]",
      "startLine": 194,
      "endLine": 204
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "handleProgramLog",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "log",
          "type": "string"
        },
        {
          "name": "program",
          "type": "Program<Idl>"
        },
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "returns": "[Event, string, boolean]",
      "startLine": 71,
      "endLine": 88
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "handleProgramLogForCuUsage",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "log",
          "type": "string"
        },
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "returns": "[string, string, boolean, number]",
      "startLine": 206,
      "endLine": 216
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "handleSystemLog",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "log",
          "type": "string"
        },
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "returns": "[string, boolean]",
      "startLine": 91,
      "endLine": 112
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "handleSystemLogForCuUsage",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "log",
          "type": "string"
        },
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "returns": "[string, string, boolean, number]",
      "startLine": 218,
      "endLine": 248
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "parseLogs",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "program",
          "type": "Program<Idl>"
        },
        {
          "name": "logs",
          "type": "string[]"
        },
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "returns": "Event[]",
      "startLine": 12,
      "endLine": 19
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "parseLogsForCuUsage",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "logs",
          "type": "string[]"
        },
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "returns": "Event<CuUsageEvent>[]",
      "startLine": 154,
      "endLine": 192
    },
    {
      "file": "protocol-v2/sdk/src/events/parse.ts",
      "name": "parseLogsWithRaw",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "program",
          "type": "Program<Idl>"
        },
        {
          "name": "logs",
          "type": "string[]"
        },
        {
          "name": "programId",
          "type": "string"
        }
      ],
      "returns": "{ events: Event[]; rawLogs: string[]; }",
      "startLine": 21,
      "endLine": 52
    },
    {
      "file": "protocol-v2/sdk/src/events/sort.ts",
      "name": "blockchainSortFn",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "currentEvent",
          "type": "Event<DepositRecord> | Event<FundingPaymentRecord> | Event<LiquidationRecord> | Event<FundingRateRecord> | ... 19 more ... | Event<...>"
        },
        {
          "name": "newEvent",
          "type": "Event<DepositRecord> | Event<FundingPaymentRecord> | Event<LiquidationRecord> | Event<FundingRateRecord> | ... 19 more ... | Event<...>"
        }
      ],
      "returns": "\"less than\" | \"greater than\"",
      "startLine": 17,
      "endLine": 28
    },
    {
      "file": "protocol-v2/sdk/src/events/sort.ts",
      "name": "clientSortAscFn",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "\"less than\"",
      "startLine": 9,
      "endLine": 11
    },
    {
      "file": "protocol-v2/sdk/src/events/sort.ts",
      "name": "clientSortDescFn",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "\"greater than\"",
      "startLine": 13,
      "endLine": 15
    },
    {
      "file": "protocol-v2/sdk/src/events/sort.ts",
      "name": "getSortFn",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "orderBy",
          "type": "EventSubscriptionOrderBy"
        },
        {
          "name": "orderDir",
          "type": "EventSubscriptionOrderDirection"
        }
      ],
      "returns": "SortFn",
      "startLine": 30,
      "endLine": 39
    },
    {
      "file": "protocol-v2/sdk/src/factory/oracleClient.ts",
      "name": "getOracleClient",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "oracleSource",
          "type": "OracleSource"
        },
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "program",
          "type": "Program<Idl>"
        }
      ],
      "returns": "OracleClient",
      "startLine": 14,
      "endLine": 84
    },
    {
      "file": "protocol-v2/sdk/src/isomorphic/grpc.browser.ts",
      "name": "createClient",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "_args",
          "type": "any"
        }
      ],
      "returns": "void",
      "startLine": 2,
      "endLine": 4
    },
    {
      "file": "protocol-v2/sdk/src/isomorphic/grpc.node.ts",
      "name": "createClient",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "args",
          "type": "[endpoint: string, xToken: string, channelOptions: ChannelOptions]"
        }
      ],
      "returns": "Promise<Client>",
      "startLine": 38,
      "endLine": 43
    },
    {
      "file": "protocol-v2/sdk/src/keypair.ts",
      "name": "loadKeypair",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "privateKey",
          "type": "string"
        }
      ],
      "returns": "Keypair",
      "startLine": 5,
      "endLine": 24
    },
    {
      "file": "protocol-v2/sdk/src/marinade/index.ts",
      "name": "getMarinadeDepositIx",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "{\n\tprogram,\n\tamount,\n\tmSOLAccount,\n\ttransferFrom,\n}",
          "type": "{ amount: BN; mSOLAccount: PublicKey; transferFrom: PublicKey; program: Program<MarinadeFinance>; }"
        }
      ],
      "returns": "Promise<TransactionInstruction>",
      "startLine": 20,
      "endLine": 55
    },
    {
      "file": "protocol-v2/sdk/src/marinade/index.ts",
      "name": "getMarinadeFinanceProgram",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "provider",
          "type": "AnchorProvider"
        }
      ],
      "returns": "Program<MarinadeFinance>",
      "startLine": 14,
      "endLine": 18
    },
    {
      "file": "protocol-v2/sdk/src/marinade/index.ts",
      "name": "getMarinadeMSolPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "program",
          "type": "Program<MarinadeFinance>"
        }
      ],
      "returns": "Promise<number>",
      "startLine": 57,
      "endLine": 64
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateAmmReservesAfterSwap",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "Pick<AMM, \"pegMultiplier\" | \"quoteAssetReserve\" | \"sqrtK\" | \"baseAssetReserve\">"
        },
        {
          "name": "inputAssetType",
          "type": "AssetType"
        },
        {
          "name": "swapAmount",
          "type": "BN"
        },
        {
          "name": "swapDirection",
          "type": "SwapDirection"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 298,
      "endLine": 333
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateBidAskPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "withUpdate",
          "type": "boolean"
        },
        {
          "name": "isPrediction",
          "type": "boolean"
        },
        {
          "name": "latestSlot",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 226,
      "endLine": 261
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateEffectiveLeverage",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseSpread",
          "type": "number"
        },
        {
          "name": "quoteAssetReserve",
          "type": "BN"
        },
        {
          "name": "terminalQuoteAssetReserve",
          "type": "BN"
        },
        {
          "name": "pegMultiplier",
          "type": "BN"
        },
        {
          "name": "netBaseAssetAmount",
          "type": "BN"
        },
        {
          "name": "reservePrice",
          "type": "BN"
        },
        {
          "name": "totalFeeMinusDistributions",
          "type": "BN"
        }
      ],
      "returns": "number",
      "startLine": 528,
      "endLine": 557
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateInventoryLiquidityRatio",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseAssetAmountWithAmm",
          "type": "BN"
        },
        {
          "name": "baseAssetReserve",
          "type": "BN"
        },
        {
          "name": "minBaseAssetReserve",
          "type": "BN"
        },
        {
          "name": "maxBaseAssetReserve",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 367,
      "endLine": 390
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateInventoryLiquidityRatioForReferencePriceOffset",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseAssetAmountWithAmm",
          "type": "BN"
        },
        {
          "name": "baseAssetReserve",
          "type": "BN"
        },
        {
          "name": "minBaseAssetReserve",
          "type": "BN"
        },
        {
          "name": "maxBaseAssetReserve",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 392,
      "endLine": 415
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateInventoryScale",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseAssetAmountWithAmm",
          "type": "BN"
        },
        {
          "name": "baseAssetReserve",
          "type": "BN"
        },
        {
          "name": "minBaseAssetReserve",
          "type": "BN"
        },
        {
          "name": "maxBaseAssetReserve",
          "type": "BN"
        },
        {
          "name": "directionalSpread",
          "type": "number"
        },
        {
          "name": "maxSpread",
          "type": "number"
        }
      ],
      "returns": "number",
      "startLine": 417,
      "endLine": 456
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateMarketOpenBidAsk",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseAssetReserve",
          "type": "BN"
        },
        {
          "name": "minBaseAssetReserve",
          "type": "BN"
        },
        {
          "name": "maxBaseAssetReserve",
          "type": "BN"
        },
        {
          "name": "stepSize",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 335,
      "endLine": 365
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateMaxBaseAssetAmountFillable",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "orderDirection",
          "type": "PositionDirection"
        }
      ],
      "returns": "BN",
      "startLine": 1270,
      "endLine": 1294
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateMaxBaseAssetAmountToTrade",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "limit_price",
          "type": "BN"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "now",
          "type": "BN"
        },
        {
          "name": "isPrediction",
          "type": "boolean"
        }
      ],
      "returns": "[BN, PositionDirection]",
      "startLine": 1206,
      "endLine": 1248
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateMaxSpread",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "marginRatioInitial",
          "type": "number"
        }
      ],
      "returns": "number",
      "startLine": 559,
      "endLine": 565
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateNewAmm",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        }
      ],
      "returns": "[BN, BN, BN, BN]",
      "startLine": 114,
      "endLine": 154
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateOptimalPegAndBudget",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        }
      ],
      "returns": "[BN, BN, BN, boolean]",
      "startLine": 53,
      "endLine": 112
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculatePegFromTargetPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "targetPrice",
          "type": "BN"
        },
        {
          "name": "baseAssetReserve",
          "type": "BN"
        },
        {
          "name": "quoteAssetReserve",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 38,
      "endLine": 51
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculatePrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseAssetReserves",
          "type": "BN"
        },
        {
          "name": "quoteAssetReserves",
          "type": "BN"
        },
        {
          "name": "pegMultiplier",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 271,
      "endLine": 285
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateQuoteAssetAmountSwapped",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "quoteAssetReserves",
          "type": "BN"
        },
        {
          "name": "pegMultiplier",
          "type": "BN"
        },
        {
          "name": "swapDirection",
          "type": "SwapDirection"
        }
      ],
      "returns": "BN",
      "startLine": 1250,
      "endLine": 1268
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateReferencePriceOffset",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "reservePrice",
          "type": "BN"
        },
        {
          "name": "last24hAvgFundingRate",
          "type": "BN"
        },
        {
          "name": "liquidityFraction",
          "type": "BN"
        },
        {
          "name": "oracleTwapFast",
          "type": "BN"
        },
        {
          "name": "markTwapFast",
          "type": "BN"
        },
        {
          "name": "oracleTwapSlow",
          "type": "BN"
        },
        {
          "name": "markTwapSlow",
          "type": "BN"
        },
        {
          "name": "maxOffsetPct",
          "type": "number"
        }
      ],
      "returns": "BN",
      "startLine": 458,
      "endLine": 526
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateSpread",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "now",
          "type": "BN"
        },
        {
          "name": "reservePrice",
          "type": "BN"
        }
      ],
      "returns": "[number, number]",
      "startLine": 855,
      "endLine": 934
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateSpreadBN",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseSpread",
          "type": "number"
        },
        {
          "name": "lastOracleReservePriceSpreadPct",
          "type": "BN"
        },
        {
          "name": "lastOracleConfPct",
          "type": "BN"
        },
        {
          "name": "maxSpread",
          "type": "number"
        },
        {
          "name": "quoteAssetReserve",
          "type": "BN"
        },
        {
          "name": "terminalQuoteAssetReserve",
          "type": "BN"
        },
        {
          "name": "pegMultiplier",
          "type": "BN"
        },
        {
          "name": "baseAssetAmountWithAmm",
          "type": "BN"
        },
        {
          "name": "reservePrice",
          "type": "BN"
        },
        {
          "name": "totalFeeMinusDistributions",
          "type": "BN"
        },
        {
          "name": "netRevenueSinceLastFunding",
          "type": "BN"
        },
        {
          "name": "baseAssetReserve",
          "type": "BN"
        },
        {
          "name": "minBaseAssetReserve",
          "type": "BN"
        },
        {
          "name": "maxBaseAssetReserve",
          "type": "BN"
        },
        {
          "name": "markStd",
          "type": "BN"
        },
        {
          "name": "oracleStd",
          "type": "BN"
        },
        {
          "name": "longIntensity",
          "type": "BN"
        },
        {
          "name": "shortIntensity",
          "type": "BN"
        },
        {
          "name": "volume24H",
          "type": "BN"
        },
        {
          "name": "ammInventorySpreadAdjustment",
          "type": "number"
        },
        {
          "name": "returnTerms",
          "type": "boolean"
        }
      ],
      "returns": "number[] | { longVolSpread: number; shortVolSpread: number; longSpreadwPS: number; shortSpreadwPS: number; maxTargetSpread: number; inventorySpreadScale: number; longSpreadwInvScale: number; ... 13 more ...; shortSpread: number; }",
      "startLine": 616,
      "endLine": 853
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateSpreadReserves",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "now",
          "type": "BN"
        },
        {
          "name": "isPrediction",
          "type": "boolean"
        },
        {
          "name": "latestSlot",
          "type": "BN"
        }
      ],
      "returns": "{ baseAssetReserve: any; quoteAssetReserve: any; }[]",
      "startLine": 967,
      "endLine": 1130
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateSwapOutput",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "inputAssetReserve",
          "type": "BN"
        },
        {
          "name": "swapAmount",
          "type": "BN"
        },
        {
          "name": "swapDirection",
          "type": "SwapDirection"
        },
        {
          "name": "invariant",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 1141,
      "endLine": 1155
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateTerminalPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        }
      ],
      "returns": "any",
      "startLine": 1184,
      "endLine": 1204
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateUpdatedAMM",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        }
      ],
      "returns": "AMM",
      "startLine": 156,
      "endLine": 194
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateUpdatedAMMSpreadReserves",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "isPrediction",
          "type": "boolean"
        },
        {
          "name": "latestSlot",
          "type": "BN"
        }
      ],
      "returns": "{ baseAssetReserve: BN; quoteAssetReserve: BN; sqrtK: BN; newPeg: BN; }",
      "startLine": 196,
      "endLine": 224
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "calculateVolSpreadBN",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "lastOracleConfPct",
          "type": "BN"
        },
        {
          "name": "reservePrice",
          "type": "BN"
        },
        {
          "name": "markStd",
          "type": "BN"
        },
        {
          "name": "oracleStd",
          "type": "BN"
        },
        {
          "name": "longIntensity",
          "type": "BN"
        },
        {
          "name": "shortIntensity",
          "type": "BN"
        },
        {
          "name": "volume24H",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 567,
      "endLine": 614
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "getQuoteAssetReservePredictionMarketBounds",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 936,
      "endLine": 965
    },
    {
      "file": "protocol-v2/sdk/src/math/amm.ts",
      "name": "getSwapDirection",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "inputAssetType",
          "type": "AssetType"
        },
        {
          "name": "positionDirection",
          "type": "PositionDirection"
        }
      ],
      "returns": "SwapDirection",
      "startLine": 1163,
      "endLine": 1176
    },
    {
      "file": "protocol-v2/sdk/src/math/auction.ts",
      "name": "deriveOracleAuctionParams",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "{\n\tdirection,\n\toraclePrice,\n\tauctionStartPrice,\n\tauctionEndPrice,\n\tlimitPrice,\n\tauctionPriceCaps,\n}",
          "type": "{ direction: PositionDirection; oraclePrice: BN; auctionStartPrice: BN; auctionEndPrice: BN; limitPrice: BN; auctionPriceCaps?: { min: BN; max: BN; }; }"
        }
      ],
      "returns": "{ auctionStartPrice: BN; auctionEndPrice: BN; oraclePriceOffset: number; }",
      "startLine": 150,
      "endLine": 205
    },
    {
      "file": "protocol-v2/sdk/src/math/auction.ts",
      "name": "getAuctionPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "slot",
          "type": "number"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 43,
      "endLine": 71
    },
    {
      "file": "protocol-v2/sdk/src/math/auction.ts",
      "name": "getAuctionPriceForFixedAuction",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "BN",
      "startLine": 73,
      "endLine": 104
    },
    {
      "file": "protocol-v2/sdk/src/math/auction.ts",
      "name": "getAuctionPriceForOracleOffsetAuction",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "slot",
          "type": "number"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 113,
      "endLine": 148
    },
    {
      "file": "protocol-v2/sdk/src/math/auction.ts",
      "name": "getTriggerAuctionStartAndExecutionPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "params",
          "type": "{ perpMarket: PerpMarketAccount; direction: PositionDirection; oraclePrice: BN; mmOraclePrice: BN; limitPrice?: BN; }"
        }
      ],
      "returns": "{ startPrice: BN; executionPrice: BN; }",
      "startLine": 302,
      "endLine": 331
    },
    {
      "file": "protocol-v2/sdk/src/math/auction.ts",
      "name": "getTriggerAuctionStartPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "params",
          "type": "{ perpMarket: PerpMarketAccount; direction: PositionDirection; oraclePrice: BN; limitPrice?: BN; }"
        }
      ],
      "returns": "BN",
      "startLine": 212,
      "endLine": 295
    },
    {
      "file": "protocol-v2/sdk/src/math/auction.ts",
      "name": "isAuctionComplete",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 12,
      "endLine": 18
    },
    {
      "file": "protocol-v2/sdk/src/math/auction.ts",
      "name": "isFallbackAvailableLiquiditySource",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "minAuctionDuration",
          "type": "number"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 20,
      "endLine": 34
    },
    {
      "file": "protocol-v2/sdk/src/math/bankruptcy.ts",
      "name": "isUserBankrupt",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "user",
          "type": "User"
        }
      ],
      "returns": "boolean",
      "startLine": 6,
      "endLine": 35
    },
    {
      "file": "protocol-v2/sdk/src/math/builder.ts",
      "name": "isBuilderOrderAvailable",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "RevenueShareOrder"
        }
      ],
      "returns": "boolean",
      "startLine": 18,
      "endLine": 20
    },
    {
      "file": "protocol-v2/sdk/src/math/builder.ts",
      "name": "isBuilderOrderCompleted",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "RevenueShareOrder"
        }
      ],
      "returns": "boolean",
      "startLine": 9,
      "endLine": 11
    },
    {
      "file": "protocol-v2/sdk/src/math/builder.ts",
      "name": "isBuilderOrderOpen",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "RevenueShareOrder"
        }
      ],
      "returns": "boolean",
      "startLine": 4,
      "endLine": 6
    },
    {
      "file": "protocol-v2/sdk/src/math/builder.ts",
      "name": "isBuilderOrderReferral",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "RevenueShareOrder"
        }
      ],
      "returns": "boolean",
      "startLine": 14,
      "endLine": 16
    },
    {
      "file": "protocol-v2/sdk/src/math/conversion.ts",
      "name": "convertToBN",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "value",
          "type": "number"
        },
        {
          "name": "precision",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 15,
      "endLine": 24
    },
    {
      "file": "protocol-v2/sdk/src/math/conversion.ts",
      "name": "convertToNumber",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bigNumber",
          "type": "BN"
        },
        {
          "name": "precision",
          "type": "BN"
        }
      ],
      "returns": "any",
      "startLine": 4,
      "endLine": 13
    },
    {
      "file": "protocol-v2/sdk/src/math/exchangeStatus.ts",
      "name": "ammPaused",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "state",
          "type": "StateAccount"
        },
        {
          "name": "market",
          "type": "SpotMarketAccount | PerpMarketAccount"
        }
      ],
      "returns": "boolean",
      "startLine": 40,
      "endLine": 65
    },
    {
      "file": "protocol-v2/sdk/src/math/exchangeStatus.ts",
      "name": "exchangePaused",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "state",
          "type": "StateAccount"
        }
      ],
      "returns": "boolean",
      "startLine": 18,
      "endLine": 20
    },
    {
      "file": "protocol-v2/sdk/src/math/exchangeStatus.ts",
      "name": "fillPaused",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "state",
          "type": "StateAccount"
        },
        {
          "name": "market",
          "type": "SpotMarketAccount | PerpMarketAccount"
        }
      ],
      "returns": "boolean",
      "startLine": 22,
      "endLine": 38
    },
    {
      "file": "protocol-v2/sdk/src/math/exchangeStatus.ts",
      "name": "isAmmDrawdownPause",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        }
      ],
      "returns": "boolean",
      "startLine": 74,
      "endLine": 121
    },
    {
      "file": "protocol-v2/sdk/src/math/exchangeStatus.ts",
      "name": "isOperationPaused",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "pausedOperations",
          "type": "number"
        },
        {
          "name": "operation",
          "type": "PerpOperation | SpotOperation | InsuranceFundOperation"
        }
      ],
      "returns": "boolean",
      "startLine": 67,
      "endLine": 72
    },
    {
      "file": "protocol-v2/sdk/src/math/fuel.ts",
      "name": "calculateInsuranceFuelBonus",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "tokenStakeAmount",
          "type": "BN"
        },
        {
          "name": "fuelBonusNumerator",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 9,
      "endLine": 21
    },
    {
      "file": "protocol-v2/sdk/src/math/fuel.ts",
      "name": "calculatePerpFuelBonus",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpMarket",
          "type": "PerpMarketAccount"
        },
        {
          "name": "baseAssetValue",
          "type": "BN"
        },
        {
          "name": "fuelBonusNumerator",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 51,
      "endLine": 70
    },
    {
      "file": "protocol-v2/sdk/src/math/fuel.ts",
      "name": "calculateSpotFuelBonus",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "signedTokenValue",
          "type": "BN"
        },
        {
          "name": "fuelBonusNumerator",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 23,
      "endLine": 49
    },
    {
      "file": "protocol-v2/sdk/src/math/funding.ts",
      "name": "calculateAllEstimatedFundingRate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "markPrice",
          "type": "BN"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN, BN, BN, BN]",
      "startLine": 123,
      "endLine": 249
    },
    {
      "file": "protocol-v2/sdk/src/math/funding.ts",
      "name": "calculateFormattedLiveFundingRate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "period",
          "type": "\"hour\" | \"year\""
        }
      ],
      "returns": "{ longRate: number; shortRate: number; fundingRateUnit: string; formattedFundingRateSummary: string; }",
      "startLine": 267,
      "endLine": 329
    },
    {
      "file": "protocol-v2/sdk/src/math/funding.ts",
      "name": "calculateFundingPool",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        }
      ],
      "returns": "BN",
      "startLine": 420,
      "endLine": 431
    },
    {
      "file": "protocol-v2/sdk/src/math/funding.ts",
      "name": "calculateLiveMarkTwap",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "markPrice",
          "type": "BN"
        },
        {
          "name": "now",
          "type": "BN"
        },
        {
          "name": "period",
          "type": "any"
        }
      ],
      "returns": "BN",
      "startLine": 21,
      "endLine": 50
    },
    {
      "file": "protocol-v2/sdk/src/math/funding.ts",
      "name": "calculateLongShortFundingRate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "markPrice",
          "type": "BN"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 353,
      "endLine": 377
    },
    {
      "file": "protocol-v2/sdk/src/math/funding.ts",
      "name": "calculateLongShortFundingRateAndLiveTwaps",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "markPrice",
          "type": "BN"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN, BN, BN]",
      "startLine": 386,
      "endLine": 413
    },
    {
      "file": "protocol-v2/sdk/src/math/funding.ts",
      "name": "getFundingRatePct",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "rawFundingRate",
          "type": "BN"
        }
      ],
      "returns": "number",
      "startLine": 256,
      "endLine": 261
    },
    {
      "file": "protocol-v2/sdk/src/math/funding.ts",
      "name": "getMaxPriceDivergenceForFundingRate",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oracleTwap",
          "type": "BN"
        }
      ],
      "returns": "any",
      "startLine": 331,
      "endLine": 344
    },
    {
      "file": "protocol-v2/sdk/src/math/funding.ts",
      "name": "shrinkStaleTwaps",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "markTwapWithMantissa",
          "type": "BN"
        },
        {
          "name": "oracleTwapWithMantissa",
          "type": "BN"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "any[]",
      "startLine": 52,
      "endLine": 114
    },
    {
      "file": "protocol-v2/sdk/src/math/insurance.ts",
      "name": "nextRevenuePoolSettleApr",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "vaultBalance",
          "type": "BN"
        },
        {
          "name": "amount",
          "type": "BN"
        }
      ],
      "returns": "number",
      "startLine": 6,
      "endLine": 49
    },
    {
      "file": "protocol-v2/sdk/src/math/insurance.ts",
      "name": "stakeAmountToShares",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amount",
          "type": "BN"
        },
        {
          "name": "totalIfShares",
          "type": "BN"
        },
        {
          "name": "insuranceFundVaultBalance",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 51,
      "endLine": 64
    },
    {
      "file": "protocol-v2/sdk/src/math/insurance.ts",
      "name": "unstakeSharesToAmount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "nShares",
          "type": "BN"
        },
        {
          "name": "totalIfShares",
          "type": "BN"
        },
        {
          "name": "insuranceFundVaultBalance",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 66,
      "endLine": 82
    },
    {
      "file": "protocol-v2/sdk/src/math/insurance.ts",
      "name": "unstakeSharesToAmountWithOpenRequest",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "nShares",
          "type": "BN"
        },
        {
          "name": "withdrawRequestShares",
          "type": "BN"
        },
        {
          "name": "withdrawRequestAmount",
          "type": "BN"
        },
        {
          "name": "totalIfShares",
          "type": "BN"
        },
        {
          "name": "insuranceFundVaultBalance",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 84,
      "endLine": 111
    },
    {
      "file": "protocol-v2/sdk/src/math/liquidation.ts",
      "name": "calculateAssetTransferForLiabilityTransfer",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "assetAmount",
          "type": "BN"
        },
        {
          "name": "assetLiquidationMultiplier",
          "type": "number"
        },
        {
          "name": "assetDecimals",
          "type": "number"
        },
        {
          "name": "assetPrice",
          "type": "BN"
        },
        {
          "name": "liabilityAmount",
          "type": "BN"
        },
        {
          "name": "liabilityLiquidationMultiplier",
          "type": "number"
        },
        {
          "name": "liabilityDecimals",
          "type": "number"
        },
        {
          "name": "liabilityPrice",
          "type": "BN"
        }
      ],
      "returns": "any",
      "startLine": 101,
      "endLine": 160
    },
    {
      "file": "protocol-v2/sdk/src/math/liquidation.ts",
      "name": "calculateBaseAssetAmountToCoverMarginShortage",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "marginShortage",
          "type": "BN"
        },
        {
          "name": "marginRatio",
          "type": "number"
        },
        {
          "name": "liquidationFee",
          "type": "number"
        },
        {
          "name": "ifLiquidationFee",
          "type": "number"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        },
        {
          "name": "quoteOraclePrice",
          "type": "BN"
        }
      ],
      "returns": "any",
      "startLine": 14,
      "endLine": 42
    },
    {
      "file": "protocol-v2/sdk/src/math/liquidation.ts",
      "name": "calculateLiabilityTransferToCoverMarginShortage",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "marginShortage",
          "type": "BN"
        },
        {
          "name": "assetWeight",
          "type": "number"
        },
        {
          "name": "assetLiquidationMultiplier",
          "type": "number"
        },
        {
          "name": "liabilityWeight",
          "type": "number"
        },
        {
          "name": "liabilityLiquidationMultiplier",
          "type": "number"
        },
        {
          "name": "liabilityDecimals",
          "type": "number"
        },
        {
          "name": "liabilityPrice",
          "type": "BN"
        },
        {
          "name": "ifLiquidationFee",
          "type": "number"
        }
      ],
      "returns": "any",
      "startLine": 44,
      "endLine": 99
    },
    {
      "file": "protocol-v2/sdk/src/math/liquidation.ts",
      "name": "calculateMaxPctToLiquidate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "userLastActiveSlot",
          "type": "BN"
        },
        {
          "name": "userLiquidationMarginFreed",
          "type": "BN"
        },
        {
          "name": "marginShortage",
          "type": "BN"
        },
        {
          "name": "slot",
          "type": "BN"
        },
        {
          "name": "initialPctToLiquidate",
          "type": "BN"
        },
        {
          "name": "liquidationDuration",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 162,
      "endLine": 200
    },
    {
      "file": "protocol-v2/sdk/src/math/liquidation.ts",
      "name": "getMarginShortage",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "maintenanceMarginRequirementPlusBuffer",
          "type": "BN"
        },
        {
          "name": "maintenanceTotalCollateral",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 202,
      "endLine": 209
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateBaseAssetValueWithOracle",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "perpPosition",
          "type": "PerpPosition"
        },
        {
          "name": "oraclePriceData",
          "type": "Pick<OraclePriceData, \"price\">"
        },
        {
          "name": "includeOpenOrders",
          "type": "boolean"
        }
      ],
      "returns": "BN",
      "startLine": 126,
      "endLine": 146
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateCollateralDepositRequiredForTrade",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "driftClient",
          "type": "DriftClient"
        },
        {
          "name": "targetMarketIndex",
          "type": "number"
        },
        {
          "name": "baseSize",
          "type": "BN"
        },
        {
          "name": "collateralIndex",
          "type": "number"
        },
        {
          "name": "userMaxMarginRatio",
          "type": "number"
        },
        {
          "name": "userHighLeverageMode",
          "type": "boolean"
        },
        {
          "name": "estEntryPrice",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 258,
      "endLine": 298
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateCollateralValueOfDeposit",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "driftClient",
          "type": "DriftClient"
        },
        {
          "name": "collateralIndex",
          "type": "number"
        },
        {
          "name": "baseSize",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 300,
      "endLine": 327
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateLiquidationPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "freeCollateral",
          "type": "BN"
        },
        {
          "name": "freeCollateralDelta",
          "type": "BN"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 329,
      "endLine": 345
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateMarginUSDCRequiredForTrade",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "driftClient",
          "type": "DriftClient"
        },
        {
          "name": "targetMarketIndex",
          "type": "number"
        },
        {
          "name": "baseSize",
          "type": "BN"
        },
        {
          "name": "userMaxMarginRatio",
          "type": "number"
        },
        {
          "name": "userHighLeverageMode",
          "type": "boolean"
        },
        {
          "name": "entryPrice",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 218,
      "endLine": 251
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateOraclePriceForPerpMargin",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpPosition",
          "type": "PerpPosition"
        },
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        }
      ],
      "returns": "BN",
      "startLine": 92,
      "endLine": 116
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculatePerpLiabilityValue",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseAssetAmount",
          "type": "BN"
        },
        {
          "name": "price",
          "type": "BN"
        },
        {
          "name": "isPredictionMarket",
          "type": "boolean"
        }
      ],
      "returns": "BN",
      "startLine": 193,
      "endLine": 210
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateSizeDiscountAssetWeight",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "size",
          "type": "BN"
        },
        {
          "name": "imfFactor",
          "type": "BN"
        },
        {
          "name": "assetWeight",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 63,
      "endLine": 90
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateSizePremiumLiabilityWeight",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "size",
          "type": "BN"
        },
        {
          "name": "imfFactor",
          "type": "BN"
        },
        {
          "name": "liabilityWeight",
          "type": "BN"
        },
        {
          "name": "precision",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 31,
      "endLine": 61
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateUserMaxPerpOrderSize",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "driftClient",
          "type": "DriftClient"
        },
        {
          "name": "userAccountKey",
          "type": "PublicKey"
        },
        {
          "name": "userAccount",
          "type": "UserAccount"
        },
        {
          "name": "targetMarketIndex",
          "type": "number"
        },
        {
          "name": "tradeSide",
          "type": "PositionDirection"
        }
      ],
      "returns": "{ tradeSize: BN; oppositeSideTradeSize: BN; }",
      "startLine": 347,
      "endLine": 372
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateWorstCaseBaseAssetAmount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpPosition",
          "type": "PerpPosition"
        },
        {
          "name": "perpMarket",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 148,
      "endLine": 158
    },
    {
      "file": "protocol-v2/sdk/src/math/margin.ts",
      "name": "calculateWorstCasePerpLiabilityValue",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpPosition",
          "type": "PerpPosition"
        },
        {
          "name": "perpMarket",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        }
      ],
      "returns": "{ worstCaseBaseAssetAmount: BN; worstCaseLiabilityValue: BN; }",
      "startLine": 160,
      "endLine": 191
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateAskPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "latestSlot",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 85,
      "endLine": 100
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateAvailablePerpLiquidity",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "dlob",
          "type": "DLOB"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "{ bids: BN; asks: BN; }",
      "startLine": 305,
      "endLine": 346
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateBidPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "latestSlot",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 62,
      "endLine": 77
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateMarketAvailablePNL",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpMarket",
          "type": "PerpMarketAccount"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        }
      ],
      "returns": "BN",
      "startLine": 229,
      "endLine": 238
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateMarketMarginRatio",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "size",
          "type": "BN"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        },
        {
          "name": "customMarginRatio",
          "type": "number"
        },
        {
          "name": "userHighLeverageMode",
          "type": "boolean"
        }
      ],
      "returns": "number",
      "startLine": 139,
      "endLine": 188
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateMarketMaxAvailableInsurance",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpMarket",
          "type": "PerpMarketAccount"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        }
      ],
      "returns": "BN",
      "startLine": 240,
      "endLine": 257
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateNetUserPnl",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpMarket",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oraclePriceData",
          "type": "Pick<OraclePriceData, \"price\">"
        }
      ],
      "returns": "BN",
      "startLine": 259,
      "endLine": 276
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateNetUserPnlImbalance",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpMarket",
          "type": "PerpMarketAccount"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "oraclePriceData",
          "type": "Pick<OraclePriceData, \"price\">"
        },
        {
          "name": "applyFeePoolDiscount",
          "type": "boolean"
        }
      ],
      "returns": "BN",
      "startLine": 278,
      "endLine": 303
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateNewMarketAfterTrade",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseAssetAmount",
          "type": "BN"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "market",
          "type": "PerpMarketAccount"
        }
      ],
      "returns": "PerpMarketAccount",
      "startLine": 102,
      "endLine": 122
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateOracleReserveSpread",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        }
      ],
      "returns": "BN",
      "startLine": 124,
      "endLine": 130
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateOracleSpread",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "price",
          "type": "BN"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        }
      ],
      "returns": "BN",
      "startLine": 132,
      "endLine": 137
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculatePerpMarketBaseLiquidatorFee",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "userHighLeverageMode",
          "type": "boolean"
        }
      ],
      "returns": "number",
      "startLine": 348,
      "endLine": 362
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateReservePrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        }
      ],
      "returns": "BN",
      "startLine": 44,
      "endLine": 54
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "calculateUnrealizedAssetWeight",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "quoteSpotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "unrealizedPnl",
          "type": "BN"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        },
        {
          "name": "oraclePriceData",
          "type": "Pick<OraclePriceData, \"price\">"
        }
      ],
      "returns": "BN",
      "startLine": 190,
      "endLine": 227
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "clampTriggerPrice",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        },
        {
          "name": "medianPrice",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 444,
      "endLine": 463
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "getLastFundingBasis",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 411,
      "endLine": 438
    },
    {
      "file": "protocol-v2/sdk/src/math/market.ts",
      "name": "getTriggerPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        },
        {
          "name": "now",
          "type": "BN"
        },
        {
          "name": "useMedianPrice",
          "type": "boolean"
        }
      ],
      "returns": "BN",
      "startLine": 373,
      "endLine": 405
    },
    {
      "file": "protocol-v2/sdk/src/math/oracles.ts",
      "name": "calculateLiveOracleStd",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 162,
      "endLine": 197
    },
    {
      "file": "protocol-v2/sdk/src/math/oracles.ts",
      "name": "calculateLiveOracleTwap",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "histOracleData",
          "type": "HistoricalOracleData"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "now",
          "type": "BN"
        },
        {
          "name": "period",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 126,
      "endLine": 160
    },
    {
      "file": "protocol-v2/sdk/src/math/oracles.ts",
      "name": "getMaxConfidenceIntervalMultiplier",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        }
      ],
      "returns": "BN",
      "startLine": 37,
      "endLine": 53
    },
    {
      "file": "protocol-v2/sdk/src/math/oracles.ts",
      "name": "getMultipleBetweenOracleSources",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "firstOracleSource",
          "type": "OracleSource"
        },
        {
          "name": "secondOracleSource",
          "type": "OracleSource"
        }
      ],
      "returns": "{ numerator: BN; denominator: BN; }",
      "startLine": 247,
      "endLine": 308
    },
    {
      "file": "protocol-v2/sdk/src/math/oracles.ts",
      "name": "getNewOracleConfPct",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "reservePrice",
          "type": "BN"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 199,
      "endLine": 228
    },
    {
      "file": "protocol-v2/sdk/src/math/oracles.ts",
      "name": "isOracleTooDivergent",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "oracleGuardRails",
          "type": "OracleGuardRails"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "boolean",
      "startLine": 97,
      "endLine": 124
    },
    {
      "file": "protocol-v2/sdk/src/math/oracles.ts",
      "name": "isOracleValid",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "oracleGuardRails",
          "type": "OracleGuardRails"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 55,
      "endLine": 95
    },
    {
      "file": "protocol-v2/sdk/src/math/oracles.ts",
      "name": "oraclePriceBands",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "oraclePriceData",
          "type": "Pick<OraclePriceData, \"price\">"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 22,
      "endLine": 35
    },
    {
      "file": "protocol-v2/sdk/src/math/oracles.ts",
      "name": "trimVaaSignatures",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "vaa",
          "type": "Buffer<ArrayBufferLike>"
        },
        {
          "name": "n",
          "type": "number"
        }
      ],
      "returns": "Buffer<ArrayBufferLike>",
      "startLine": 230,
      "endLine": 245
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "applyProtectedMakerParams",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "limitPrice",
          "type": "BN"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "protectedMakerParams",
          "type": "ProtectedMakerParams"
        }
      ],
      "returns": "BN",
      "startLine": 194,
      "endLine": 223
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "calculateBaseAssetAmountForAmmToFulfill",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "BN",
      "startLine": 260,
      "endLine": 291
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "calculateBaseAssetAmountToFillUpToLimitPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "limitPrice",
          "type": "BN"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        }
      ],
      "returns": "BN",
      "startLine": 293,
      "endLine": 327
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "calculateOrderBaseAssetAmount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "existingBaseAssetAmount",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 404,
      "endLine": 420
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "getLimitPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "oraclePriceData",
          "type": "T extends \"spot\" ? OraclePriceData : MMOraclePriceData"
        },
        {
          "name": "slot",
          "type": "number"
        },
        {
          "name": "fallbackPrice",
          "type": "BN"
        },
        {
          "name": "protectedMakerParams",
          "type": "ProtectedMakerParams"
        }
      ],
      "returns": "any",
      "startLine": 162,
      "endLine": 192
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "hasAuctionPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 233,
      "endLine": 238
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "hasBuilder",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        }
      ],
      "returns": "boolean",
      "startLine": 400,
      "endLine": 402
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "hasLimitPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 225,
      "endLine": 231
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isFillableByVAMM",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "slot",
          "type": "number"
        },
        {
          "name": "ts",
          "type": "number"
        },
        {
          "name": "minAuctionDuration",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 240,
      "endLine": 258
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isLimitOrder",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        }
      ],
      "returns": "boolean",
      "startLine": 367,
      "endLine": 369
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isMarketOrder",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        }
      ],
      "returns": "boolean",
      "startLine": 363,
      "endLine": 365
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isOrderExpired",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "ts",
          "type": "number"
        },
        {
          "name": "enforceBuffer",
          "type": "boolean"
        },
        {
          "name": "bufferSeconds",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 339,
      "endLine": 361
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isOrderReduceOnly",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "user",
          "type": "User"
        },
        {
          "name": "order",
          "type": "Order"
        }
      ],
      "returns": "boolean",
      "startLine": 104,
      "endLine": 130
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isOrderRiskIncreasing",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "user",
          "type": "User"
        },
        {
          "name": "order",
          "type": "Order"
        }
      ],
      "returns": "boolean",
      "startLine": 33,
      "endLine": 69
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isOrderRiskIncreasingInSameDirection",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "user",
          "type": "User"
        },
        {
          "name": "order",
          "type": "Order"
        }
      ],
      "returns": "boolean",
      "startLine": 71,
      "endLine": 102
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isRestingLimitOrder",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 382,
      "endLine": 388
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isSameDirection",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "firstDirection",
          "type": "PositionDirection"
        },
        {
          "name": "secondDirection",
          "type": "PositionDirection"
        }
      ],
      "returns": "boolean",
      "startLine": 329,
      "endLine": 337
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isSignedMsgOrder",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        }
      ],
      "returns": "boolean",
      "startLine": 395,
      "endLine": 397
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isTakingOrder",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        },
        {
          "name": "slot",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 390,
      "endLine": 392
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "isTriggered",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        }
      ],
      "returns": "boolean",
      "startLine": 375,
      "endLine": 380
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "maxSizeForTargetLiabilityWeightBN",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "target",
          "type": "BN"
        },
        {
          "name": "imfFactor",
          "type": "BN"
        },
        {
          "name": "liabilityWeight",
          "type": "BN"
        }
      ],
      "returns": "any",
      "startLine": 431,
      "endLine": 482
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "mustBeTriggered",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "order",
          "type": "Order"
        }
      ],
      "returns": "boolean",
      "startLine": 371,
      "endLine": 373
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "standardizeBaseAssetAmount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "baseAssetAmount",
          "type": "BN"
        },
        {
          "name": "stepSize",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 132,
      "endLine": 138
    },
    {
      "file": "protocol-v2/sdk/src/math/orders.ts",
      "name": "standardizePrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "price",
          "type": "BN"
        },
        {
          "name": "tickSize",
          "type": "BN"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        }
      ],
      "returns": "BN",
      "startLine": 140,
      "endLine": 160
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "calculateBaseAssetValue",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "userPosition",
          "type": "PerpPosition"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "useSpread",
          "type": "boolean"
        },
        {
          "name": "skipUpdate",
          "type": "boolean"
        },
        {
          "name": "latestSlot",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 35,
      "endLine": 94
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "calculateBreakEvenPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "userPosition",
          "type": "PerpPosition"
        }
      ],
      "returns": "BN",
      "startLine": 256,
      "endLine": 266
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "calculateClaimablePnl",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "perpPosition",
          "type": "PerpPosition"
        },
        {
          "name": "oraclePriceData",
          "type": "Pick<OraclePriceData, \"price\">"
        }
      ],
      "returns": "BN",
      "startLine": 137,
      "endLine": 167
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "calculateCostBasis",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "userPosition",
          "type": "PerpPosition"
        },
        {
          "name": "includeSettledPnl",
          "type": "boolean"
        }
      ],
      "returns": "BN",
      "startLine": 290,
      "endLine": 304
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "calculateEntryPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "userPosition",
          "type": "PerpPosition"
        }
      ],
      "returns": "BN",
      "startLine": 273,
      "endLine": 283
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "calculateFeesAndFundingPnl",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "perpPosition",
          "type": "PerpPosition"
        },
        {
          "name": "includeUnsettled",
          "type": "boolean"
        }
      ],
      "returns": "BN",
      "startLine": 177,
      "endLine": 196
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "calculatePositionFundingPNL",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "perpPosition",
          "type": "PerpPosition"
        }
      ],
      "returns": "BN",
      "startLine": 235,
      "endLine": 240
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "calculatePositionPNL",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "perpPosition",
          "type": "PerpPosition"
        },
        {
          "name": "withFunding",
          "type": "boolean"
        },
        {
          "name": "oraclePriceData",
          "type": "Pick<OraclePriceData, \"price\">"
        }
      ],
      "returns": "BN",
      "startLine": 105,
      "endLine": 135
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "calculateUnsettledFundingPnl",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "perpPosition",
          "type": "PerpPosition"
        }
      ],
      "returns": "BN",
      "startLine": 207,
      "endLine": 230
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "findDirectionToClose",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "userPosition",
          "type": "PerpPosition"
        }
      ],
      "returns": "PositionDirection",
      "startLine": 306,
      "endLine": 312
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "hasOpenOrders",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "position",
          "type": "PerpPosition"
        }
      ],
      "returns": "boolean",
      "startLine": 326,
      "endLine": 332
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "isEmptyPosition",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "userPosition",
          "type": "PerpPosition"
        }
      ],
      "returns": "boolean",
      "startLine": 322,
      "endLine": 324
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "positionCurrentDirection",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "userPosition",
          "type": "PerpPosition"
        }
      ],
      "returns": "PositionDirection",
      "startLine": 314,
      "endLine": 320
    },
    {
      "file": "protocol-v2/sdk/src/math/position.ts",
      "name": "positionIsAvailable",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "position",
          "type": "PerpPosition"
        }
      ],
      "returns": "boolean",
      "startLine": 242,
      "endLine": 249
    },
    {
      "file": "protocol-v2/sdk/src/math/protectedMakerParams.ts",
      "name": "getProtectedMakerParams",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpMarket",
          "type": "PerpMarketAccount"
        }
      ],
      "returns": "ProtectedMakerParams",
      "startLine": 5,
      "endLine": 23
    },
    {
      "file": "protocol-v2/sdk/src/math/protectedMakerParams.ts",
      "name": "getProtectedMakerParamsMap",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpMarkets",
          "type": "PerpMarketAccount[]"
        }
      ],
      "returns": "ProtectMakerParamsMap",
      "startLine": 25,
      "endLine": 38
    },
    {
      "file": "protocol-v2/sdk/src/math/repeg.ts",
      "name": "calculateAdjustKCost",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "numerator",
          "type": "BN"
        },
        {
          "name": "denomenator",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 22,
      "endLine": 56
    },
    {
      "file": "protocol-v2/sdk/src/math/repeg.ts",
      "name": "calculateBudgetedK",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "cost",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 151,
      "endLine": 178
    },
    {
      "file": "protocol-v2/sdk/src/math/repeg.ts",
      "name": "calculateBudgetedKBN",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "x",
          "type": "BN"
        },
        {
          "name": "y",
          "type": "BN"
        },
        {
          "name": "budget",
          "type": "BN"
        },
        {
          "name": "Q",
          "type": "BN"
        },
        {
          "name": "d",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN]",
      "startLine": 100,
      "endLine": 149
    },
    {
      "file": "protocol-v2/sdk/src/math/repeg.ts",
      "name": "calculateBudgetedPeg",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "budget",
          "type": "BN"
        },
        {
          "name": "targetPrice",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 180,
      "endLine": 214
    },
    {
      "file": "protocol-v2/sdk/src/math/repeg.ts",
      "name": "calculateRepegCost",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "amm",
          "type": "AMM"
        },
        {
          "name": "newPeg",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 91,
      "endLine": 98
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateAssetWeight",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "balanceAmount",
          "type": "BN"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        }
      ],
      "returns": "BN",
      "startLine": 153,
      "endLine": 194
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateBorrowRate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bank",
          "type": "SpotMarketAccount"
        },
        {
          "name": "delta",
          "type": "any"
        },
        {
          "name": "currentUtilization",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 461,
      "endLine": 467
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateDepositRate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bank",
          "type": "SpotMarketAccount"
        },
        {
          "name": "delta",
          "type": "any"
        },
        {
          "name": "currentUtilization",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 443,
      "endLine": 459
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateInterestAccumulated",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bank",
          "type": "SpotMarketAccount"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "{ borrowInterest: BN; depositInterest: BN; }",
      "startLine": 469,
      "endLine": 496
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateInterestRate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bank",
          "type": "SpotMarketAccount"
        },
        {
          "name": "delta",
          "type": "any"
        },
        {
          "name": "currentUtilization",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 381,
      "endLine": 441
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateLiabilityWeight",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "size",
          "type": "BN"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        }
      ],
      "returns": "BN",
      "startLine": 222,
      "endLine": 264
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateScaledInitialAssetWeight",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 196,
      "endLine": 220
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateSpotMarketBorrowCapacity",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "spotMarketAccount",
          "type": "SpotMarketAccount"
        },
        {
          "name": "targetBorrowRate",
          "type": "BN"
        }
      ],
      "returns": "{ totalCapacity: BN; remainingCapacity: BN; }",
      "startLine": 307,
      "endLine": 379
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateTokenUtilizationLimits",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "depositTokenAmount",
          "type": "BN"
        },
        {
          "name": "borrowTokenAmount",
          "type": "BN"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        }
      ],
      "returns": "{ minDepositTokensForUtilization: BN; maxBorrowTokensForUtilization: BN; }",
      "startLine": 498,
      "endLine": 543
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateUtilization",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bank",
          "type": "SpotMarketAccount"
        },
        {
          "name": "delta",
          "type": "any"
        }
      ],
      "returns": "BN",
      "startLine": 266,
      "endLine": 299
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "calculateWithdrawLimit",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "{ borrowLimit: BN; withdrawLimit: BN; minDepositAmount: BN; maxBorrowAmount: BN; currentDepositAmount: any; currentBorrowAmount: any; }",
      "startLine": 545,
      "endLine": 672
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "getBalance",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "tokenAmount",
          "type": "BN"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "balanceType",
          "type": "SpotBalanceType"
        }
      ],
      "returns": "BN",
      "startLine": 37,
      "endLine": 55
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "getSignedTokenAmount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "tokenAmount",
          "type": "BN"
        },
        {
          "name": "balanceType",
          "type": "SpotBalanceType"
        }
      ],
      "returns": "BN",
      "startLine": 91,
      "endLine": 100
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "getSpotAssetValue",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "tokenAmount",
          "type": "BN"
        },
        {
          "name": "strictOraclePrice",
          "type": "StrictOraclePrice"
        },
        {
          "name": "spotMarketAccount",
          "type": "SpotMarketAccount"
        },
        {
          "name": "maxMarginRatio",
          "type": "number"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        }
      ],
      "returns": "BN",
      "startLine": 674,
      "endLine": 710
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "getSpotLiabilityValue",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "tokenAmount",
          "type": "BN"
        },
        {
          "name": "strictOraclePrice",
          "type": "StrictOraclePrice"
        },
        {
          "name": "spotMarketAccount",
          "type": "SpotMarketAccount"
        },
        {
          "name": "maxMarginRatio",
          "type": "number"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        },
        {
          "name": "liquidationBuffer",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 712,
      "endLine": 753
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "getStrictTokenValue",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "tokenAmount",
          "type": "BN"
        },
        {
          "name": "spotDecimals",
          "type": "number"
        },
        {
          "name": "strictOraclePrice",
          "type": "StrictOraclePrice"
        }
      ],
      "returns": "BN",
      "startLine": 110,
      "endLine": 129
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "getTokenAmount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "balanceAmount",
          "type": "BN"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "balanceType",
          "type": "SpotBalanceType"
        }
      ],
      "returns": "BN",
      "startLine": 65,
      "endLine": 82
    },
    {
      "file": "protocol-v2/sdk/src/math/spotBalance.ts",
      "name": "getTokenValue",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "tokenAmount",
          "type": "BN"
        },
        {
          "name": "spotDecimals",
          "type": "number"
        },
        {
          "name": "oraclePriceData",
          "type": "Pick<OraclePriceData, \"price\">"
        }
      ],
      "returns": "BN",
      "startLine": 139,
      "endLine": 151
    },
    {
      "file": "protocol-v2/sdk/src/math/spotMarket.ts",
      "name": "calculateMaxRemainingDeposit",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "SpotMarketAccount"
        }
      ],
      "returns": "any",
      "startLine": 67,
      "endLine": 82
    },
    {
      "file": "protocol-v2/sdk/src/math/spotMarket.ts",
      "name": "calculateSpotMarketMarginRatio",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "SpotMarketAccount"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        },
        {
          "name": "size",
          "type": "BN"
        },
        {
          "name": "balanceType",
          "type": "SpotBalanceType"
        },
        {
          "name": "customMarginRatio",
          "type": "number"
        }
      ],
      "returns": "number",
      "startLine": 27,
      "endLine": 60
    },
    {
      "file": "protocol-v2/sdk/src/math/spotMarket.ts",
      "name": "castNumberToSpotPrecision",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "value",
          "type": "any"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        }
      ],
      "returns": "BN",
      "startLine": 16,
      "endLine": 25
    },
    {
      "file": "protocol-v2/sdk/src/math/spotPosition.ts",
      "name": "calculateWeightedTokenValue",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "tokenAmount",
          "type": "BN"
        },
        {
          "name": "tokenValue",
          "type": "BN"
        },
        {
          "name": "oraclePrice",
          "type": "BN"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        },
        {
          "name": "customMarginRatio",
          "type": "number"
        }
      ],
      "returns": "{ weight: BN; weightedTokenValue: BN; }",
      "startLine": 102,
      "endLine": 146
    },
    {
      "file": "protocol-v2/sdk/src/math/spotPosition.ts",
      "name": "getWorstCaseTokenAmounts",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "spotPosition",
          "type": "SpotPosition"
        },
        {
          "name": "spotMarketAccount",
          "type": "SpotMarketAccount"
        },
        {
          "name": "strictOraclePrice",
          "type": "StrictOraclePrice"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        },
        {
          "name": "customMarginRatio",
          "type": "number"
        }
      ],
      "returns": "OrderFillSimulation",
      "startLine": 31,
      "endLine": 100
    },
    {
      "file": "protocol-v2/sdk/src/math/spotPosition.ts",
      "name": "isSpotPositionAvailable",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "position",
          "type": "SpotPosition"
        }
      ],
      "returns": "boolean",
      "startLine": 18,
      "endLine": 20
    },
    {
      "file": "protocol-v2/sdk/src/math/spotPosition.ts",
      "name": "simulateOrderFill",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "tokenAmount",
          "type": "BN"
        },
        {
          "name": "tokenValue",
          "type": "BN"
        },
        {
          "name": "openOrders",
          "type": "BN"
        },
        {
          "name": "strictOraclePrice",
          "type": "StrictOraclePrice"
        },
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        },
        {
          "name": "marginCategory",
          "type": "MarginCategory"
        },
        {
          "name": "customMarginRatio",
          "type": "number"
        }
      ],
      "returns": "OrderFillSimulation",
      "startLine": 148,
      "endLine": 184
    },
    {
      "file": "protocol-v2/sdk/src/math/state.ts",
      "name": "builderCodesEnabled",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "stateAccount",
          "type": "StateAccount"
        }
      ],
      "returns": "boolean",
      "startLine": 42,
      "endLine": 44
    },
    {
      "file": "protocol-v2/sdk/src/math/state.ts",
      "name": "builderReferralEnabled",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "stateAccount",
          "type": "StateAccount"
        }
      ],
      "returns": "boolean",
      "startLine": 46,
      "endLine": 48
    },
    {
      "file": "protocol-v2/sdk/src/math/state.ts",
      "name": "calculateInitUserFee",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "stateAccount",
          "type": "StateAccount"
        }
      ],
      "returns": "BN",
      "startLine": 9,
      "endLine": 27
    },
    {
      "file": "protocol-v2/sdk/src/math/state.ts",
      "name": "getMaxNumberOfSubAccounts",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "stateAccount",
          "type": "StateAccount"
        }
      ],
      "returns": "BN",
      "startLine": 29,
      "endLine": 34
    },
    {
      "file": "protocol-v2/sdk/src/math/state.ts",
      "name": "useMedianTriggerPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "stateAccount",
          "type": "StateAccount"
        }
      ],
      "returns": "boolean",
      "startLine": 36,
      "endLine": 40
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "calculateEstimatedSuperStakeLiquidationPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "lstDepositAmount",
          "type": "number"
        },
        {
          "name": "lstMaintenanceAssetWeight",
          "type": "number"
        },
        {
          "name": "solBorrowAmount",
          "type": "number"
        },
        {
          "name": "solMaintenanceLiabilityWeight",
          "type": "number"
        },
        {
          "name": "lstPriceRatio",
          "type": "number"
        }
      ],
      "returns": "number",
      "startLine": 513,
      "endLine": 525
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "calculateSolEarned",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "{\n\tmarketIndex,\n\tuser,\n\tdepositRecords,\n}",
          "type": "{ marketIndex: number; user: User; depositRecords: DepositRecord[]; }"
        }
      ],
      "returns": "Promise<BN>",
      "startLine": 420,
      "endLine": 510
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "fetchBSolDriftEmissions",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [],
      "returns": "Promise<any>",
      "startLine": 45,
      "endLine": 47
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "fetchBSolMetrics",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [],
      "returns": "Promise<any>",
      "startLine": 41,
      "endLine": 43
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "fetchJitoSolMetrics",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [],
      "returns": "Promise<JITO_SOL_METRICS_ENDPOINT_RESPONSE>",
      "startLine": 302,
      "endLine": 327
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "fetchMSolMetrics",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [],
      "returns": "Promise<MSOL_METRICS_ENDPOINT_RESPONSE>",
      "startLine": 380,
      "endLine": 384
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "findBestJitoSolSuperStakeIxs",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "{\n\tamount,\n\tjupiterClient,\n\tdriftClient,\n\tuserAccountPublicKey,\n\tonlyDirectRoutes,\n\tjupiterQuote,\n}",
          "type": "{ amount: BN; jupiterClient: JupiterClient; driftClient: DriftClient; userAccountPublicKey?: PublicKey; onlyDirectRoutes?: boolean; jupiterQuote?: QuoteResponse; }"
        }
      ],
      "returns": "Promise<{ ixs: TransactionInstruction[]; lookupTables: AddressLookupTableAccount[]; method: \"jupiter\" | \"marinade\"; price?: number; }>",
      "startLine": 193,
      "endLine": 223
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "findBestLstSuperStakeIxs",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "{\n\tamount,\n\tjupiterClient,\n\tdriftClient,\n\tuserAccountPublicKey,\n\tonlyDirectRoutes,\n\tlstMarketIndex,\n\tjupiterQuote,\n}",
          "type": "{ amount: BN; lstMint: PublicKey; lstMarketIndex: number; jupiterClient: JupiterClient; driftClient: DriftClient; userAccountPublicKey?: PublicKey; onlyDirectRoutes?: boolean; jupiterQuote?: QuoteResponse; }"
        }
      ],
      "returns": "Promise<{ ixs: TransactionInstruction[]; lookupTables: AddressLookupTableAccount[]; method: \"jupiter\" | \"marinade\"; }>",
      "startLine": 230,
      "endLine": 267
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "findBestMSolSuperStakeIxs",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "{\n\tamount,\n\tjupiterClient,\n\tdriftClient,\n\tuserAccountPublicKey,\n\tprice,\n\tforceMarinade,\n\tonlyDirectRoutes,\n\tjupiterQuote,\n}",
          "type": "{ amount: BN; jupiterClient: JupiterClient; driftClient: DriftClient; price?: number; userAccountPublicKey?: PublicKey; forceMarinade?: boolean; onlyDirectRoutes?: boolean; jupiterQuote?: QuoteResponse; }"
        }
      ],
      "returns": "Promise<{ ixs: TransactionInstruction[]; lookupTables: AddressLookupTableAccount[]; method: \"jupiter\" | \"marinade\"; price: number; }>",
      "startLine": 111,
      "endLine": 191
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "findBestSuperStakeIxs",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "{\n\tmarketIndex,\n\tamount,\n\tjupiterClient,\n\tdriftClient,\n\tuserAccountPublicKey,\n\tprice,\n\tforceMarinade,\n\tonlyDirectRoutes,\n\tjupiterQuote,\n}",
          "type": "{ marketIndex: number; amount: BN; jupiterClient: JupiterClient; driftClient: DriftClient; price?: number; userAccountPublicKey?: PublicKey; forceMarinade?: boolean; onlyDirectRoutes?: boolean; jupiterQuote?: QuoteResponse; }"
        }
      ],
      "returns": "Promise<{ ixs: TransactionInstruction[]; lookupTables: AddressLookupTableAccount[]; method: \"jupiter\" | \"marinade\"; price?: number; }>",
      "startLine": 49,
      "endLine": 109
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "get30DAgo",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "Date",
      "startLine": 297,
      "endLine": 300
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "getJitoSolHistoricalPriceMap",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "timestamps",
          "type": "number[]"
        }
      ],
      "returns": "Promise<Map<number, number>>",
      "startLine": 386,
      "endLine": 418
    },
    {
      "file": "protocol-v2/sdk/src/math/superStake.ts",
      "name": "getNormalizedDateString",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "inDate",
          "type": "Date"
        }
      ],
      "returns": "string",
      "startLine": 291,
      "endLine": 295
    },
    {
      "file": "protocol-v2/sdk/src/math/tiers.ts",
      "name": "getPerpMarketTierNumber",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpMarket",
          "type": "PerpMarketAccount"
        }
      ],
      "returns": "number",
      "startLine": 3,
      "endLine": 17
    },
    {
      "file": "protocol-v2/sdk/src/math/tiers.ts",
      "name": "getSpotMarketTierNumber",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "spotMarket",
          "type": "SpotMarketAccount"
        }
      ],
      "returns": "number",
      "startLine": 19,
      "endLine": 33
    },
    {
      "file": "protocol-v2/sdk/src/math/tiers.ts",
      "name": "perpTierIsAsSafeAs",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "perpTier",
          "type": "number"
        },
        {
          "name": "otherPerpTier",
          "type": "number"
        },
        {
          "name": "otherSpotTier",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 35,
      "endLine": 44
    },
    {
      "file": "protocol-v2/sdk/src/math/trade.ts",
      "name": "calculateEstimatedEntryPriceWithL2",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "assetType",
          "type": "AssetType"
        },
        {
          "name": "amount",
          "type": "BN"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "basePrecision",
          "type": "BN"
        },
        {
          "name": "l2",
          "type": "L2OrderBook"
        }
      ],
      "returns": "{ entryPrice: BN; priceImpact: BN; bestPrice: BN; worstPrice: BN; baseFilled: BN; quoteFilled: BN; }",
      "startLine": 909,
      "endLine": 994
    },
    {
      "file": "protocol-v2/sdk/src/math/trade.ts",
      "name": "calculateEstimatedPerpEntryPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "assetType",
          "type": "AssetType"
        },
        {
          "name": "amount",
          "type": "BN"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "dlob",
          "type": "DLOB"
        },
        {
          "name": "slot",
          "type": "number"
        },
        {
          "name": "usersToSkip",
          "type": "Map<PublicKey, boolean>"
        }
      ],
      "returns": "{ entryPrice: BN; priceImpact: BN; bestPrice: BN; worstPrice: BN; baseFilled: BN; quoteFilled: BN; }",
      "startLine": 406,
      "endLine": 698
    },
    {
      "file": "protocol-v2/sdk/src/math/trade.ts",
      "name": "calculateEstimatedSpotEntryPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "assetType",
          "type": "AssetType"
        },
        {
          "name": "amount",
          "type": "BN"
        },
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "market",
          "type": "SpotMarketAccount"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        },
        {
          "name": "dlob",
          "type": "DLOB"
        },
        {
          "name": "serumBids",
          "type": "Orderbook"
        },
        {
          "name": "serumAsks",
          "type": "Orderbook"
        },
        {
          "name": "slot",
          "type": "number"
        },
        {
          "name": "usersToSkip",
          "type": "Map<PublicKey, boolean>"
        }
      ],
      "returns": "{ entryPrice: BN; priceImpact: BN; bestPrice: BN; worstPrice: BN; baseFilled: BN; quoteFilled: BN; }",
      "startLine": 715,
      "endLine": 907
    },
    {
      "file": "protocol-v2/sdk/src/math/trade.ts",
      "name": "calculateTargetPriceTrade",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "targetPrice",
          "type": "BN"
        },
        {
          "name": "pct",
          "type": "BN"
        },
        {
          "name": "outputAssetType",
          "type": "AssetType"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "useSpread",
          "type": "boolean"
        },
        {
          "name": "latestSlot",
          "type": "BN"
        }
      ],
      "returns": "[PositionDirection, BN, BN, BN]",
      "startLine": 239,
      "endLine": 391
    },
    {
      "file": "protocol-v2/sdk/src/math/trade.ts",
      "name": "calculateTradeAcquiredAmounts",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "amount",
          "type": "BN"
        },
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "inputAssetType",
          "type": "AssetType"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "useSpread",
          "type": "boolean"
        },
        {
          "name": "latestSlot",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN, BN]",
      "startLine": 170,
      "endLine": 217
    },
    {
      "file": "protocol-v2/sdk/src/math/trade.ts",
      "name": "calculateTradeSlippage",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "direction",
          "type": "PositionDirection"
        },
        {
          "name": "amount",
          "type": "BN"
        },
        {
          "name": "market",
          "type": "PerpMarketAccount"
        },
        {
          "name": "inputAssetType",
          "type": "AssetType"
        },
        {
          "name": "mmOraclePriceData",
          "type": "MMOraclePriceData"
        },
        {
          "name": "useSpread",
          "type": "boolean"
        },
        {
          "name": "latestSlot",
          "type": "BN"
        }
      ],
      "returns": "[BN, BN, BN, BN]",
      "startLine": 75,
      "endLine": 157
    },
    {
      "file": "protocol-v2/sdk/src/math/trade.ts",
      "name": "getUser30dRollingVolumeEstimate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "userStatsAccount",
          "type": "UserStatsAccount"
        },
        {
          "name": "now",
          "type": "BN"
        }
      ],
      "returns": "any",
      "startLine": 996,
      "endLine": 1020
    },
    {
      "file": "protocol-v2/sdk/src/math/userStatus.ts",
      "name": "isUserProtectedMaker",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "userAccount",
          "type": "UserAccount"
        }
      ],
      "returns": "boolean",
      "startLine": 3,
      "endLine": 5
    },
    {
      "file": "protocol-v2/sdk/src/math/utils.ts",
      "name": "checkSameDate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "dateString1",
          "type": "string"
        },
        {
          "name": "dateString2",
          "type": "string"
        }
      ],
      "returns": "boolean",
      "startLine": 88,
      "endLine": 98
    },
    {
      "file": "protocol-v2/sdk/src/math/utils.ts",
      "name": "clampBN",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "x",
          "type": "BN"
        },
        {
          "name": "min",
          "type": "BN"
        },
        {
          "name": "max",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 4,
      "endLine": 6
    },
    {
      "file": "protocol-v2/sdk/src/math/utils.ts",
      "name": "divCeil",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "a",
          "type": "BN"
        },
        {
          "name": "b",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 26,
      "endLine": 36
    },
    {
      "file": "protocol-v2/sdk/src/math/utils.ts",
      "name": "isBNSafe",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "number",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 100,
      "endLine": 102
    },
    {
      "file": "protocol-v2/sdk/src/math/utils.ts",
      "name": "numberToSafeBN",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "number",
          "type": "number"
        },
        {
          "name": "precision",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 109,
      "endLine": 121
    },
    {
      "file": "protocol-v2/sdk/src/math/utils.ts",
      "name": "sigNum",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "x",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 38,
      "endLine": 40
    },
    {
      "file": "protocol-v2/sdk/src/math/utils.ts",
      "name": "squareRootBN",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "n",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 8,
      "endLine": 24
    },
    {
      "file": "protocol-v2/sdk/src/math/utils.ts",
      "name": "timeRemainingUntilUpdate",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "now",
          "type": "BN"
        },
        {
          "name": "lastUpdateTs",
          "type": "BN"
        },
        {
          "name": "updatePeriod",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 50,
      "endLine": 86
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getNonIdleUserFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 15,
      "endLine": 22
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getPerpMarketAccountsFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 116,
      "endLine": 123
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getRevenueShareEscrowFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 133,
      "endLine": 142
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getSignedMsgUserOrdersFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 105,
      "endLine": 114
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getSpotMarketAccountsFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 124,
      "endLine": 131
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUserFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 6,
      "endLine": 13
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUserStatsFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 78,
      "endLine": 85
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUserStatsIsReferredFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 87,
      "endLine": 94
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUserStatsIsReferredOrReferrerFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 96,
      "endLine": 103
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUsersWithPoolId",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "poolId",
          "type": "number"
        }
      ],
      "returns": "MemcmpFilter",
      "startLine": 69,
      "endLine": 76
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUserThatHasBeenLP",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 51,
      "endLine": 58
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUserWithAuctionFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 42,
      "endLine": 49
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUserWithName",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returns": "MemcmpFilter",
      "startLine": 60,
      "endLine": 67
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUserWithOrderFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 24,
      "endLine": 31
    },
    {
      "file": "protocol-v2/sdk/src/memcmp.ts",
      "name": "getUserWithoutOrderFilter",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "MemcmpFilter",
      "startLine": 33,
      "endLine": 40
    },
    {
      "file": "protocol-v2/sdk/src/oracles/oracleId.ts",
      "name": "getOracleId",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "publicKey",
          "type": "PublicKey"
        },
        {
          "name": "source",
          "type": "OracleSource"
        }
      ],
      "returns": "string",
      "startLine": 50,
      "endLine": 55
    },
    {
      "file": "protocol-v2/sdk/src/oracles/oracleId.ts",
      "name": "getOracleSourceFromNum",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "sourceNum",
          "type": "number"
        }
      ],
      "returns": "OracleSource",
      "startLine": 27,
      "endLine": 48
    },
    {
      "file": "protocol-v2/sdk/src/oracles/oracleId.ts",
      "name": "getOracleSourceNum",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "source",
          "type": "OracleSource"
        }
      ],
      "returns": "number",
      "startLine": 4,
      "endLine": 25
    },
    {
      "file": "protocol-v2/sdk/src/oracles/oracleId.ts",
      "name": "getPublicKeyAndSourceFromOracleId",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "oracleId",
          "type": "string"
        }
      ],
      "returns": "{ publicKey: PublicKey; source: OracleSource; }",
      "startLine": 57,
      "endLine": 66
    },
    {
      "file": "protocol-v2/sdk/src/oracles/pythClient.ts",
      "name": "convertPythPrice",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "price",
          "type": "number"
        },
        {
          "name": "exponent",
          "type": "number"
        },
        {
          "name": "multiple",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 70,
      "endLine": 76
    },
    {
      "file": "protocol-v2/sdk/src/oracles/pythClient.ts",
      "name": "getStableCoinPrice",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "price",
          "type": "BN"
        },
        {
          "name": "confidence",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 79,
      "endLine": 85
    },
    {
      "file": "protocol-v2/sdk/src/oracles/pythLazerClient.ts",
      "name": "convertPythPrice",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "price",
          "type": "BN"
        },
        {
          "name": "exponent",
          "type": "number"
        },
        {
          "name": "multiple",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 91,
      "endLine": 95
    },
    {
      "file": "protocol-v2/sdk/src/oracles/pythLazerClient.ts",
      "name": "getStableCoinPrice",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "price",
          "type": "BN"
        },
        {
          "name": "confidence",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 98,
      "endLine": 104
    },
    {
      "file": "protocol-v2/sdk/src/oracles/pythPullClient.ts",
      "name": "convertPythPrice",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "price",
          "type": "BN"
        },
        {
          "name": "exponent",
          "type": "number"
        },
        {
          "name": "multiple",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 96,
      "endLine": 104
    },
    {
      "file": "protocol-v2/sdk/src/oracles/pythPullClient.ts",
      "name": "getStableCoinPrice",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "price",
          "type": "BN"
        },
        {
          "name": "confidence",
          "type": "BN"
        }
      ],
      "returns": "BN",
      "startLine": 107,
      "endLine": 113
    },
    {
      "file": "protocol-v2/sdk/src/oracles/switchboardClient.ts",
      "name": "convertSwitchboardDecimal",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "switchboardDecimal",
          "type": "{ scale: number; mantissa: BN; }"
        }
      ],
      "returns": "BN",
      "startLine": 69,
      "endLine": 77
    },
    {
      "file": "protocol-v2/sdk/src/oracles/utils.ts",
      "name": "getOracleConfidenceFromMMOracleData",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "mmOraclePrice",
          "type": "BN"
        },
        {
          "name": "oraclePriceData",
          "type": "OraclePriceData"
        }
      ],
      "returns": "BN",
      "startLine": 4,
      "endLine": 10
    },
    {
      "file": "protocol-v2/sdk/src/orderParams.ts",
      "name": "getLimitOrderParams",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "params",
          "type": "Omit<OptionalOrderParams, \"orderType\"> & { price: BN; }"
        }
      ],
      "returns": "OptionalOrderParams",
      "startLine": 11,
      "endLine": 19
    },
    {
      "file": "protocol-v2/sdk/src/orderParams.ts",
      "name": "getMarketOrderParams",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "params",
          "type": "Omit<OptionalOrderParams, \"orderType\">"
        }
      ],
      "returns": "OptionalOrderParams",
      "startLine": 48,
      "endLine": 56
    },
    {
      "file": "protocol-v2/sdk/src/orderParams.ts",
      "name": "getOrderParams",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "optionalOrderParams",
          "type": "OptionalOrderParams"
        },
        {
          "name": "overridingParams",
          "type": "Record<string, any>"
        }
      ],
      "returns": "OrderParams",
      "startLine": 70,
      "endLine": 80
    },
    {
      "file": "protocol-v2/sdk/src/orderParams.ts",
      "name": "getTriggerLimitOrderParams",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "params",
          "type": "Omit<OptionalOrderParams, \"orderType\"> & { triggerCondition: OrderTriggerCondition; triggerPrice: BN; price: BN; }"
        }
      ],
      "returns": "OptionalOrderParams",
      "startLine": 34,
      "endLine": 46
    },
    {
      "file": "protocol-v2/sdk/src/orderParams.ts",
      "name": "getTriggerMarketOrderParams",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "params",
          "type": "Omit<OptionalOrderParams, \"orderType\"> & { triggerCondition: OrderTriggerCondition; triggerPrice: BN; }"
        }
      ],
      "returns": "OptionalOrderParams",
      "startLine": 21,
      "endLine": 32
    },
    {
      "file": "protocol-v2/sdk/src/orderParams.ts",
      "name": "isUpdateHighLeverageMode",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bitFlags",
          "type": "number"
        }
      ],
      "returns": "boolean",
      "startLine": 82,
      "endLine": 84
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/driftPriorityFeeMethod.ts",
      "name": "fetchDriftPriorityFee",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "url",
          "type": "string"
        },
        {
          "name": "marketTypes",
          "type": "string[]"
        },
        {
          "name": "marketIndexes",
          "type": "number[]"
        }
      ],
      "returns": "Promise<DriftPriorityFeeResponse>",
      "startLine": 18,
      "endLine": 42
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/heliusPriorityFeeMethod.ts",
      "name": "fetchHeliusPriorityFee",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "heliusRpcUrl",
          "type": "string"
        },
        {
          "name": "lookbackDistance",
          "type": "number"
        },
        {
          "name": "addresses",
          "type": "string[]"
        }
      ],
      "returns": "Promise<HeliusPriorityFeeResponse>",
      "startLine": 27,
      "endLine": 57
    },
    {
      "file": "protocol-v2/sdk/src/priorityFee/solanaPriorityFeeMethod.ts",
      "name": "fetchSolanaPriorityFee",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "lookbackDistance",
          "type": "number"
        },
        {
          "name": "addresses",
          "type": "string[]"
        }
      ],
      "returns": "Promise<SolanaPriorityFeeResponse[]>",
      "startLine": 8,
      "endLine": 34
    },
    {
      "file": "protocol-v2/sdk/src/slot/SlothashSubscriber.ts",
      "name": "deserializeSlothash",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "data",
          "type": "Buffer<ArrayBufferLike>"
        }
      ],
      "returns": "Slothash",
      "startLine": 119,
      "endLine": 126
    },
    {
      "file": "protocol-v2/sdk/src/token/index.ts",
      "name": "parseTokenAccount",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "data",
          "type": "Buffer<ArrayBufferLike>"
        },
        {
          "name": "pubkey",
          "type": "PublicKey"
        }
      ],
      "returns": "Account",
      "startLine": 4,
      "endLine": 13
    },
    {
      "file": "protocol-v2/sdk/src/tx/reportTransactionError.ts",
      "name": "commitmentToFinality",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "commitment",
          "type": "Commitment"
        }
      ],
      "returns": "Finality",
      "startLine": 15,
      "endLine": 26
    },
    {
      "file": "protocol-v2/sdk/src/tx/reportTransactionError.ts",
      "name": "getTransactionError",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "transactionResult",
          "type": "VersionedTransactionResponse"
        }
      ],
      "returns": "SendTransactionError",
      "startLine": 138,
      "endLine": 159
    },
    {
      "file": "protocol-v2/sdk/src/tx/reportTransactionError.ts",
      "name": "getTransactionErrorFromTxSig",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "txSig",
          "type": "string"
        },
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "commitment",
          "type": "Commitment"
        }
      ],
      "returns": "Promise<SendTransactionError>",
      "startLine": 110,
      "endLine": 136
    },
    {
      "file": "protocol-v2/sdk/src/tx/reportTransactionError.ts",
      "name": "getTransactionResult",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "txSig",
          "type": "string"
        },
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "commitment",
          "type": "Commitment"
        }
      ],
      "returns": "Promise<VersionedTransactionResponse>",
      "startLine": 28,
      "endLine": 40
    },
    {
      "file": "protocol-v2/sdk/src/tx/reportTransactionError.ts",
      "name": "getTransactionResultWithRetry",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "txSig",
          "type": "string"
        },
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "commitment",
          "type": "Commitment"
        }
      ],
      "returns": "Promise<VersionedTransactionResponse>",
      "startLine": 42,
      "endLine": 78
    },
    {
      "file": "protocol-v2/sdk/src/tx/reportTransactionError.ts",
      "name": "throwTransactionError",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "txSig",
          "type": "string"
        },
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "commitment",
          "type": "Commitment"
        }
      ],
      "returns": "Promise<void>",
      "startLine": 88,
      "endLine": 100
    },
    {
      "file": "protocol-v2/sdk/src/tx/utils.ts",
      "name": "createNativeInstructionDiscriminatorBuffer",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "discriminator",
          "type": "number"
        }
      ],
      "returns": "Uint8Array<ArrayBufferLike>",
      "startLine": 95,
      "endLine": 102
    },
    {
      "file": "protocol-v2/sdk/src/tx/utils.ts",
      "name": "getSizeOfCompressedU16",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "n",
          "type": "number"
        }
      ],
      "returns": "number",
      "startLine": 91,
      "endLine": 93
    },
    {
      "file": "protocol-v2/sdk/src/tx/utils.ts",
      "name": "getSizeOfTransaction",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "instructions",
          "type": "TransactionInstruction[]"
        },
        {
          "name": "versionedTransaction",
          "type": "boolean"
        },
        {
          "name": "addressLookupTables",
          "type": "AddressLookupTableAccount[]"
        }
      ],
      "returns": "number",
      "startLine": 21,
      "endLine": 89
    },
    {
      "file": "protocol-v2/sdk/src/tx/utils.ts",
      "name": "isVersionedTransaction",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "tx",
          "type": "Transaction | VersionedTransaction"
        }
      ],
      "returns": "boolean",
      "startLine": 11,
      "endLine": 19
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "getVariant",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "object",
          "type": "unknown"
        }
      ],
      "returns": "string",
      "startLine": 332,
      "endLine": 334
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "isOneOfVariant",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "object",
          "type": "unknown"
        },
        {
          "name": "types",
          "type": "string[]"
        }
      ],
      "returns": "boolean",
      "startLine": 326,
      "endLine": 330
    },
    {
      "file": "protocol-v2/sdk/src/types.ts",
      "name": "isVariant",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "object",
          "type": "unknown"
        },
        {
          "name": "type",
          "type": "string"
        }
      ],
      "returns": "boolean",
      "startLine": 322,
      "endLine": 324
    },
    {
      "file": "protocol-v2/sdk/src/userName.ts",
      "name": "decodeName",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "bytes",
          "type": "number[]"
        }
      ],
      "returns": "string",
      "startLine": 18,
      "endLine": 21
    },
    {
      "file": "protocol-v2/sdk/src/userName.ts",
      "name": "encodeName",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "name",
          "type": "string"
        }
      ],
      "returns": "number[]",
      "startLine": 6,
      "endLine": 16
    },
    {
      "file": "protocol-v2/sdk/src/util/computeUnits.ts",
      "name": "containsComputeUnitIxs",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "ixs",
          "type": "TransactionInstruction[]"
        }
      ],
      "returns": "{ hasSetComputeUnitLimitIx: boolean; hasSetComputeUnitPriceIx: boolean; }",
      "startLine": 57,
      "endLine": 65
    },
    {
      "file": "protocol-v2/sdk/src/util/computeUnits.ts",
      "name": "findComputeUnitConsumption",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "txSignature",
          "type": "string"
        },
        {
          "name": "commitment",
          "type": "Finality"
        }
      ],
      "returns": "Promise<number[]>",
      "startLine": 9,
      "endLine": 27
    },
    {
      "file": "protocol-v2/sdk/src/util/computeUnits.ts",
      "name": "isSetComputeUnitPriceIx",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "ix",
          "type": "TransactionInstruction"
        }
      ],
      "returns": "boolean",
      "startLine": 43,
      "endLine": 55
    },
    {
      "file": "protocol-v2/sdk/src/util/computeUnits.ts",
      "name": "isSetComputeUnitsIx",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "ix",
          "type": "TransactionInstruction"
        }
      ],
      "returns": "boolean",
      "startLine": 29,
      "endLine": 41
    },
    {
      "file": "protocol-v2/sdk/src/util/digest.ts",
      "name": "digest",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "data",
          "type": "Buffer<ArrayBufferLike>"
        }
      ],
      "returns": "Buffer<ArrayBufferLike>",
      "startLine": 4,
      "endLine": 8
    },
    {
      "file": "protocol-v2/sdk/src/util/digest.ts",
      "name": "digestSignature",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "signature",
          "type": "Uint8Array<ArrayBufferLike>"
        }
      ],
      "returns": "string",
      "startLine": 10,
      "endLine": 12
    },
    {
      "file": "protocol-v2/sdk/src/util/digest.ts",
      "name": "generateSignedMsgUuid",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [],
      "returns": "Uint8Array<ArrayBufferLike>",
      "startLine": 14,
      "endLine": 16
    },
    {
      "file": "protocol-v2/sdk/src/util/ed25519Utils.ts",
      "name": "createMinimalEd25519VerifyIx",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "customInstructionIndex",
          "type": "number"
        },
        {
          "name": "messageOffset",
          "type": "number"
        },
        {
          "name": "customInstructionData",
          "type": "Uint8Array<ArrayBufferLike>"
        },
        {
          "name": "magicLen",
          "type": "number"
        }
      ],
      "returns": "TransactionInstruction",
      "startLine": 46,
      "endLine": 85
    },
    {
      "file": "protocol-v2/sdk/src/util/ed25519Utils.ts",
      "name": "readUint16LE",
      "isExported": false,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "data",
          "type": "Uint8Array<ArrayBufferLike>"
        },
        {
          "name": "offset",
          "type": "number"
        }
      ],
      "returns": "number",
      "startLine": 10,
      "endLine": 12
    },
    {
      "file": "protocol-v2/sdk/src/util/promiseTimeout.ts",
      "name": "promiseTimeout",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "promise",
          "type": "Promise<T>"
        },
        {
          "name": "timeoutMs",
          "type": "number"
        }
      ],
      "returns": "Promise<T>",
      "startLine": 1,
      "endLine": 14
    },
    {
      "file": "protocol-v2/sdk/src/util/pythOracleUtils.ts",
      "name": "getFeedIdUint8Array",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "feedId",
          "type": "string"
        }
      ],
      "returns": "Uint8Array<ArrayBufferLike>",
      "startLine": 8,
      "endLine": 11
    },
    {
      "file": "protocol-v2/sdk/src/util/pythOracleUtils.ts",
      "name": "trimFeedId",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": false,
      "parameters": [
        {
          "name": "feedId",
          "type": "string"
        }
      ],
      "returns": "string",
      "startLine": 1,
      "endLine": 6
    },
    {
      "file": "protocol-v2/sdk/src/util/tps.ts",
      "name": "estimateTps",
      "isExported": true,
      "isDefaultExport": false,
      "isAsync": true,
      "parameters": [
        {
          "name": "programId",
          "type": "PublicKey"
        },
        {
          "name": "connection",
          "type": "Connection"
        },
        {
          "name": "failed",
          "type": "boolean"
        }
      ],
      "returns": "Promise<number>",
      "startLine": 3,
      "endLine": 27
    }
  ]
}
